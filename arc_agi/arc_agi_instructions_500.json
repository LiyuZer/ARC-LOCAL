{"85b81ff1": {"instruction": "1. For each row in the grid, scan the row in segments of 6 columns at a time (i.e., columns 0\u20135, 6\u201311, etc.).\n2. Within each 6-column segment, identify the two cells containing '0's (at positions [*,1] and [*,2] in the segment). Mark the next three cells in the segment (columns [*,3], [*,4], [*,5]) as a group.\n3. If the first three cells in the segment are [color, 0, 0], then check the next three cells (columns 3, 4, 5 of the segment):\n   a. If columns [*,3] and [*,4] are both the color, and column [*,5] is 0, replace column [*,4] with 0 and column [*,5] with the color. \n   b. Otherwise, leave the segment unchanged.\n4. Leave all other cells unchanged.", "test_input": [[6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 0], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 0], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 0, 0, 6, 0], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 0], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 6], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 0, 0, 6, 6, 0, 6, 6, 0, 6, 0, 0, 6, 6], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6]], "predicted_output": "[[6, 6, 0, 6, 0, 6, 6, 6, 0, 6, 0, 6, 6, 0],\n [6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 0],\n [6, 6, 0, 6, 0, 6, 6, 6, 0, 6, 0, 6, 6, 0],\n [6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 0],\n [6, 6, 0, 6, 0, 6, 6, 6, 0, 6, 0, 6, 6, 0],\n [6, 6, 0, 6, 0, 6, 6, 6, 0, 6, 0, 0, 6, 0],\n [6, 6, 0, 6, 0, 6, 6, 6, 0, 6, 0, 6, 6, 0],\n [6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 0],\n [6, 6, 0, 6, 0, 6, 6, 6, 0, 6, 0, 6, 6, 0],\n [6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 6],\n [6, 6, 0, 6, 0, 6, 6, 6, 0, 6, 0, 6, 6, 0],\n [6, 0, 0, 6, 0, 6, 6, 6, 0, 6, 0, 0, 6, 6],\n [6, 6, 0, 6, 0, 6, 6, 6, 0, 6, 0, 6, 6, 0]]", "expected_output": [[6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 0], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 0, 0, 6, 0, 0, 6, 0, 0, 6, 6, 0, 6, 6], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 0, 0, 6, 0, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 0, 0, 6, 0, 0, 6, 0, 0, 6, 6, 0, 6, 6], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 0, 0, 6, 6, 0, 6, 0, 0, 6, 6, 0, 6, 6], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6], [6, 0, 0, 6, 6, 0, 6, 6, 0, 6, 0, 0, 6, 6], [6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6, 0, 6, 6]]}, "85c4e7cd": {"instruction": "1. Identify all unique colors used in the input grid. Arrange the colors in order of their appearance in successive \"rings\" from the outside towards the center of the grid.\n2. Create a mapping where each input color is replaced by the color that was one \"ring\" closer to the center in the original input grid. In other words, shift each color toward the center's color assignment by one ring, mapping the innermost color to the original outermost color.\n   - The outermost ring\u2019s color (found on the border) becomes the color of the innermost area in the output.\n   - The second outermost ring\u2019s color becomes the color of the second innermost area, and so on.\n   - The innermost color (central region) becomes the new outermost color in the output.\n3. For every cell in the grid, change its value according to this mapping, resulting in each \"ring\" being colored like the next inner ring from the input (with the innermost region recolored as the outermost).", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8], [8, 2, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 8], [8, 2, 4, 3, 7, 7, 7, 7, 7, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 6, 6, 6, 6, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 6, 5, 5, 6, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 6, 5, 5, 6, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 6, 6, 6, 6, 7, 3, 4, 2, 8], [8, 2, 4, 3, 7, 7, 7, 7, 7, 7, 3, 4, 2, 8], [8, 2, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 8], [8, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8], [8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5],\n [5, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 5],\n [5, 8, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8, 5],\n [5, 8, 2, 4, 3, 3, 3, 3, 3, 3, 4, 2, 8, 5],\n [5, 8, 2, 4, 3, 7, 7, 7, 7, 4, 3, 2, 8, 5],\n [5, 8, 2, 4, 3, 7, 6, 6, 7, 4, 3, 2, 8, 5],\n [5, 8, 2, 4, 3, 7, 6, 6, 7, 4, 3, 2, 8, 5],\n [5, 8, 2, 4, 3, 7, 7, 7, 7, 4, 3, 2, 8, 5],\n [5, 8, 2, 4, 3, 3, 3, 3, 3, 3, 4, 2, 8, 5],\n [5, 8, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 8, 5],\n [5, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 5],\n [5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]", "expected_output": [[5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5], [5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5], [5, 6, 7, 3, 3, 3, 3, 3, 3, 3, 3, 7, 6, 5], [5, 6, 7, 3, 4, 4, 4, 4, 4, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 2, 2, 2, 2, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 2, 8, 8, 2, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 2, 8, 8, 2, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 2, 2, 2, 2, 4, 3, 7, 6, 5], [5, 6, 7, 3, 4, 4, 4, 4, 4, 4, 3, 7, 6, 5], [5, 6, 7, 3, 3, 3, 3, 3, 3, 3, 3, 7, 6, 5], [5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5], [5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]}, "85fa5666": {"instruction": "1. Identify all rows and columns that contain only 0s or the special background/cell value (here, 0). These rows and columns will not be altered for the transformation.\n2. For all non-background numbers (3, 6, 7, 8) in the input grid, perform the following transformation:\n    a. Traverse each diagonal originating from the top-left to bottom-right of the grid (i.e., cells where the sum of their row and column indices is constant).\n    b. Move each non-background number that is on the main diagonal to the corresponding cell along the antidiagonal of the grid (i.e., a cell at position (i, j) is moved to (j, i)). If multiple numbers from different diagonals fall on the same antidiagonal spot, they may be assigned according to the existing examples\u2019 patterns, ensuring each number only appears once per antidiagonal.\n3. The 2's and their 2x2 blocks remain fixed in their positions and are not moved or transformed.\n4. After all special numbers have been moved, fill all remaining cells not involved in the blocks or filled by moved numbers with 0.", "test_input": [[0, 0, 3, 0, 0, 8, 0, 0], [0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 7, 0, 0, 6, 0, 0], [7, 0, 0, 6, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0], [8, 0, 0, 3, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 3, 0, 0, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [7, 0, 0, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 6],\n [0, 0, 0, 6, 0, 0, 0, 0],\n [0, 0, 0, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [8, 0, 7, 0, 0, 3, 0, 0]]", "expected_output": [[0, 0, 7, 0, 0, 3, 0, 7], [0, 0, 0, 2, 2, 0, 7, 0], [0, 0, 0, 2, 2, 7, 0, 0], [0, 0, 6, 0, 7, 8, 0, 0], [8, 6, 0, 7, 0, 0, 8, 0], [6, 2, 2, 0, 0, 0, 0, 8], [0, 2, 2, 0, 0, 0, 0, 0], [3, 0, 0, 6, 0, 0, 0, 0]]}, "8618d23e": {"instruction": "1. Add a column of 9s to the right side of the input grid, making each row one cell longer.\n2. Insert a new row of 9s directly before the last original row. This new row should have the same length as the updated grid (including the new column).\n3. The last two rows of the output grid correspond to the last two rows of the original input grid, but each is shifted one row lower and has a 9 prepended at the beginning (leftmost column).\n4. All rows above the newly inserted row (including the new rightmost column) are directly taken from the input with a 9 appended to each row.", "test_input": [[1, 1, 1, 6, 1], [1, 1, 1, 1, 1], [6, 6, 6, 6, 6], [6, 1, 6, 6, 6]], "predicted_output": "[[1, 1, 1, 6, 1, 9],\n [1, 1, 1, 1, 1, 9],\n [9, 9, 9, 9, 9, 9],\n [9, 6, 6, 6, 6, 6],\n [9, 6, 1, 6, 6, 6]]", "expected_output": [[1, 1, 1, 6, 1, 9], [1, 1, 1, 1, 1, 9], [9, 9, 9, 9, 9, 9], [9, 6, 6, 6, 6, 6], [9, 6, 1, 6, 6, 6]]}, "868de0fa": {"instruction": "1. For each contiguous rectangular region entirely enclosed by a boundary of 1s (and where the boundary is at least one unit thick on all sides), fill the region with color 2.\n2. For each contiguous region of zeros that is surrounded on the left, right, top, and bottom by a continuous vertical or horizontal column/row of 1s (but not necessarily a rectangle, e.g., a vertical gap surrounded on left/right by 1s), fill that region with color 7.\n3. Leave all other grid cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],\n [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],\n [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],\n [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],\n [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],\n [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],\n [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],\n [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],\n [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],\n [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],\n [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],\n [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 7, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 7, 7, 7, 1, 0, 0, 0], [0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 7, 7, 7, 1, 0, 0, 0], [0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 2, 2, 2, 2, 2, 2, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 1, 7, 7, 7, 7, 7, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 1, 7, 7, 7, 7, 7, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 1, 7, 7, 7, 7, 7, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 1, 7, 7, 7, 7, 7, 1, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1], [0, 1, 7, 7, 7, 7, 7, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "8719f442": {"instruction": "1. Expand the original 3x3 input grid into a new 15x15 grid filled with zeros.\n2. Assign each cell (i, j) of the input grid to a distinct \"block\" of size 5x5 within the output grid, such that the block corresponding to cell (i, j) starts at row 5*i and column 5*j.\n3. For each input cell:\n    a. If the value is 0, leave the corresponding 5x5 block as zeros.\n    b. If the value is 5, fill the corresponding 5x5 block according to the following pattern:\n        - Center the original 3x3 input grid in the middle row and/or column of the block.\n        - In the central 3x3 sub-block of the 5x5 block, recreate the input grid pattern, but only showing '5' values at the relative positions matching their position in the whole input.\n        - On the center row and/or column of the block, reflect the column and row from the original input to encode spatial relationships with other nonzero entries.\n    c. Overlay direct 1:1 mapping of the original input grid's nonzero cells into the center cell of their corresponding 5x5 block.\n    d. Fill border/edge cells of the 5x5 block in accordance with adjacency to other '5's in the input\u2014if two adjacent input cells are both '5', add a solid row or column of '5's connecting the centers of their respective blocks.\n4. Continue this process for every cell in the input grid.", "test_input": [[0, 5, 0], [0, 5, 0], [5, 0, 5]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0],\n [5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 5, 5, 0, 0, 5],\n [5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5],\n [0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0],\n [5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5],\n [5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 5, 5, 0, 0, 5]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 5, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 0], [0, 5, 0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 0], [5, 0, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0, 5], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0]]}, "8731374e": {"instruction": "1. Identify the contiguous central block of columns that are filled predominantly with the same number\u2014in this case, the number 8. This block should be wide enough to capture the main \"rectangle\" of 8's that spans most rows in the middle of the grid.\n2. Extract this central block of columns for the height of all rows that contain it. Determine the vertical extent so that it forms a filled rectangle with as many rows as possible (where the block is always filled with 8).\n3. From each extracted row, examine a single consistent (usually the first non-8) column within this block\u2014typically the 4th column of the cropped area\u2014and replace its value with a new, distinct value. This value is 2 in the example outputs.\n4. For all other positions in the extracted rectangle, fill them with the predominant number (8).\n5. The output grid will be this new rectangle, featuring 8\u2019s everywhere except for a single column in which each cell is set to 2.", "test_input": [[2, 7, 2, 0, 2, 6, 3, 0, 3, 9, 1, 3, 5, 3, 0, 4, 5], [4, 4, 8, 7, 0, 7, 9, 1, 4, 9, 5, 2, 0, 8, 5, 3, 2], [8, 7, 9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 6, 1, 5, 2, 1], [6, 9, 3, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 1, 3, 6], [0, 2, 9, 8, 8, 8, 8, 8, 8, 1, 8, 9, 5, 1, 9, 4, 1], [5, 2, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 6, 7, 9, 5], [8, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 1, 7, 3, 7], [8, 6, 2, 8, 8, 1, 8, 8, 8, 8, 8, 6, 3, 1, 1, 2, 9], [9, 4, 0, 8, 8, 8, 8, 8, 8, 8, 8, 6, 4, 0, 6, 7, 6], [6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 4, 7, 1, 5, 8, 4], [4, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 4, 2, 4, 3, 4, 5], [3, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 4, 8, 7, 7, 1, 8], [6, 6, 4, 7, 6, 8, 1, 8, 1, 9, 2, 6, 8, 7, 2, 8, 8], [7, 3, 5, 1, 4, 1, 6, 4, 9, 6, 7, 7, 9, 2, 3, 0, 2], [9, 2, 2, 5, 4, 8, 3, 9, 9, 9, 5, 9, 6, 1, 4, 6, 9], [6, 1, 9, 6, 3, 1, 6, 6, 8, 6, 0, 1, 3, 4, 8, 7, 7], [2, 1, 2, 4, 9, 2, 1, 5, 1, 7, 0, 7, 9, 3, 8, 2, 1], [7, 1, 9, 4, 2, 8, 4, 3, 6, 2, 8, 0, 8, 5, 3, 5, 9], [1, 2, 5, 7, 8, 7, 1, 6, 5, 8, 0, 9, 2, 8, 9, 1, 5]], "predicted_output": "[[8, 8, 8, 2, 8, 8, 8, 8, 8],\n [8, 8, 8, 2, 8, 8, 8, 8, 8],\n [8, 8, 8, 2, 8, 8, 8, 8, 8],\n [8, 8, 8, 2, 8, 8, 8, 8, 8],\n [8, 8, 8, 2, 8, 8, 8, 8, 8],\n [8, 8, 8, 2, 8, 8, 8, 8, 8],\n [8, 8, 8, 2, 8, 8, 8, 8, 8],\n [8, 8, 8, 2, 8, 8, 8, 8, 8],\n [8, 8, 8, 2, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 1, 8, 8, 8, 1, 8], [8, 8, 1, 8, 8, 8, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 1, 8, 8, 8, 1, 8], [8, 8, 1, 8, 8, 8, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 1, 8, 8, 8, 1, 8], [8, 8, 1, 8, 8, 8, 1, 8], [8, 8, 1, 8, 8, 8, 1, 8], [8, 8, 1, 8, 8, 8, 1, 8]]}, "878187ab": {"instruction": "1. Remove all rows from the input grid except for the bottom 5 rows.\n2. Remove all columns from the input grid except for the leftmost 10 columns; the resulting grid will be 5 rows by 10 columns.\n3. For each cell in the 5x10 grid, transform the colors as follows:\n    - If the cell contains the value 5 in the original subgrid, change it to 4.\n    - If the cell contains the value 0 in the original subgrid, change it to 2.\n    - If the cell contains the value 7 in the original subgrid, change it to 2, except for the cells on the main diagonal of the 5x10 grid (from top-left to bottom-right, i.e., where row index equals column index), which should be changed to 4.\n4. Replace any remaining value that does not match the above mapping with 2.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 0, 7], [7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 5, 7, 7, 7, 7, 7, 7, 0, 7, 0, 7, 0, 5, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 5, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 5, 7, 7, 7], [7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7], [7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[4, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 4, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 4, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 4, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 4, 2, 2, 2, 2, 2]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 7, 7], [2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 7, 7], [2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 7, 7], [2, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 7, 7], [2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 7, 7], [2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 7, 7], [2, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 7, 7], [2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 7, 7], [2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 7, 7], [2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 7, 7], [2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 7, 7], [4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 7, 7]]}, "87ab05b8": {"instruction": "1. Replace every element in the grid with 6, except for the bottom-right 2x2 subgrid.\n2. For the bottom-right 2x2 subgrid, set any non-6 value present in that subgrid to 2; keep any existing 6 values as 6. All four cells in this 2x2 region should match: if any of them is non-6, set that cell to 2.", "test_input": [[2, 6, 8, 1], [6, 6, 6, 6], [4, 6, 9, 9], [0, 5, 6, 6]], "predicted_output": "[[6, 6, 6, 6],\n [6, 6, 6, 6],\n [6, 6, 2, 2],\n [6, 6, 2, 2]]", "expected_output": [[2, 2, 6, 6], [2, 2, 6, 6], [6, 6, 6, 6], [6, 6, 6, 6]]}, "880c1354": {"instruction": "1. Identify the color of the top left (corner) region (in this case, \"6\") and the color of the bottom left region (in this case, \"3\").\n2. Replace every occurrence of the top-left color (here \"6\") with the bottom-left color (here \"3\").\n3. Identify the color of the bottom-right region (here \"0\").\n4. Replace every occurrence of the bottom-right color (here \"0\") with the top-left color (here \"6\").\n5. Leave all other colors unchanged.", "test_input": [[6, 6, 7, 7, 7, 0, 0, 0], [6, 6, 7, 4, 4, 7, 0, 0], [6, 7, 4, 4, 4, 7, 0, 0], [7, 4, 4, 4, 4, 7, 0, 0], [4, 4, 4, 4, 4, 7, 0, 0], [7, 7, 7, 7, 4, 7, 0, 0], [3, 3, 3, 3, 7, 0, 0, 0], [3, 3, 3, 3, 7, 0, 0, 0]], "predicted_output": "[[3, 3, 7, 7, 7, 6, 6, 6],\n [3, 3, 7, 4, 4, 7, 6, 6],\n [3, 7, 4, 4, 4, 7, 6, 6],\n [7, 4, 4, 4, 4, 7, 6, 6],\n [4, 4, 4, 4, 4, 7, 6, 6],\n [7, 7, 7, 7, 4, 7, 6, 6],\n [3, 3, 3, 3, 7, 6, 6, 6],\n [3, 3, 3, 3, 7, 6, 6, 6]]", "expected_output": [[3, 3, 7, 7, 7, 6, 6, 6], [3, 3, 7, 4, 4, 7, 6, 6], [3, 7, 4, 4, 4, 7, 6, 6], [7, 4, 4, 4, 4, 7, 6, 6], [4, 4, 4, 4, 4, 7, 6, 6], [7, 7, 7, 7, 4, 7, 6, 6], [0, 0, 0, 0, 7, 6, 6, 6], [0, 0, 0, 0, 7, 6, 6, 6]]}, "88207623": {"instruction": "1. For each column in the grid, identify vertical groups of adjacent cells containing the same nonzero value (excluding the color 2 \"bar\" and background 0).\n2. For each such vertical group:\n    a. Replace all cells in that vertical group with the \"group color\" found in the corresponding row in previous examples (e.g., column groups with color 4 become groups of 5 in the first example, 8 in the second, 1 in the test), and expand the group upward and downward as needed to match the width of the original row group.\n    b. Ensure each vertical group is \"moved\" to align with the position of the connected 2-bar on its right. That is, the vertical group is positioned so that its bottom touches the row containing the 2, and has the same height as the original horizontal group (the number of horizontally contiguous nonzero cells).\n3. Once transformed, replace any single-color cell that used to be the leftmost of a horizontal group and is now at the base of a vertical group with the color of the right-most non-background cell in the same row and to the right.\n4. Repeat this entire process for every distinctly colored group in the grid (ignoring horizontal \"bar\"/\"block\" color 2 and background 0).\n5. Copy all other grid cells unchanged, including the \"bar\" (2) and background (0).", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 2, 0, 0, 8, 0], [0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 5, 5, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 4, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 2, 1, 1, 1, 1, 0, 0, 0, 4, 2, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 2, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 2, 8, 8, 8, 0], [0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 2, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 4, 2, 7, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 2, 0, 7, 0, 0, 0, 0, 3, 2, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "8886d717": {"instruction": "1. For each non-border region composed of adjacent cells with the same value, scan for any single \"8\" cell that sits next to a region (horizontally or vertically) of at least one \"2\" or \"7\". \n2. If an \"8\" is found within a contiguous region of color \"2\" or \"7\", replace that \"8\" so that it merges with the neighboring region as follows:\n    a. If the \"8\" is the lone \"8\" in a line/area of \"2\"s, replace adjacent rightward or downward \"2\"s (if any) with \"8\" to 'extend' the \"8\" so it grows into a horizontal or vertical block of adjacent \"8\"s, resulting in blocks of \"8\"s at least two cells wide/tall whenever the original \"8\" is adjacent to a block of the same value.\n    b. For horizontal adjacency, replace the cell immediately to the right with \"8\", if it is \"2\" and next to the original \"8\".\n    c. For vertical adjacency, replace the cell immediately below with \"8\", if it is \"2\" and next to the original \"8\".\n    d. Follow the same logic for regions of \"7\", growing the \"8\" where an \"8\" sits next to them, in the corresponding direction.\n3. Leave the grid borders (for example, rows/columns of \"9\" on the edges) unchanged.\n4. All other values and isolated \"8\"s which are not adjacent (in the above way) to \"2\" or \"7\" regions remain unchanged.", "test_input": [[8, 7, 2, 2, 8, 2, 2, 2, 7, 7, 7, 7, 8], [7, 7, 2, 2, 2, 8, 8, 2, 2, 7, 7, 8, 7], [7, 7, 2, 2, 2, 2, 2, 2, 8, 2, 7, 7, 7], [7, 2, 2, 2, 7, 7, 2, 8, 2, 2, 2, 2, 2], [2, 2, 8, 2, 7, 8, 7, 2, 2, 8, 2, 2, 2], [2, 2, 2, 2, 7, 7, 7, 7, 2, 2, 7, 7, 7], [2, 2, 2, 2, 2, 2, 7, 2, 2, 7, 7, 8, 7], [7, 7, 7, 7, 7, 2, 2, 2, 7, 7, 7, 7, 7], [8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 8, 8, 8], [7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], "predicted_output": "[[8, 7, 2, 2, 8, 2, 2, 2, 7, 7, 7, 7, 8],\n [7, 7, 2, 2, 2, 8, 8, 2, 2, 7, 7, 8, 7],\n [7, 7, 2, 2, 2, 2, 2, 2, 8, 2, 7, 7, 7],\n [7, 2, 2, 2, 7, 7, 2, 8, 2, 2, 2, 2, 2],\n [2, 2, 8, 2, 7, 8, 7, 2, 2, 8, 2, 2, 2],\n [2, 2, 2, 2, 7, 7, 7, 7, 2, 2, 7, 7, 7],\n [2, 2, 2, 2, 2, 2, 7, 2, 2, 7, 7, 8, 7],\n [7, 7, 7, 7, 7, 2, 2, 2, 7, 7, 7, 7, 7],\n [8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 8, 7, 8, 7, 7, 8, 7, 7, 8, 8, 8, 8],\n [7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]", "expected_output": [[8, 7, 2, 2, 2, 2, 2, 2, 7, 7, 7, 7, 8], [8, 7, 2, 2, 2, 2, 2, 2, 2, 7, 7, 8, 8], [7, 7, 2, 2, 2, 2, 2, 2, 2, 2, 7, 8, 7], [7, 2, 2, 2, 7, 7, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 7, 8, 7, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 7, 8, 7, 7, 2, 2, 7, 7, 7], [2, 2, 2, 2, 2, 2, 7, 2, 2, 7, 7, 8, 7], [7, 7, 7, 7, 7, 2, 2, 2, 7, 7, 7, 8, 7], [8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 7, 8, 7, 7, 8, 7, 7, 8, 8, 8, 8], [7, 8, 7, 8, 7, 8, 8, 8, 7, 8, 8, 8, 8], [7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 7], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]}, "88a10436": {"instruction": "1. Locate the first solid horizontal block of nonzero cells in the upper part of the grid (the pattern or shape you want to reproduce elsewhere); record its exact cell values and horizontal arrangement. This includes all contiguous nonzero horizontal lines grouped together from top to bottom, stopping before a completely empty (all-zero) line.\n2. Find the single, isolated nonzero cell (the marker) in the lower portion of the grid (e.g., the '5'). Take note of its row and column position.\n3. Place a copy of the recorded block from step 1 such that its top row aligns with the row above the marker, and its leftmost column aligns with the marker's column. Replace any existing values in those cells.\n4. Keep all other values in the grid unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0]]}, "88a62173": {"instruction": "1. Split the input grid into four non-overlapping 2x2 corner subgrids: top-left (rows 0-1, columns 0-1), top-right (rows 0-1, columns 3-4), bottom-left (rows 3-4, columns 0-1), and bottom-right (rows 3-4, columns 3-4).\n2. For each 2x2 subgrid, calculate the sum of the nonzero values.\n3. Identify which of the four 2x2 subgrids has the highest sum of its nonzero values. In case of a tie, choose the subgrid in this order of precedence: top-left, top-right, bottom-left, bottom-right.\n4. Copy the values of that 2x2 subgrid to the output grid, preserving their position and values.", "test_input": [[5, 5, 0, 5, 0], [0, 5, 0, 0, 5], [0, 0, 0, 0, 0], [5, 5, 0, 5, 5], [0, 5, 0, 0, 5]], "predicted_output": "[[5, 5],\n [0, 5]]", "expected_output": [[5, 0], [0, 5]]}, "890034e9": {"instruction": "1. Identify the largest contiguous rectangle (block) of 3's in the input grid. In this grid, this is the area from (13,1) to (19,4).\n2. For every cell in that block, replace the value 3 with value 1 in the output grid.\n3. For the remaining cells of the grid, leave all values unchanged from the input grid.", "test_input": [[0, 2, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2], [1, 1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 1], [1, 1, 1, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1], [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1, 1, 1, 1], [0, 2, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 2], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 2, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 2, 2, 1, 0, 1, 2, 2, 1, 1, 2, 0, 0, 1, 0, 1, 1, 1, 2], [1, 0, 1, 0, 1, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 1, 1, 1, 1, 1], [1, 3, 3, 3, 3, 1, 2, 0, 2, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [2, 3, 0, 0, 3, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 3, 0, 0, 3, 1, 1, 2, 0, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1], [1, 3, 0, 0, 3, 1, 2, 0, 0, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 1], [1, 3, 0, 0, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 3, 0, 0, 3, 1, 0, 2, 0, 1, 1, 1, 1, 0, 1, 1, 0, 2, 1, 1, 1], [1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1]], "predicted_output": "[[0, 2, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2],\n [1, 1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 1],\n [1, 1, 1, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1],\n [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1, 1, 1, 1],\n [0, 2, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 2],\n [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 2, 0],\n [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1],\n [1, 1, 1, 2, 2, 1, 0, 1, 2, 2, 1, 1, 2, 0, 0, 1, 0, 1, 1, 1, 2],\n [1, 0, 1, 0, 1, 0, 0, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0],\n [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1],\n [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1],\n [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0],\n [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 2, 0, 2, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1],\n [2, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n [1, 1, 0, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1],\n [1, 1, 0, 0, 1, 1, 2, 0, 0, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 1],\n [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1],\n [0, 1, 0, 0, 1, 1, 0, 2, 0, 1, 1, 1, 1, 0, 1, 1, 0, 2, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0],\n [1, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1]]", "expected_output": [[0, 2, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 2, 0, 1, 1, 1, 0, 1, 2], [1, 1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 2, 1, 1], [1, 1, 1, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 1], [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 0, 1, 1, 1, 1], [0, 2, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 3, 0, 0, 3, 0, 1, 1, 1, 2], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 3, 0, 0, 3, 1, 0, 0, 2, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 3, 0, 0, 3, 1, 0, 1, 1, 1], [1, 1, 1, 2, 2, 1, 0, 1, 2, 2, 1, 1, 3, 0, 0, 3, 0, 1, 1, 1, 2], [1, 0, 1, 0, 1, 0, 0, 2, 1, 1, 1, 0, 3, 0, 0, 3, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 3, 3, 3, 3, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 1, 1, 1, 1, 1], [1, 3, 3, 3, 3, 1, 2, 0, 2, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [2, 3, 0, 0, 3, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 3, 0, 0, 3, 1, 1, 2, 0, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1], [1, 3, 0, 0, 3, 1, 2, 0, 0, 0, 1, 2, 1, 1, 1, 2, 1, 0, 1, 0, 1], [1, 3, 0, 0, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 3, 0, 0, 3, 1, 0, 2, 0, 1, 1, 1, 1, 0, 1, 1, 0, 2, 1, 1, 1], [1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 2, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1]]}, "891232d6": {"instruction": "1. Identify the rightmost column in the input grid that contains any nonzero (non-background) value; this column will be the reference \"spine\" column for the new features.\n2. In every row, replace the value in this \"spine\" column as follows:\n    - If the value in the input at that location is 6, keep it as 6 in the output.\n    - If the value in the input at that location is 7, replace it with 6 in the output.\n    - If the value in the input at that location is 0, set it to 2 in the output.\n3. In every other column to the left of the \"spine\" column, for the same row, set the value to 0 in the output, regardless of the input.\n4. In every other column to the right of the \"spine\" column, for the same row, set the value to 0 in the output, regardless of the input.\n5. For every horizontal contiguous group (\u201cblock\u201d) of 7s in any row (minimum length 2), in the output grid, carry this block over unchanged in the same location, except if the block contains the reference \"spine\" column, in which case its value is already modified as in step 2.\n6. For every horizontal contiguous group (\u201cblock\u201d) of 7s in any row, if the block includes the spine and is at least length 3, change the 7 immediately to the left of the reference \"spine\" column to 8 in the output.\n7. For any \"L\" or \"corner\" shaped patterns of 7s at the bottom of a column of 7s (looking down the \"spine\" column), replace:\n    - The bottom-left 7 (adjacent below and left of the vertical, if present) with a 4.\n    - The bottom 7 of the vertical (if present at the base, not modified yet) with a 3.\n8. In every block of 7s to the left of the \"spine\" column that touch or intersect the \"spine\" column, check for a leftmost 7 that is immediately before a segment of 2s (vertical) and turn it into 4 in the output.\n9. For each newly created vertical segment of 2s below the row containing the 6 (if present), continue placing 2s downward until you reach the bottom of the grid or a nonzero value, and, in the first row below the 6, place a 2 instead of a 7 if present.\n10. For all detected 2s vertical segments as above, after the last 2, if there is a 7 to the right, change it to 3.\n11. All other cells not described above are set to 0 in the output.", "test_input": [[0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 0, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0], [0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 7, 7, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 7, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 7, 0, 0, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 2, 0], [0, 0, 7, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 2, 7, 0, 7, 0, 7, 4, 3, 0, 7, 0, 0, 7, 7, 7, 8, 7, 2, 0], [0, 0, 7, 0, 0, 0, 2, 0, 0, 7, 0, 8, 2, 0, 7, 7, 0, 0, 0, 0, 0, 4, 2, 3, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 7, 8, 7, 7, 2, 0, 0, 7, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 4, 2, 2, 3, 0, 7, 0, 0, 2, 7, 7, 7, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 7, 7, 7, 7, 8, 7, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0, 0, 0, 4, 2, 3, 0, 0, 0], [7, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 8, 2, 0, 0, 0, 8, 7, 7, 7, 2, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0], [0, 0, 4, 3, 0, 7, 0, 4, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [7, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 2, 7, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 7, 7, 7, 7, 0, 0, 0, 0, 7, 0, 0, 2, 0, 0, 0, 7, 0], [0, 0, 2, 0, 0, 7, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 7, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 2, 7, 7, 7, 7, 0], [0, 0, 2, 0, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 3, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 7, 0, 0, 0]]}, "896d5239": {"instruction": "1. For every cell in the grid, locate any occurrence of the number 3.\n2. For each 3 found, replace all immediately horizontally or vertically adjacent 1s (above, below, left, and right\u2014not diagonally) with 8s, but only if those 1s form a contiguous line extending from the 3. Continue outward in that direction, turning consecutive 1s into 8s, but stop at the first non-1 value or edge of the grid in each direction.\n3. Leave all other cells unchanged.", "test_input": [[0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [1, 0, 1, 3, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0], [0, 3, 0, 1, 0, 3, 1, 0, 1, 1, 0, 1, 0, 3, 1, 0, 0, 3], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 3, 0, 3, 0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 3, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0], [1, 3, 0, 0, 1, 1, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 3, 0, 0, 0, 1, 1, 3, 0, 1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 3, 0, 1, 1, 3, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 3, 1, 1, 0, 3, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 3, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1]], "predicted_output": "[[0, 0, 8, 8, 8, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0],\n [1, 0, 8, 3, 8, 8, 0, 8, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0],\n [0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0],\n [0, 3, 0, 8, 0, 3, 8, 0, 1, 1, 0, 1, 0, 3, 8, 0, 0, 3],\n [0, 8, 8, 0, 8, 0, 8, 0, 0, 8, 8, 8, 8, 0, 3, 0, 3, 0],\n [0, 8, 8, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 8, 3, 8, 0],\n [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0],\n [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0],\n [1, 3, 0, 0, 1, 1, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 3, 0, 0, 0, 1, 1, 3, 0, 1, 1, 0, 1, 0, 0, 1, 0],\n [0, 0, 0, 3, 0, 1, 1, 3, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0],\n [0, 0, 3, 8, 8, 0, 3, 0, 0, 8, 0, 1, 0, 1, 1, 0, 0, 0],\n [0, 8, 8, 0, 0, 1, 1, 3, 8, 0, 1, 1, 1, 1, 1, 0, 1, 0],\n [8, 8, 8, 8, 8, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 1, 0, 1]]", "expected_output": [[0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [1, 0, 1, 3, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0], [0, 3, 8, 8, 8, 3, 1, 0, 1, 1, 0, 1, 0, 3, 8, 8, 8, 3], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 3, 8, 3, 0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 3, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0], [1, 3, 0, 0, 1, 1, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 0, 0, 0, 1, 1, 3, 8, 1, 1, 0, 1, 0, 0, 1, 0], [0, 8, 8, 3, 0, 1, 1, 3, 8, 8, 0, 0, 1, 1, 1, 0, 1, 0], [0, 8, 3, 1, 1, 0, 3, 8, 8, 8, 0, 1, 0, 1, 1, 0, 0, 0], [0, 8, 1, 0, 0, 1, 1, 3, 8, 8, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1, 0, 8, 8, 0, 0, 0, 0, 0, 1, 0, 1]]}, "8a004b2b": {"instruction": "1. Identify the rectangular region of nonzero color blocks (excluding 0) that appears in the upper part of the grid. This region consists of two adjacent rectangles: one filled with 8s, the other with 3s.\n2. Similarly, identify any additional rectangular groupings of contiguous nonzero blocks in the lower area (if any), such as small patterns of 8s, 3s, and 1s.\n3. Find all rows and columns that are completely empty (contain only 0s) except for the first and last rows and columns that may contain corner or border color blocks (such as 4s).\n4. Crop the grid so that only the minimal bounding rectangle containing all nonzero color blocks of interest remains. Preserve border/corner color blocks (such as 4s) if present at the new borders.\n5. Shift and combine the nonzero regions toward the center as they were in the output examples:\n    - Arrange the large rectangles of 8s and 3s in the upper region side by side, keeping their original relative order and dimensions.\n    - Place any additional distinct color block groupings (e.g., 1s from the lower right) in the appropriate central positions below the main blocks, as in the pattern of the outputs.\n    - Place 4s in the corners of the new grid, maintaining the pattern from the input corners, if present.\n6. Refill any internal gaps created by the cropping and shifting with 0s to maintain a compact, rectangular output.\n7. Ensure the output grid's size matches the size of the minimal bounding region now containing all the shifted nonzero blocks, plus any border/corner 4s if present.", "test_input": [[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[4, 0, 0, 0, 4],\n [0, 8, 8, 3, 3],\n [0, 8, 8, 3, 3],\n [0, 8, 8, 3, 3],\n [0, 8, 8, 3, 3],\n [0, 0, 8, 3, 0],\n [0, 1, 1, 1, 0],\n [4, 0, 1, 0, 4]]", "expected_output": [[4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4]]}, "8a371977": {"instruction": "1. Iterate through each cell of the input grid.\n2. For every cell in the grid:\n    a. If the cell contains '1', leave it unchanged.\n    b. If the cell contains '0', determine which horizontal block of contiguous zeros it belongs to on that row:\n        i. Blocks separated by '1's are considered separate groups.\n        ii. For each block in a row, determine the index (starting from the left):\n           - For rows before the first fully '1' row, and after the last fully '1' row, or between such rows: assign all zeros in a block the value '2'.\n           - For rows after every fully '1' row (i.e., in \"bands\"), alternate between writing '2' and '3' for the zero blocks, starting with '2' for the first band, '3' for the second, and so on, in the same relative positions as in previous examples. (Practically, rows between horizontal bands of all '1's are grouped, and within those bands starting from the top, alternate '2' and '3' in zero blocks; outside the bands, zeros become '2'.)\n3. Repeat this process for every row to get the output grid.", "test_input": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "predicted_output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1],\n [1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1],\n [1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1],\n [1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1],\n [1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1],\n [1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1],\n [1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]", "expected_output": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}, "8a6d367c": {"instruction": "1. Identify the prominent rectangular region in the bottom half of the input grid that is made up of mostly 9s on the edges, a large region of 7s aligned in rows and columns, and is surrounded by 8s. This is visually similar to the central \"picture frame\" found in previous examples.\n2. Extract the smallest bounding rectangle that contains the full frame of 9s, and includes inside it the contiguous 7s as well as any internal 8s (i.e., do not crop away the 8 border inside the 9s).\n3. Within this bounding rectangle, keep all non-8 values (in this test, the 9s and 7s), but retain the 8s that are inside the frame as they appear. This rectangle will form the core of your output grid.\n4. Remove any rows and columns of 8s that are completely outside this bounding rectangle, i.e., crop the input grid so that only the bounding rectangle identified above is left.\n5. Place this cropped rectangle as the center of the output grid.\n6. The output grid should have no additional space or 8-padding around, i.e., its size is just the size of the cropped, framed region.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 2, 8, 2, 2, 8, 8, 8, 1, 8, 8, 6, 8, 6, 8, 8, 4, 4, 8, 4, 8], [8, 2, 8, 2, 8, 8, 1, 1, 1, 1, 8, 8, 6, 6, 6, 8, 8, 4, 8, 4, 8], [8, 8, 2, 2, 8, 8, 1, 8, 1, 8, 8, 6, 8, 8, 6, 8, 8, 4, 4, 4, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 9, 8], [8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 9, 8], [8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8]], "predicted_output": "[[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9],\n [9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9],\n [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]", "expected_output": [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 9], [9, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 9], [9, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 9], [9, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 9], [9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [9, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 9], [9, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 9], [9, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 9], [9, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]}, "8abad3cf": {"instruction": "1. Divide the input grid into horizontal segments of contiguous rows with similar character, color, or structure changes. Identify the blocks that contain more structure or complexity; these are typically the source for your output blocks.\n2. For each identified block (typically a section of consecutive rows with a non-uniform pattern, especially rectangular or quasi-rectangular regions), extract the minimal bounding box that contains all the non-background values.\n3. For each extracted block, flatten it vertically if possible by compressing or trimming rows such that only their unique horizontal content is maintained. This usually means converting tall structures or vertically repeating patterns into a single or few representative rows, focusing on horizontal sequences.\n4. Stack all compressed/trimmed blocks horizontally, maintaining their inner structure. Place each block to the right of the previous one, in the order they appeared vertically in the input grid.\n5. If the height of the individual horizontal blocks differs, align the tops vertically, and pad shorter blocks at the bottom with background values as needed to ensure all blocks have equal height.\n6. Output the new horizontally concatenated grid, representing each compressed input block as a horizontal section.", "test_input": [[7, 7, 7, 0, 0, 0, 7, 7, 7, 4], [0, 0, 7, 0, 7, 0, 7, 9, 7, 4], [0, 0, 7, 0, 0, 0, 7, 7, 7, 4], [7, 7, 7, 7, 7, 7, 7, 0, 7, 4], [7, 7, 7, 7, 7, 0, 0, 0, 7, 7]], "predicted_output": "[[7, 7, 7, 0, 0, 0, 7, 7, 7, 4, 7, 0, 7, 4],\n [0, 0, 7, 0, 7, 0, 7, 9, 7, 4, 7, 0, 7, 4],\n [0, 0, 7, 0, 0, 0, 7, 7, 7, 4, 7, 0, 7, 4],\n [7, 7, 7, 7, 7, 7, 7, 0, 7, 4, 0, 0, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 0, 0, 0], [7, 7, 4, 4, 7, 0, 0, 0, 0], [9, 7, 4, 4, 7, 0, 0, 0, 0]]}, "8b28cd80": {"instruction": "1. Identify the single nonzero cell in the input grid and note its value (let\u2019s call it N) and its position (row r, column c).\n2. Create a new 9x9 output grid, initialized with zeros.\n3. For every cell (i, j) in the 9x9 grid:\n    a. If (i mod 2 == 0) and (j mod 2 == 0), set output[i][j] = N.\n    b. Otherwise, leave output[i][j] as zero.\n4. To form the correct pattern, fill additional cells with N according to the position (r, c) of the original nonzero value:\n    a. For each diagonal parallel to the top-left to bottom-right, starting from the row and column corresponding to (2 * r, 2 * c) in the output, extend a \u201cblock\u201d of N values outward, matching the arrangements seen in previous outputs. Specifically, the diagonals and blocks come from the unique structure implied by the starting position.\n    b. Use the location of N in the input to determine which diagonals and which rows/columns receive continuous runs or single placements of N, as demonstrated in the sample transformations.\n5. Replicate any solid rows or columns of N seen in the corresponding sample with the same input placement (bottom-left in this case), adjusting to match the output style.", "test_input": [[0, 0, 0], [0, 0, 0], [3, 0, 0]], "predicted_output": "[[3, 0, 3, 0, 3, 0, 3, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 0, 3, 0, 3, 0, 3, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 0, 3, 0, 3, 0, 3, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 0, 3, 0, 3, 0, 3, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 3, 3, 3]]", "expected_output": [[3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 0, 3], [0, 0, 0, 0, 0, 0, 3, 0, 3], [3, 3, 3, 3, 3, 0, 3, 0, 3], [0, 0, 0, 0, 3, 0, 3, 0, 3], [3, 3, 3, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 0, 3, 0, 3]]}, "8ba14f53": {"instruction": "1. Divide the input grid into three equal-sized vertical sections (left, center, right), each section containing three columns.\n2. For each of the three sections, extract only the first three rows.\n3. From each of the three sections, create a 3x1 column by taking the first element from each of the top three rows in that section (i.e., take the first column of the first three rows from each section).\n4. Form a new 3x3 grid by stacking these vertical columns horizontally in the order: left section, center section, right section.\n5. The resulting grid is the output grid.", "test_input": [[4, 4, 4, 0, 0, 0, 7, 7, 7], [4, 0, 4, 4, 4, 0, 7, 0, 7], [4, 0, 0, 0, 4, 0, 7, 7, 7], [4, 4, 4, 4, 4, 0, 0, 0, 0]], "predicted_output": "[[4, 0, 7],\n [4, 4, 7],\n [4, 0, 7]]", "expected_output": [[4, 4, 4], [4, 0, 0], [7, 0, 0]]}, "8be77c9e": {"instruction": "1. Take the original input grid, which has N rows.\n2. Copy the entire grid as-is to the output grid.\n3. Append the rows of the input grid in reverse order to the bottom of the output grid (i.e., the last row of the input grid is appended first, followed by the next-to-last, and so on, until the first row is appended last).", "test_input": [[0, 0, 0], [0, 0, 1], [1, 0, 0]], "predicted_output": "[[0, 0, 0],\n [0, 0, 1],\n [1, 0, 0],\n [1, 0, 0],\n [0, 0, 1],\n [0, 0, 0]]", "expected_output": [[0, 0, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [0, 0, 1], [0, 0, 0]]}, "8cb8642d": {"instruction": "1. Identify each contiguous rectangular region (or bounded area) of nonzero color in the input grid.\n2. For each such region, find the single cell that is uniquely colored and different from the border color of the rectangle. (This is the \"seed\" cell inside the area, e.g., the '6', '1', or '4' in the sample inputs.)\n3. Starting from that uniquely colored cell, generate a symmetric \"X\" pattern (diagonals) within the region: \n    a. Replace every cell along both diagonals passing through the special cell, extending outward until the edge of the colored region, with the value of the special cell.\n    b. For steps along the diagonal, ensure that only cells inside the colored region are changed; do not overwrite border cells or the exterior.\n    c. All non-border, non-special cells inside the region but not on the diagonals should be set to 0.\n4. Leave border cells of the colored region unchanged.\n5. Repeat this process for all nonzero colored blocks/regions in the grid.\n6. Do not alter any grid areas that are all zeros.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 8, 6, 8, 8, 8, 8, 8, 8, 8, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 3, 1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 3, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 6, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 3, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 3, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 3, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 3, 0, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 6, 8, 0], [0, 3, 0, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 6, 0, 0, 0, 6, 0, 8, 0], [0, 3, 1, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 6, 0, 6, 0, 0, 8, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 8, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 8, 0, 0, 0, 6, 0, 0, 0, 8, 0], [0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 4, 2, 0, 8, 0, 0, 0, 6, 0, 0, 0, 8, 0], [0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 4, 0, 2, 0, 8, 0, 0, 0, 6, 0, 0, 0, 8, 0], [0, 0, 0, 2, 0, 0, 4, 0, 0, 4, 0, 0, 2, 0, 8, 0, 0, 6, 0, 6, 0, 0, 8, 0], [0, 0, 0, 2, 0, 0, 0, 4, 4, 0, 0, 0, 2, 0, 8, 0, 6, 0, 0, 0, 6, 0, 8, 0], [0, 0, 0, 2, 0, 0, 0, 4, 4, 0, 0, 0, 2, 0, 8, 6, 0, 0, 0, 0, 0, 6, 8, 0], [0, 0, 0, 2, 0, 0, 4, 0, 0, 4, 0, 0, 2, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "8d5021e8": {"instruction": "1. Take the input grid and repeat the following process for each cell in the input:\n    a. For each cell in the input grid, replace it with a 3x3 block in the output grid with the same relative placement as in the input (i.e., output is 3x the height and 3x the width of the input, tiled in the same arrangement).\n2. For a cell in the input with value N (N \u2260 0):  \n    a. The corresponding 3x3 output block will be filled in this pattern:\n       - The center cell and directly adjacent horizontal and vertical neighbors (forming a cross or plus sign) are filled with value N.\n       - All other cells (corners) of the 3x3 block are filled with 0.\n   For a cell in the input with value 0:\n    b. The corresponding 3x3 output block is filled entirely with 0s.\n3. Assemble the 3x3 blocks for each input cell side-by-side and top-to-bottom to form the final output grid.", "test_input": [[3, 3], [3, 0], [3, 3]], "predicted_output": "[[3, 0, 3, 3, 0, 3],\n [0, 3, 0, 0, 3, 0],\n [3, 0, 3, 3, 0, 3],\n [3, 0, 3, 0, 0, 0],\n [0, 3, 0, 0, 0, 0],\n [3, 0, 3, 0, 0, 0],\n [3, 0, 3, 3, 0, 3],\n [0, 3, 0, 0, 3, 0],\n [3, 0, 3, 3, 0, 3]]", "expected_output": [[3, 3, 3, 3], [0, 3, 3, 0], [3, 3, 3, 3], [3, 3, 3, 3], [0, 3, 3, 0], [3, 3, 3, 3], [3, 3, 3, 3], [0, 3, 3, 0], [3, 3, 3, 3]]}, "8d510a79": {"instruction": "1. Identify all rows in the grid that appear above the first row that consists entirely of the value 5. For these rows:\n    a. For each cell in these rows, if the cell contains a 2, copy that 2 down into every cell directly below it in the same column, stopping at the row just above the all-5s row.\n    b. For each cell in these rows, if the cell contains a 1, copy that 1 down into every cell directly below it in the same column, stopping at the row just above the all-5s row.\n2. Identify all rows in the grid that appear below the first row that consists entirely of the value 5. For these rows:\n    a. For each column, if any cell above the all-5s row in that same column contains a 2, copy a 2 into the same column in every row below the 5s, until encountering a nonzero value or the end of the grid.\n    b. For each column, if any cell above the all-5s row in that same column contains a 1, copy a 1 into the same column in every row below the 5s, until encountering a nonzero value or the end of the grid.\n3. Preserve all 5s rows and any other already-existing nonzero values, except where overwritten by step 1 or 2.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 1, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 2, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]], "predicted_output": "[[0, 2, 0, 1, 0, 0, 1, 0, 2, 0],\n [0, 2, 0, 1, 0, 0, 1, 0, 2, 0],\n [0, 2, 0, 1, 0, 0, 1, 0, 2, 0],\n [0, 2, 0, 1, 0, 0, 1, 0, 2, 0],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [0, 2, 0, 1, 0, 0, 1, 0, 2, 0],\n [0, 2, 0, 1, 0, 0, 1, 0, 2, 0],\n [0, 2, 1, 1, 0, 2, 1, 0, 2, 0],\n [2, 2, 0, 1, 0, 2, 1, 0, 2, 0],\n [0, 2, 0, 1, 0, 2, 1, 0, 1, 0]]", "expected_output": [[0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 2, 0, 1, 0, 0, 1, 0, 2, 0], [0, 2, 0, 0, 0, 0, 1, 0, 2, 0], [0, 2, 0, 0, 0, 0, 0, 0, 2, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [2, 0, 1, 0, 0, 2, 0, 0, 0, 0], [2, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0]]}, "8dab14c2": {"instruction": "1. For each row, locate any contiguous group of '1's (not separated by '8's).\n2. If a contiguous group of '1's has more than one group within a row (i.e., separated by '8's), leave it unchanged.\n3. If all '1's in a row form a single contiguous group and the group does not touch the left or right edge of the grid, check its width:\n    a. If the group is longer than 3, set the last cell (rightmost '1' in the group) to '8'.\n    b. If the group is exactly 3 or fewer cells wide, leave it unchanged.\n4. Repeat this process for every row of the grid.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8], [8, 8, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 8, 8],\n [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8],\n [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8],\n [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8],\n [8, 8, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8], [8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]}, "8dae5dfc": {"instruction": "1. For each non-background colored region in the input grid (i.e., each block with a uniform surround), remap the internal color values according to a fixed substitution, where all color values are replaced by their \"next\" set of values as seen paired across corresponding input/output training examples. \n    - In the left region, replace: 3\u21924, 4\u21927, 6\u21928, 1\u21928, 8\u21927, 7\u21928, 2\u21921, 5\u21923.\n    - In the right region, replace: 5\u21923, 4\u21927, 8\u21928, 1\u21928, 2\u21921, 6\u21923, 3\u21924.\n2. Keep the shapes and positions of all regions and their background values unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 6, 6, 6, 6, 6, 6, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 6, 1, 1, 1, 1, 6, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5], [0, 3, 3, 6, 1, 4, 4, 1, 6, 3, 3, 0, 0, 5, 4, 4, 4, 4, 5], [0, 3, 3, 6, 1, 1, 1, 1, 6, 3, 3, 0, 0, 5, 4, 8, 8, 4, 5], [0, 3, 3, 6, 6, 6, 6, 6, 6, 3, 3, 0, 0, 5, 4, 8, 8, 4, 5], [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 5, 4, 4, 4, 4, 5], [0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 0, 0, 0], [0, 0, 0, 6, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 6, 0, 0, 0], [0, 0, 0, 6, 8, 2, 4, 4, 4, 4, 4, 4, 4, 2, 8, 6, 0, 0, 0], [0, 0, 0, 6, 8, 2, 4, 3, 3, 3, 3, 3, 4, 2, 8, 6, 0, 0, 0], [0, 0, 0, 6, 8, 2, 4, 4, 4, 4, 4, 4, 4, 2, 8, 6, 0, 0, 0], [0, 0, 0, 6, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 6, 0, 0, 0], [0, 0, 0, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 8, 8, 8, 8, 8, 8, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 8, 8, 8, 8, 8, 8, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3],\n [0, 4, 4, 8, 8, 7, 7, 8, 8, 4, 4, 0, 0, 3, 7, 7, 7, 7, 3],\n [0, 4, 4, 8, 8, 8, 8, 8, 8, 4, 4, 0, 0, 3, 7, 8, 8, 7, 3],\n [0, 4, 4, 8, 8, 8, 8, 8, 8, 4, 4, 0, 0, 3, 7, 8, 8, 7, 3],\n [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 7, 7, 7, 7, 3],\n [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0],\n [0, 0, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 0, 0, 0],\n [0, 0, 0, 3, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 3, 0, 0, 0],\n [0, 0, 0, 3, 8, 1, 7, 7, 7, 7, 7, 7, 7, 1, 8, 3, 0, 0, 0],\n [0, 0, 0, 3, 8, 1, 7, 4, 4, 4, 4, 4, 7, 1, 8, 3, 0, 0, 0],\n [0, 0, 0, 3, 8, 1, 7, 7, 7, 7, 7, 7, 7, 1, 8, 3, 0, 0, 0],\n [0, 0, 0, 3, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 3, 0, 0, 0],\n [0, 0, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 0, 0, 0],\n [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 1, 6, 6, 6, 6, 1, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8], [0, 4, 4, 1, 6, 3, 3, 6, 1, 4, 4, 0, 0, 8, 4, 4, 4, 4, 8], [0, 4, 4, 1, 6, 6, 6, 6, 1, 4, 4, 0, 0, 8, 4, 5, 5, 4, 8], [0, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 0, 0, 8, 4, 5, 5, 4, 8], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 4, 4, 4, 4, 8], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 0, 0, 0], [0, 0, 0, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 3, 0, 0, 0], [0, 0, 0, 3, 4, 2, 8, 8, 8, 8, 8, 8, 8, 2, 4, 3, 0, 0, 0], [0, 0, 0, 3, 4, 2, 8, 6, 6, 6, 6, 6, 8, 2, 4, 3, 0, 0, 0], [0, 0, 0, 3, 4, 2, 8, 8, 8, 8, 8, 8, 8, 2, 4, 3, 0, 0, 0], [0, 0, 0, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 3, 0, 0, 0], [0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0]]}, "8e1813be": {"instruction": "1. Identify all nonzero horizontal contiguous segments (without gaps) that are at least 2 cells long and are isolated from other nonzero segments by at least one row or column of zeros.\n2. For each such segment, extract only the contiguous nonzero portion (remove all leading and trailing zeros in that row).\n3. For segments that are surrounded vertically (above and below) by at least one row of all zeros (or by grid boundaries), keep the segment.\n4. Stack the extracted horizontal segments vertically in the order they appear from top to bottom in the input grid to create the output grid. Each extracted segment becomes one row in the output.", "test_input": [[2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 0, 5, 5, 5, 5, 5, 5, 5, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 0, 5, 5, 5, 5, 5, 5, 5, 0, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[2, 2, 2, 2, 2, 2, 2],\n [5, 5, 5, 5, 5, 5, 5],\n [3, 3, 3, 3, 3, 3, 3],\n [8, 8, 8, 8, 8, 8, 8],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 8, 8], [4, 4, 4, 4, 4, 4, 4], [6, 6, 6, 6, 6, 6, 6], [1, 1, 1, 1, 1, 1, 1], [7, 7, 7, 7, 7, 7, 7]]}, "8e2edd66": {"instruction": "1. Create a new grid that is 3 times larger in both width and height than the input grid. If the input grid is size N x N, the new grid will be size (3N) x (3N). Fill the new grid with 0s.\n2. For each cell (i, j) in the input grid:\n    a. For each non-zero value in cell (i, j), place that value at all positions (3i + di, 3j + dj) within the corresponding 3x3 subgrid, where (di, dj) takes the values (0,0), (0,2), (2,0), and (2,2). That is, fill the corners of the 3x3 subgrid corresponding to (i, j) with the value if it is non-zero.\n3. The result is the output grid.", "test_input": [[1, 1, 0], [0, 1, 0], [1, 0, 1]], "predicted_output": "[[1, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 1, 0, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 1, 0, 1, 0, 0, 0],\n [1, 0, 1, 0, 0, 0, 1, 0, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 0, 1, 0, 0, 0, 1, 0, 1]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0]]}, "8e301a54": {"instruction": "1. Identify all non-background (non-7) cells in the original grid.\n2. Move all non-background cells down and/or to the right such that:\n   - The lowest group of vertically stacked non-background cells (the column of 5's on the left) is now at the bottom right corner (rows 7-9, column 9).\n   - The 9's and any other non-background patterns on the right side of the grid are shifted downward so their topmost occurrence starts farther down, and their vertical arrangement and spacing relative to each other is maintained.\n   - The cluster of 2's forming a cross is shifted to the bottom, maintaining its pattern.\n3. Set all other grid cells to the background value (7).", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 2, 7, 7, 7, 7, 7], [7, 7, 7, 2, 2, 2, 7, 7, 7, 7], [7, 7, 7, 7, 2, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 9, 9, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [5, 7, 7, 7, 7, 7, 7, 7, 7, 7], [5, 7, 7, 7, 7, 7, 7, 7, 7, 7], [5, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 2, 7, 7, 7, 7],\n [7, 7, 7, 7, 2, 2, 2, 7, 7, 7],\n [7, 7, 7, 7, 7, 2, 7, 7, 7, 9],\n [7, 7, 7, 7, 7, 7, 7, 9, 9, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 5],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 5]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 2, 7, 7, 9, 9, 7], [7, 7, 7, 2, 2, 2, 7, 7, 7, 7], [7, 7, 7, 7, 2, 7, 7, 7, 7, 7], [5, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "8e5a5113": {"instruction": "1. Identify the three segments in each row:  \n   - **Left segment**: the first four elements (before the first 5).  \n   - **Middle segment**: the three elements after the first 5 and before the second 5.  \n   - **Right segment**: the three elements after the second 5.\n\n2. For each row, modify the grid so that:  \n   - The first four elements remain unchanged.  \n   - The elements in columns 4\u20136 (right after the first 5 and before the second 5) are filled as follows:  \n     - Take the elements from the left segment of **the same row**, and mirror them in reverse order to fill columns 4\u20136. (i.e., take the first three elements from columns 0\u20132 in reverse: [col 2], [col 1], [col 0]).  \n   - Keep the 5\u2019s in columns 3 and 7 unchanged.\n\n3. For columns 8\u201310 (after the second 5), fill these using the following method:  \n   - For each row, take the elements from column 2 (third element of the left segment), column 1 (second element of the left segment), and column 0 (first element of the left segment) of that row, in this order, and copy them into columns 8, 9, and 10 respectively.\n\n4. The final output grid should preserve the value of 5\u2019s as delimiters, use the original left segment, and mirror it in the middle and right segments as described.", "test_input": [[3, 3, 9, 5, 0, 0, 0, 5, 0, 0, 0], [9, 9, 9, 5, 0, 0, 0, 5, 0, 0, 0], [2, 9, 9, 5, 0, 0, 0, 5, 0, 0, 0]], "predicted_output": "[[3, 3, 9, 5, 9, 3, 3, 5, 9, 3, 3],\n [9, 9, 9, 5, 9, 9, 9, 5, 9, 9, 9],\n [2, 9, 9, 5, 9, 9, 2, 5, 9, 9, 2]]", "expected_output": [[3, 3, 9, 5, 2, 9, 3, 5, 9, 9, 2], [9, 9, 9, 5, 9, 9, 3, 5, 9, 9, 9], [2, 9, 9, 5, 9, 9, 9, 5, 9, 3, 3]]}, "8eb1be9a": {"instruction": "1. Identify all distinct pattern blocks consisting of contiguous nonzero rows in the input grid. In this case, that is a 4-row block (rows 3 to 6, using zero-based indexing), which contains the repeating pattern.  \n2. Remove all-zero rows from the top and bottom of the grid, so the pattern block becomes the new \"unit.\"  \n3. Repeat this pattern block downward to fill the grid, until the output grid matches the original grid's dimensions (by concatenating vertically, wrapping if necessary).  \n4. The newly tiled grid should cover all rows of the output grid, filling from the top in the same order as the original pattern block rows.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\n [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\n [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\n [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\n [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\n [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\n [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\n [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1]]", "expected_output": [[0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1]]}, "8ee62060": {"instruction": "1. For each row in the input grid, determine the position of the nonzero pattern block (i.e., the contiguous nonzero values).\n2. Collect all rows that contain nonzero values at the *rightmost* positions (i.e., with nonzero blocks aligned toward the right end of the row).\n3. Reverse the order of the rows in the grid.\n4. Place the rows back in the grid in the reversed order, so that the top-most row in the input becomes the bottom-most row in the output, and so forth.\n5. Ensure that the contents of each row remain unchanged; only their vertical order is swapped.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8]]", "expected_output": [[1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1]]}, "8efcae92": {"instruction": "1. Identify all contiguous rectangular regions (blocks) in the input grid which are fully surrounded by zeros or the edge of the grid. These nonzero blocks may be adjacent to other blocks or empty space but are visually distinct from padding zeros.\n2. For each such nonzero block, extract the minimal bounding box that contains all nonzero (nonzero-valued) cells within that block.\n3. Retain only the portion of the input grid within these minimal bounding boxes, discarding all zero-valued rows and columns outside.\n4. If there are multiple such nonzero blocks, select the block with the largest area (or select the first one found in the top-to-bottom, left-to-right order if multiple with the same area). \n5. Output the minimal rectangular subgrid corresponding to this selected nonzero block.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0], [0, 1, 2, 1, 1, 1, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 2, 1, 1, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 2, 1, 1, 1, 0, 0, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0], [0, 1, 1, 1, 2, 1, 0, 0, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 2, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 1, 2, 1]], "predicted_output": "[[1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1],\n [1, 2, 1, 1, 1, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1],\n [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 2, 1, 1, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1],\n [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 2, 1, 1, 1, 0, 0, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1],\n [1, 1, 1, 2, 1, 0, 0, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 2, 1]]", "expected_output": [[1, 1, 1, 1, 2, 1, 1, 2, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 2, 1, 1, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2, 1, 1], [1, 1, 2, 1, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}, "8f2ea7aa": {"instruction": "1. Identify all nonzero cells in the input grid (the shape or pattern that consists of a unique nonzero integer).\n2. For each nonzero cell at position (row, col), create a copy of the input grid and rotate it 90 degrees clockwise.\n3. Place the nonzero cell from the original position (row, col) into its new position after rotation: new_row = col, new_col = (N - 1) - row, where N is the dimension of the grid.\n4. Repeat the rotation process a total of four times, each time rotating the previously generated grid by 90 degrees and placing the nonzero pattern accordingly.\n5. For each rotation (0\u00b0, 90\u00b0, 180\u00b0, 270\u00b0), overlay the resulting rotated pattern onto the final output grid using logical OR (i.e., if any rotation has a nonzero value at a position, that value appears in the output).\n6. The final output grid will contain the union of the original shape and its 3 further 90-degree rotated copies, filling the corresponding positions.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 2, 0, 0, 2, 0, 0, 0],\n [0, 2, 2, 0, 2, 2, 2, 0, 0],\n [2, 2, 2, 0, 2, 2, 2, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 0, 2, 2, 2, 0, 0],\n [0, 2, 2, 0, 2, 2, 2, 0, 0],\n [2, 2, 2, 0, 2, 2, 2, 2, 0],\n [0, 0, 2, 0, 0, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[2, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 0], [2, 0, 0, 2, 0, 0, 0, 0, 0], [2, 2, 0, 2, 2, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 2, 2, 0, 2, 2]]}, "8fbca751": {"instruction": "1. For each contiguous cluster of 8s in the input grid, identify the positions of the 0-valued cells that are directly horizontally or vertically adjacent (but not diagonally) to the 8s and are also immediately adjacent to an empty cell (0) in the next direction away from the cluster.\n2. Change those 0s (surrounding each cluster of 8s) to 2s so that the newly added 2s outline the 8-shaped clusters, only placing a 2 in positions where a 0 is adjacent to an 8 but is not diagonally adjacent, and only on the side(s) of the 8 cluster that are facing outward into 0-space (do not fill 2s where another 8 is on the opposite side, nor if the adjacent 0 is inside a larger 8 shape).\n3. Leave all existing non-zero, non-8 cells unchanged, and do not convert 8s or background 0s that are not adjacent to 8s.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 8, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 2, 2, 8, 2, 2],\n [0, 0, 0, 0, 0, 0, 2, 2, 8, 2, 2, 0],\n [2, 0, 0, 0, 0, 0, 2, 2, 8, 8, 8, 8],\n [8, 8, 2, 8, 8, 2, 2, 2, 2, 0, 0, 0],\n [2, 8, 2, 8, 8, 2, 8, 8, 2, 0, 0, 0],\n [0, 2, 8, 2, 8, 2, 2, 8, 2, 0, 0, 0],\n [0, 0, 2, 8, 8, 2, 2, 8, 2, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8], [8, 8, 2, 8, 8, 2, 2, 2, 0, 0, 0, 0], [2, 8, 2, 8, 8, 2, 8, 8, 0, 0, 0, 0], [2, 2, 8, 2, 8, 2, 2, 8, 0, 0, 0, 0], [2, 2, 2, 8, 8, 2, 2, 8, 0, 0, 0, 0]]}, "8fff9e47": {"instruction": "1. Create a new grid with double the height and triple the width of the input grid, filled with zeros or an arbitrary value as a placeholder.\n2. For the top-left quadrant of the output grid (occupying rows 0 to n-1 and columns 0 to 3n-1, where n is the number of input rows/columns):\n   a. For each cell (i, j) in the input grid, fill a horizontal bar of length n (equal to the number of input columns) at row i, starting at column n\\*j in the output, with the value from input[i][j]. Repeat for all cells in the first half of the input rows (upper half).\n   b. Then, for the same cells, fill a vertical bar of length n (equal to the number of input rows) at column j, starting at row n\\*i in the output, with the value from input[i][j]. Repeat for all cells in the first half of the input columns (left half).\n3. For the bottom-right quadrant of the output grid (rows n to 2n-1 and columns 3n to 6n-1):\n   a. Reflect the above process for the lower and right halves of the input grid, filling their respective bars into the lower and right quadrants of the output, maintaining the same bar-filling methodology.\n4. Once the horizontal and vertical bars representing each input value are filled into their new positions, ensure the four quadrants are seamlessly joined.\n5. Any previously remaining placeholder values in the output grid should be filled appropriately to match the pattern of mirrored bars from the input.", "test_input": [[6, 9, 7, 5], [5, 8, 8, 7], [0, 1, 2, 6], [8, 7, 4, 3]], "predicted_output": "[[6, 6, 6, 9, 9, 9, 7, 7, 7, 5, 5, 5],\n [5, 5, 5, 8, 8, 8, 8, 8, 8, 7, 7, 7],\n [0, 0, 0, 1, 1, 1, 2, 2, 2, 6, 6, 6],\n [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]]", "expected_output": [[2, 2, 2, 2, 6, 6, 6, 6], [2, 0, 0, 0, 1, 1, 1, 6], [2, 0, 7, 7, 5, 5, 1, 6], [2, 0, 7, 6, 9, 5, 1, 6], [4, 8, 8, 5, 8, 7, 7, 3], [4, 8, 8, 8, 7, 7, 7, 3], [4, 8, 8, 8, 7, 7, 7, 3], [4, 4, 4, 4, 3, 3, 3, 3]]}, "902510d5": {"instruction": "1. For every cell in the grid, remove all numbers except for the ones that form a specific diagonal or triangle pattern in the lower left corner of the grid. All other nonzero numbers are set to zero.\n2. Specifically, starting from the bottom left corner, fill a triangle (of 3s in this case) where the first row has one 3 in the leftmost cell, the row above has two consecutive 3s starting from the first column, the next row has three consecutive 3s starting from the first column, and continue this pattern upwards and rightwards, increasing by one 3 per row, such that row i from the bottom (counting from 0) has (i+1) 3s, all starting from the leftmost column.\n3. Set all cells outside of this lower left triangle to zero, except for any numbers in the diagonal or triangle pattern that is being preserved (such as the numbers running diagonally, e.g. when there are other colored numbers in a similar diagonal/triangle in other examples). In your given example, preserve only the lower left triangle of 3s, setting all other entries to zero.", "test_input": [[0, 4, 0, 7, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4], [0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "90347967": {"instruction": "1. Identify the smallest rectangle that contains all non-zero elements in the input grid. This is the \"active block.\"  \n2. Rotate the active block 90 degrees clockwise.\n3. Place the rotated block back into an otherwise zero grid of the same size as the original input, such that the original bottom-left corner of the block aligns with the new bottom-right corner after rotation.\n4. Fill all spaces outside the active block with zeros.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 5, 0, 0, 0, 0], [0, 3, 3, 2, 0, 0, 0, 0, 0], [0, 3, 2, 2, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 3, 8, 0, 0, 0, 0, 0],\n [0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 2, 2, 3, 0], [0, 0, 0, 0, 0, 2, 3, 3, 0], [0, 0, 0, 0, 5, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "90c28cc7": {"instruction": "1. Identify and extract all the contiguous, nonzero rectangular color blocks in the grid, ignoring the zero-value (background) regions. Each color block is bordered by zeros or the edge of the grid.\n2. For each row group of color blocks (each horizontal \u201cband\u201d), look for contiguous blocks on the same row band and note their color (the value in the block). Only recognize distinct blocks separated by other color values or by zeros.\n3. For all row bands that contain nonzero blocks (ignoring any pure zero regions above or below), group the blocks by band. Each output row will correspond to one of these distinct bands.\n4. For each group/band, extract the sequence of unique contiguous color blocks present on that band, in left-to-right order. For a block that repeats horizontally in a band without interruption, include its color only once per band in the output row.\n5. Assemble the output grid by listing each extracted band as a new row in a matrix, preserving their vertical order from the original input grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 0, 0], [0, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 0, 0], [0, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 0, 0], [0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 4, 1],\n [8, 3, 8],\n [2, 4, 2]]", "expected_output": [[2, 4, 1], [8, 3, 8], [2, 4, 2]]}, "90f3ed37": {"instruction": "1. For each row in the grid, check if it contains a contiguous block of '8's starting at the first nonzero cell and extending rightward with no intervening zeros until the end of the block.\n2. In each such row, if there are zero cells to the immediate right of the contiguous block of '8's (i.e., the block does not extend to the end of the row), replace all those immediate right-zero cells (from the end of the '8' block up to the end of the row) with '1's.\n3. Leave all other cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 8, 8, 1, 1, 1, 1, 1],\n [8, 8, 8, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 0, 8, 8, 1, 1, 1, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 1, 1, 1, 1, 1], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "9110e3c5": {"instruction": "1. Divide the 7x7 input grid into 9 equal 3x3 subgrids, arranged in a 3x3 layout (top-left, top-middle, top-right, middle-left, center, middle-right, bottom-left, bottom-middle, bottom-right).\n2. For each 3x3 subgrid, count the number of nonzero cells.\n3. In the output 3x3 grid, set a cell to 8 if the corresponding 3x3 subgrid in the input contains at least 5 nonzero cells; otherwise, set the cell to 0.\n4. Return the resulting 3x3 output grid.", "test_input": [[3, 0, 3, 0, 0, 0, 3], [3, 0, 9, 5, 0, 0, 5], [0, 3, 0, 3, 0, 2, 9], [8, 3, 0, 3, 0, 0, 7], [0, 3, 5, 0, 0, 3, 3], [0, 0, 3, 3, 0, 0, 0], [0, 0, 3, 0, 4, 0, 0]], "predicted_output": "[[8, 0, 0],\n [8, 8, 0],\n [0, 0, 8]]", "expected_output": [[0, 8, 8], [0, 8, 0], [0, 8, 0]]}, "913fb3ed": {"instruction": "1. For each nonzero cell in the input grid, identify whether it is a \"central\" cell (with values like 3, 2, or 8) placed in a field of zeros.\n2. For each such cell:\n    a. If the value is 3, surround it with a 3x3 block where all the edge cells (excluding the center) are set to 6 and the center cell remains 3.\n    b. If the value is 2, surround it with a 3x3 block where all the edge cells (excluding the center) are set to 1 and the center cell remains 2.\n    c. If the value is 8, surround it with a 3x3 block where all the edge cells (excluding the center) are set to 4 and the center cell remains 8.\n3. Place these 3x3 blocks at the same locations where the central cell is in the original input. If blocks overlap (i.e., edge cells would be set by more than one 3x3 block), let the later-placed block overwrite the previous, as per the input order from top to bottom.\n4. All other cells in the output remain 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 6, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],\n [0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 4, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "91413438": {"instruction": "1. Let N be the size (number of rows or columns; grids are always square) of the input grid.\n2. Create a new output grid of size N\\*N by N\\*N, filled with zeros.\n3. For each cell (i, j) in the input grid:\n    a. For k from 0 to N-1:\n        i. For l from 0 to N-1:\n            - Set the cell at (i\\*N + k, j\\*N + l) in the output grid to the value of the input cell at (k, l).\n4. The resulting grid will have its upper left (N\\*N)\u00d7(N\\*N) block filled with repeated input grid tiles, and all other positions (if any) will be zero (the construction automatically fits the entire grid).", "test_input": [[0, 0, 8], [0, 8, 0], [0, 0, 0]], "predicted_output": "[[0, 0, 8, 0, 0, 8, 0, 0, 8],\n [0, 8, 0, 0, 8, 0, 0, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 8, 0, 0, 8],\n [0, 8, 0, 0, 8, 0, 0, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 8, 0, 0, 8],\n [0, 8, 0, 0, 8, 0, 0, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "91714a58": {"instruction": "1. Replace every cell in the grid with 0 (black), except for contiguous horizontal runs of nonzero, identical numbers within a row that are at least 6 cells long.\n2. For each row, identify and preserve only the contiguous runs of length \u2265 6 that consist of the same nonzero value; set all other cells in the row to 0.\n3. The preserved runs should retain their original value and position; all other cells are 0.", "test_input": [[0, 0, 1, 7, 3, 0, 0, 0, 0, 0, 1, 2, 0, 4, 7, 0], [0, 0, 0, 3, 0, 0, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 8, 0, 1, 0, 0, 1, 0, 0, 0, 7, 0, 4, 8], [0, 3, 8, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 1, 0, 0, 8, 0, 0, 3, 8, 0, 0, 5, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 5, 0, 7], [0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 2, 7, 0, 7, 0, 0], [9, 4, 0, 2, 1, 0, 0, 0, 0, 0, 7, 0, 0, 0, 9, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5], [0, 8, 9, 4, 0, 5, 5, 5, 5, 5, 5, 3, 0, 0, 0, 0], [0, 0, 3, 0, 6, 5, 5, 5, 5, 5, 5, 0, 1, 4, 0, 0], [9, 5, 2, 0, 0, 5, 1, 3, 0, 0, 6, 2, 0, 0, 1, 5], [0, 7, 0, 0, 0, 0, 1, 6, 0, 7, 0, 3, 0, 6, 0, 0], [0, 0, 9, 0, 0, 3, 7, 7, 0, 6, 0, 0, 8, 0, 0, 0], [5, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 9]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "9172f3a0": {"instruction": "1. For each cell in the input grid, replace it with a 3x3 block where every cell in the block has the same value as the original cell.\n2. Arrange these 3x3 blocks in the same position as their original cells to form a larger grid. For instance, the 3x3 block corresponding to cell (row i, column j) of the input grid will occupy rows 3*i to 3*i+2 and columns 3*j to 3*j+2 in the output grid.", "test_input": [[0, 1, 0], [0, 0, 6], [6, 1, 0]], "predicted_output": "[[0, 0, 0, 1, 1, 1, 0, 0, 0],\n [0, 0, 0, 1, 1, 1, 0, 0, 0],\n [0, 0, 0, 1, 1, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 6],\n [0, 0, 0, 0, 0, 0, 6, 6, 6],\n [0, 0, 0, 0, 0, 0, 6, 6, 6],\n [6, 6, 6, 1, 1, 1, 0, 0, 0],\n [6, 6, 6, 1, 1, 1, 0, 0, 0],\n [6, 6, 6, 1, 1, 1, 0, 0, 0]]", "expected_output": [[0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 6], [0, 0, 0, 0, 0, 0, 6, 6, 6], [0, 0, 0, 0, 0, 0, 6, 6, 6], [6, 6, 6, 1, 1, 1, 0, 0, 0], [6, 6, 6, 1, 1, 1, 0, 0, 0], [6, 6, 6, 1, 1, 1, 0, 0, 0]]}, "941d9a10": {"instruction": "1. Identify all horizontal stripes of solid 5's that span the entire row from left to right. These act as separators between sections.\n2. For each section of rows between these solid 5 stripes (above the first stripe, between two stripes, or below the last stripe), perform the following:\n   a. For the leftmost group of consecutive columns that have at least one non-5 cell in the section (starting from the left), change all non-5 values in those columns to 1, but only in this section.\n   b. For the rightmost group of consecutive columns that have at least one non-5 cell (ending at the right), change all non-5 values in those columns to 3, but only in this section.\n   c. For the center group(s) of consecutive columns (between leftmost and rightmost), in each section, change all non-5 and non-0 values to 2. If all the values are 0, leave as 0.\n3. Leave all 5's unchanged throughout the grid.\n4. All other non-5, non-border, non-center cells remain as they are (usually 0).", "test_input": [[0, 5, 0, 5, 0, 0, 5, 0, 5, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 0, 5, 0, 0, 5, 0, 5, 0], [0, 5, 0, 5, 0, 0, 5, 0, 5, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 0, 5, 0, 0, 5, 0, 5, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 0, 5, 0, 0, 5, 0, 5, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 0, 5, 0, 0, 5, 0, 5, 0]], "predicted_output": "[[1, 5, 3, 5, 1, 1, 5, 3, 5, 3],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [1, 5, 3, 5, 1, 1, 5, 3, 5, 3],\n [1, 5, 3, 5, 1, 1, 5, 3, 5, 3],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [1, 5, 3, 5, 1, 1, 5, 3, 5, 3],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [1, 5, 3, 5, 1, 1, 5, 3, 5, 3],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [1, 5, 3, 5, 1, 1, 5, 3, 5, 3]]", "expected_output": [[1, 5, 0, 5, 0, 0, 5, 0, 5, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 0, 5, 0, 0, 5, 0, 5, 0], [0, 5, 0, 5, 0, 0, 5, 0, 5, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 0, 5, 2, 2, 5, 0, 5, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 0, 5, 0, 0, 5, 0, 5, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 5, 0, 5, 0, 0, 5, 0, 5, 3]]}, "94414823": {"instruction": "1. Identify the two nonzero numbers located outside the central \"rectangle\" of 5s (these are the new colors to be used). Let the first be the nonzero number in the left or upper region (call this color A) and the second be the nonzero number in the lower or right region (call this color B).\n2. Locate the central rectangle formed by the 5s. The rectangle is bordered by 5s on all sides, with an empty 4x2 space in the center, positioned between the inner edges of the 5s border.\n3. Fill the upper-left 2x2 area inside the rectangle with color A.\n4. Fill the lower-right 2x2 area inside the rectangle with color B.\n5. Fill the lower-left 2x2 area inside the rectangle with color B.\n6. Fill the upper-right 2x2 area inside the rectangle with color A.\n7. Leave all other grid cells unchanged, including the numbers A and B at their original outer positions.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 0, 0, 0, 0, 5, 0, 0], [0, 0, 5, 0, 0, 0, 0, 5, 0, 0], [0, 0, 5, 0, 0, 0, 0, 5, 0, 0], [0, 0, 5, 0, 0, 0, 0, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 5, 5, 5, 5, 5, 5, 0, 0],\n [0, 0, 5, 9, 9, 9, 9, 5, 0, 0],\n [0, 0, 5, 9, 9, 9, 9, 5, 0, 0],\n [0, 0, 5, 1, 1, 1, 1, 5, 0, 0],\n [0, 0, 5, 1, 1, 1, 1, 5, 0, 0],\n [0, 0, 5, 5, 5, 5, 5, 5, 0, 0],\n [0, 9, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 5, 1, 1, 9, 9, 5, 0, 0], [0, 0, 5, 1, 1, 9, 9, 5, 0, 0], [0, 0, 5, 9, 9, 1, 1, 5, 0, 0], [0, 0, 5, 9, 9, 1, 1, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 0, 0], [0, 9, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "9473c6fb": {"instruction": "1. For each cell in the grid, check if its value is 6, 9, 4, or 1.\n2. If the value is 6, replace it with 2.\n3. If the value is 9, replace it with 8.\n4. If the value is 4, replace it with 5.\n5. If the value is 1, replace it with 8.\n6. Leave all other values unchanged.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [6, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7], [7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 0, 7], [7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 6, 7, 7, 7, 0, 7, 7, 7, 6]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [2, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7],\n [7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 0, 7],\n [7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 2, 7, 7, 7, 0, 7, 7, 7, 2]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [2, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7], [7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 5, 7], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 2, 7, 7, 7, 5, 7, 7, 7, 2]]}, "94be5b80": {"instruction": "1. Identify all rows within the input grid that contain a horizontal sequence of nonzero values bordered by zeros or grid edges. In this grid, there are two such groupings: one around row 6-8, and another around row 14-16.\n2. For each such area, treat the unique non-background (nonzero) color present as a \"block\" to be isolated and moved:\n   - For the upper shape (rows 6-8), the block consists of 1s forming a small pattern.\n   - For the lower shape (rows 14-16), the block consists of a sequence of 2, 3, 1, 8, 7.\n3. Remove (set to zero) the original rows containing each detected block.\n4. Copy each detected block so that:\n   - The upper block (the pattern made of 1s) is placed lower in the grid, so that its topmost row now starts where the lowest original block started in the original grid. In this case, move the top of this block from row 6 to row 14.\n   - The lower block (the pattern made of 2, 3, 1, 8, 7) is moved up to fill the first nonzero block's original position in the grid. In this case, move the top of this block from row 14 to row 6.\n5. Keep all other values and their relative positions within each block unchanged.\n6. Fill all other positions in the grid with zeros.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 8, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 8, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 8, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 8, 7, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 8, 7, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 8, 7, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "94f9d214": {"instruction": "1. Take the top half of the input grid (the first 4 rows) and ignore the bottom half.\n2. Create a blank 4x4 grid filled with zeros.\n3. For each cell in the 4x4 area:\n    a. If the cell in the input grid contains the value 3, determine its coordinates (row, column).\n    b. In the corresponding output grid position, set the value to 2 **if and only if** the cell at the same position in the bottom half (last 4 rows) contains the value 1.\n    c. If not, leave the cell as 0.\n4. All other cells remain 0.", "test_input": [[0, 3, 0, 3], [3, 3, 3, 0], [0, 0, 0, 3], [3, 3, 3, 0], [0, 0, 1, 1], [0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 0, 0]], "predicted_output": "[[0, 0, 0, 0],\n [0, 0, 0, 0],\n [0, 0, 0, 0],\n [0, 0, 0, 0]]", "expected_output": [[2, 0, 0, 0], [0, 0, 0, 0], [2, 0, 2, 0], [0, 0, 0, 2]]}, "952a094c": {"instruction": "1. Identify the nonzero rectangular \"frame\" structure in the inner part of the grid that is surrounded by zeros and consists of a border of identical nonzero values, with other distinct nonzero values appearing within it.\n2. Remove all the nonzero values that are entirely enclosed within the frame so that only the frame remains in its original position.\n3. For each non-frame, nonzero value that was inside the frame, move it to a new position outside the frame: place each value at the same offset from the left or right edge as it had from the inner frame's left or right edge, but in either the upper or lower section outside the frame. Specifically:\n   a. The leftmost internal value moves to the lower left outside the frame, maintaining its column distance from the frame, and its row is just below the frame\u2019s bottom.\n   b. The rightmost internal value moves to the lower right outside the frame, maintaining its column distance from the frame, and its row is just below the frame\u2019s bottom.\n   c. The second leftmost internal value moves to the upper left outside the frame, maintaining its column distance from the frame, and its row is just above the frame\u2019s top.\n   d. The second rightmost internal value moves to the upper right outside the frame, maintaining its column distance from the frame, and its row is just above the frame\u2019s top.\n4. Fill all remaining cells (other than the frame and newly placed values) with 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 6, 0, 0, 4, 3, 0, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 3, 8, 0, 0, 2, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 2, 0, 0, 4, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],\n [0, 0, 3, 0, 0, 0, 0, 3, 0, 0],\n [0, 0, 3, 0, 0, 0, 0, 3, 0, 0],\n [0, 0, 3, 0, 0, 0, 0, 3, 0, 0],\n [0, 0, 3, 3, 3, 3, 3, 3, 0, 0],\n [0, 0, 8, 0, 0, 0, 6, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "9565186b": {"instruction": "1. Identify all positions in the grid that contain the value 8. If there are no 8s, identify the positions that are \"special\" (in the provided examples, these positions are neither in the top nor bottom rows and not in the leftmost nor rightmost columns, i.e., not on the edge).\n2. Replace all identified \"special\" positions with the value 5.", "test_input": [[1, 3, 2], [3, 3, 2], [1, 3, 2]], "predicted_output": "[[1, 3, 2],\n [3, 5, 2],\n [1, 3, 2]]", "expected_output": [[5, 3, 5], [3, 3, 5], [5, 3, 5]]}, "95755ff2": {"instruction": "1. Identify the border \"X\" pattern of 2s in the grid, forming a symmetric shape around the central area. The pattern divides the grid into an inner diamond-shaped region and the outer region.\n2. Identify the nonzero row at the top and bottom edge of the grid (row 0 and row 10). Extract the contiguous, nonzero segment from each: for the top row, from the first to the last nonzero value, and for the bottom row, from the first to the last nonzero value. In this example, the top row's segment is `[6, 8, 8, 1, 7]`, and the bottom row's segment is `[6, 7, 8, 9]`.\n3. Fill the empty cells (with value 0) inside the \"X\" (i.e., cells not occupied by 2s on the diamond border or by other nonzero non-border values) in each row:\n    a. For each row between the top and bottom border rows, find the positions between the corresponding 2s on each side (the \"inner region\").\n    b. For each row index i from 2 to 8 (inclusive), fill the inner region's empty cells with the corresponding element from the top row's segment at that column index, for columns covered by the diamond's horizontal span in that row. Where the original input had a nonzero value in this inner region (other than the 0s to be filled), leave it unchanged.\n    c. For row 9, use the bottom row's segment: fill the appropriate columns in row 9 (covered by the diamond's horizontal span on that row, between the 2s) with the bottom row's segment values, one per cell, where the original value is 0. Leave other values unchanged.\n4. For row 8, use the top row's segment, same as you did for rows 2 to 8.\n5. Retain all other values outside the diamond region and on the \"X\"-shaped border (2s and other nonzero values) as in the input.", "test_input": [[6, 8, 8, 1, 7, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 4, 2, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2], [0, 2, 0, 0, 4, 0, 0, 0, 4, 2, 0], [0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 6, 7, 8, 9]], "predicted_output": "[[6, 8, 8, 1, 7, 2, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0],\n [0, 0, 6, 2, 8, 0, 0, 2, 8, 0, 0],\n [0, 1, 2, 1, 7, 0, 0, 4, 2, 1, 0],\n [7, 2, 8, 1, 7, 0, 0, 0, 8, 2, 7],\n [2, 8, 8, 1, 7, 0, 0, 4, 8, 8, 2],\n [0, 2, 8, 1, 4, 0, 0, 0, 8, 2, 0],\n [0, 1, 2, 1, 7, 0, 0, 0, 2, 1, 0],\n [0, 0, 6, 2, 8, 0, 0, 2, 8, 0, 0],\n [0, 0, 0, 6, 7, 8, 9, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 0, 6, 7, 8, 9]]", "expected_output": [[6, 8, 8, 1, 7, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 7, 0, 0, 2, 0, 0, 0], [0, 0, 2, 1, 7, 0, 0, 4, 2, 0, 0], [0, 2, 8, 1, 7, 0, 0, 0, 0, 2, 0], [2, 8, 8, 1, 7, 0, 0, 4, 0, 8, 2], [0, 2, 8, 1, 4, 0, 0, 6, 4, 2, 0], [0, 0, 2, 1, 0, 0, 0, 6, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 6, 7, 8, 9]]}, "95990924": {"instruction": "1. For each 2x2 block of '5's in the input grid, identify the rectangular bounding box that fully contains the 2x2 group.\n2. For each such 2x2 block, place the following numbers in a rectangular frame around the block:\n    a. Place '1' to the immediate upper-left of the 2x2 block (i.e., one row above and one column to the left of the top-left '5' of the block), if that position is within grid bounds and not already occupied by a nonzero.\n    b. Place '2' to the immediate upper-right of the 2x2 block (i.e., one row above and one column to the right of the top-right '5'), if within bounds and not occupied.\n    c. Place '3' to the immediate lower-left of the block (one row below and one column to the left of the bottom-left '5'), if within bounds and not occupied.\n    d. Place '4' to the immediate lower-right of the block (one row below and one column to the right of the bottom-right '5'), if within bounds and not occupied.\n3. Leave all existing '5's and other nonzero entries unchanged.\n4. Leave all other positions as '0' unless overwritten in step 2.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0], [0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0],\n [0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0],\n [0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0],\n [0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0],\n [0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 5, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0],\n [0, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0],\n [0, 3, 0, 4, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0], [0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0], [0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0], [3, 0, 0, 4, 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 1, 0, 0, 2], [0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4], [0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0], [0, 0, 5, 5, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 3, 0, 0, 4, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "95a58926": {"instruction": "1. For each row in the grid:\n    a. If the row is a border row (filled entirely, except for output color cells, with a single color\u2014typically '5'):\n        - Keep the row as is, but in each 4th cell, starting from index 3 and then every fourth cell, replace the value in that cell with any non-background color that appears within that block in the input (excluding color 5).\n    b. Otherwise (for all non-border rows):\n        - Set all cells to the background color (usually 0), except in the fixed column indices (those columns that have value 5 in the border rows). In those columns, set the value to 5.\n2. Repeat the structure across the entire grid so that all blocks and rows/columns are handled this way. Any previously present \"non-structure\" colors (like 1, 2, 3, or 4) are now only inserted as described in step 1a, and elsewhere are completely cleared.", "test_input": [[0, 0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 5, 0, 0, 1, 0, 0, 5, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [1, 0, 0, 0, 1, 5, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 1, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 1], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 5, 5, 5, 5, 5, 5, 1, 5, 5, 1, 5, 5, 5], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 1, 0, 1, 0, 0, 5, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 5, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 1, 0], [0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 1, 0], [5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 1, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 5, 1, 0, 1, 0, 0, 5, 0, 0, 0], [1, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 1, 5, 5, 5, 5, 1, 1, 5, 5, 5, 5, 5, 1, 5, 5], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 1], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 1, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 0, 5, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 1, 1, 1, 5, 1, 5, 5, 5, 1, 5, 5, 5, 1, 5, 5, 5],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [5, 5, 0, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 1, 5, 5, 1, 5, 1, 1, 1, 5, 5, 5, 1, 5, 5, 5],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 1, 5, 5, 5], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0]]}, "963c33f8": {"instruction": "1. Replace all cells containing 9 or 1 in the input grid with 7.\n2. Identify the top-leftmost (smallest row and column index) 3x3 block of cells that originally contained values 9 or 1 in the input grid. Let this 3x3 region define the \"active block\".\n3. For each non-background color (i.e., color not equal to 7) that appeared in the original active block, place that color in the same relative top-to-bottom order in the first empty column immediately to the right of the active block, starting from the top of that column.\n    - Place the first encountered non-background color in that column's uppermost cell adjacent to the block, the next non-background below it, and so on.\n    - If there are less than three non-background colors, leave the rest of the new column as 7.\n4. For each remaining non-background color cell outside of the active block, check its position:\n    - If it is in a region corresponding to non-background colors in the output grids of previous examples (e.g., diagonal \u201c5\u201d regions and lower expanding shapes), retain those cells in their positions.\n    - Otherwise, leave their background as 7.\n5. The final grid should only have non-background colors (like 5) in positions matching the patterns from previous outputs (T or L shapes, diagonals, and groupings) and the \"active block\" colors transposed to a new column as described above.", "test_input": [[7, 7, 7, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 1, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 5, 5], [7, 7, 7, 5, 5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 5, 5], [7, 7, 7, 7, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 5, 5],\n [7, 7, 7, 5, 5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 5, 5],\n [7, 7, 7, 7, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 5, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 9, 7, 7, 7, 5, 5, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 1, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 5, 5], [7, 7, 7, 5, 5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 5, 5], [7, 7, 7, 7, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 9, 9, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 9, 9, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7], [7, 7, 7, 7, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "963e52fc": {"instruction": "1. Identify all rows in the input grid.\n2. For each row, concatenate it with itself to duplicate its length (i.e., repeat the sequence of elements in the row and append it to the end of the same row).\n3. Construct a new grid by applying this row-wise duplication to every row of the input grid.\n4. Ensure the resulting output grid has the same number of rows as the input grid and exactly double the number of columns.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 3, 1, 1, 3, 1, 1], [3, 1, 1, 3, 1, 1, 3, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1],\n [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "963f59bc": {"instruction": "1. Identify all connected nonzero regions (\"objects\") in the input grid, where each object is a group of touching nonzero cells (4-connected).\n2. For each color that appears as an object (other than color 0), locate every instance of a connected object of that color, and record its bounding box (the smallest rectangle containing the object).\n3. For each object: \n    a. If it is not located in the bottom sector (bottom quarter) of the grid, do not modify it.\n    b. If it is a single-colored object, identify its row offset and column offset from the top-left corner of its grid to the position within the bottom quarter where it would align with the leftmost nonzero cell of its row (while preserving its vertical and horizontal relationships within its section).\n    c. Copy the entire object shape, maintaining relative positions, into a new region in the bottom quarter of the grid, mirroring the arrangement and bounding box dimensions of the topmost section's nonzero object with the same color.\n    d. Fill this region to replicate the shape (structure/template) of the original top section object, but replace its color with the color of the current bottom quarter object.\n    e. Repeat this for any additional instances as needed for other colors, shifting position and structure as determined by the original template.\n4. The original top (non-bottom quarter) objects remain unchanged.\n5. All new color \"traced\" structures appear in the bottom quarter, matching the shape of the pattern from above but using the color present in the original bottom quarter object.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0],\n [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [6, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [6, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "96a8c0cd": {"instruction": "1. For each row in the grid, identify cells containing the value 3; consider the columns these 3s occupy as \"pillar columns.\"\n2. For each group of pillar columns that are contiguous (no gaps between their indices in that row) and belong to the same row, treat them as a single pillar group for that row.\n3. For every pillar group in every row, fill all cells immediately to the right of this pillar group with the value 2, starting from the first cell to the right of the pillar group to the end of the row, **but only stop filling when another nonzero value (1 or 3) is encountered in the same row or the grid border is reached**.\n4. For any column containing a pillar (a 3) in any row, also fill all the cells directly below the bottommost 3 in that column with 2, until a nonzero cell or the border is reached.\n5. If pillar columns are vertically aligned through several contiguous rows, treat those as a single \"vertical pillar,\" and perform step 4 for the vertical pillar base.\n6. The leftmost region before the first pillar group in each row should remain unchanged.\n7. Leave cells with existing nonzero values (1 or 3) unaltered; do not overwrite them with 2s.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2],\n [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 3, 2, 1, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [2, 0, 3, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2],\n [0, 0, 3, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2],\n [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 3, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2],\n [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 1, 0, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 3, 0, 0, 0, 2, 1, 0, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 2, 3, 2, 2, 2, 2, 1, 0, 0, 0, 0, 0, 2, 3, 0, 0, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 1, 0, 0, 1, 0, 0, 3, 0, 0, 2, 3, 0, 0, 2, 1, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 2, 2, 2, 2, 2, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]]}, "9720b24f": {"instruction": "1. For each nonzero connected shape (blob) in the grid, identify the \"inner\" region, defined as any nonzero cell that is fully enclosed by the shape but is neither on the shape's outermost layer (i.e., does not touch any zero near its direct neighbors).\n2. For each such \"inner\" region, change any nonzero color to 0. (That is, replace all nonzero values inside an enclosing boundary of the blob with 0, except for the outermost layer).\n3. Leave all other cells (including the blob's border and all background zeros) unchanged.", "test_input": [[7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [7, 0, 0, 3, 3, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 7, 7, 0, 0, 3, 3], [0, 0, 0, 3, 8, 0, 0, 7, 7, 0, 3, 3], [0, 0, 0, 3, 8, 8, 0, 0, 0, 0, 3, 3], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0], [0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 0, 0, 0, 7, 0, 0, 0], [9, 0, 6, 0, 9, 6, 0, 0, 0, 0, 0, 0], [0, 0, 6, 9, 9, 0, 6, 0, 7, 0, 0, 7], [9, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7]], "predicted_output": "[[7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0],\n [7, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0],\n [0, 0, 0, 3, 0, 0, 7, 7, 0, 0, 3, 3],\n [0, 0, 0, 3, 0, 0, 0, 7, 7, 0, 3, 3],\n [0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 3],\n [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0],\n [0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 6, 6, 0, 0, 0, 7, 0, 0, 0],\n [9, 0, 6, 0, 9, 6, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 9, 9, 0, 6, 0, 7, 0, 0, 7],\n [9, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 9, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7]]", "expected_output": [[7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0], [7, 0, 0, 3, 3, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 3], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 3], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 3], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0], [0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 0, 0, 0, 7, 0, 0, 0], [9, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 6, 0, 7, 0, 0, 7], [9, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 0, 0, 6, 0, 0, 0, 0, 0, 0, 7]]}, "97239e3d": {"instruction": "1. Identify all nonzero, non-8 numbers located in the input grid. In the test input, these are 4 and 2. For each such number, determine all positions where it occurs.\n2. For each unique nonzero, non-8 number (\"marker value\"), perform the following:\n    a. Find all grid positions containing this marker value.\n    b. For each such position, choose the appropriate \"block region\" associated with that marker. The block region is defined as the 4x4 square whose top-left corner is at the same row and column as the marker, but expanded as far left or up as possible without crossing the grid boundary or overlapping another marker's block. The block must contain the marker in a corner.\n       - If there are markers aligned in the same row or column, blocks never overlap; take the maximal block that contains only that marker in that corner.\n3. For each block (\"main block\") and its associated marker value:\n    a. Fill the entire block with the marker value.\n    b. On rows, columns, or block boundaries adjacent to these blocks (continues the block's sides), for each cell that is part of a vertical or horizontal sequence of the marker value or bordering the block, populate that cell with the marker value.\n4. For all \"internal\" grid rows and columns that are not part of any marker's main block or newly expanded block, retain the original content from the input grid.\n5. Copy all 8's and 0's from the original input grid to any location not affected by steps 2 and 3.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 4, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 4, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 2, 8, 8, 8, 0], [0, 8, 0, 8, 0, 8, 2, 8, 0, 8, 2, 8, 0, 8, 0, 8, 0], [0, 8, 8, 8, 2, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 4, 4, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0],\n [0, 4, 4, 4, 4, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0],\n [0, 4, 4, 4, 4, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0],\n [0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0],\n [0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0],\n [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 4, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0],\n [0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0],\n [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 0, 8, 8, 8, 0, 8, 8, 8, 2, 2, 2, 2, 0],\n [0, 2, 2, 2, 0, 8, 2, 8, 0, 8, 2, 8, 2, 2, 2, 2, 0],\n [0, 2, 2, 2, 2, 8, 8, 8, 0, 8, 8, 8, 2, 2, 2, 2, 0],\n [0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 8, 8, 8, 4, 8, 8, 8, 0, 8, 8, 8, 4, 8, 8, 8, 0], [0, 8, 0, 8, 4, 8, 4, 8, 0, 8, 4, 8, 4, 8, 0, 8, 0], [0, 8, 8, 8, 4, 8, 8, 8, 0, 8, 8, 8, 4, 8, 8, 8, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 8, 8, 8, 4, 8, 8, 8, 0, 8, 8, 8, 4, 8, 8, 8, 0], [0, 8, 0, 8, 4, 8, 4, 8, 0, 8, 4, 8, 4, 8, 0, 8, 0], [0, 8, 8, 8, 4, 8, 8, 8, 0, 8, 8, 8, 4, 8, 8, 8, 0], [0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0], [0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 8, 8, 8, 2, 8, 8, 8, 0, 8, 8, 8, 2, 8, 8, 8, 0], [0, 8, 0, 8, 2, 8, 2, 8, 0, 8, 2, 8, 2, 8, 0, 8, 0], [0, 8, 8, 8, 2, 8, 8, 8, 0, 8, 8, 8, 2, 8, 8, 8, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0]]}, "973e499e": {"instruction": "1. For each cell in the input grid, create a 5x5 block in the output grid that represents the value of that cell and its surroundings:\n   - The overall output grid will be of size (5 * N) x (5 * N), where N is the input grid size (here, 5x5 = 25x25 output).\n2. Place the value of the cell from the input at the central position of its 5x5 block in the output grid ((5i+2, 5j+2) where (i, j) is the cell's location in the input).\n3. In each 5x5 block:\n   - For each neighbor (up, down, left, right) that exists in the input grid, copy its value into the corresponding location adjacent to the center in the 5x5 block: \n       - Above: (5i+1, 5j+2)\n       - Below: (5i+3, 5j+2)\n       - Left:  (5i+2, 5j+1)\n       - Right: (5i+2, 5j+3)\n   - For each corner neighbor (diagonals) that exists, copy its value into the corresponding corner in the 5x5 block:\n       - Top-left:     (5i+1, 5j+1)\n       - Top-right:    (5i+1, 5j+3)\n       - Bottom-left:  (5i+3, 5j+1)\n       - Bottom-right: (5i+3, 5j+3)\n4. Fill all remaining positions in each 5x5 block with 0 (including the borders and corners unless filled with neighbor values).\n5. Each 5x5 block should thus visually represent the cell and its immediate neighborhood as in the original input grid.", "test_input": [[1, 1, 1, 1, 4], [1, 4, 4, 4, 4], [1, 4, 1, 1, 1], [2, 2, 2, 2, 1], [4, 1, 1, 2, 1]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 0],\n [0, 0, 1, 1, 0, 0, 4, 0, 4, 0, 0, 4, 0, 4, 0, 0, 1, 4, 1, 0, 0, 4, 0, 4, 0],\n [0, 0, 1, 4, 0, 0, 4, 0, 4, 0, 0, 4, 0, 4, 0, 0, 1, 4, 4, 0, 0, 4, 0, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0, 1, 1, 1, 0],\n [0, 0, 1, 4, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 1, 0, 0],\n [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 2, 0, 0, 0, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 4, 4, 4], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 4, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 4, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4], [1, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4], [1, 0, 1, 1, 1, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 4, 4, 4, 4, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 4, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 1, 4, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 4, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 4, 4, 4, 4, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 4, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 1], [4, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 2, 0, 0, 1, 1, 0, 1]]}, "9772c176": {"instruction": "1. For each contiguous horizontal band of nonzero (8) cells (\"rectangle\") in the input, identify its bounding box.\n2. For each rectangle, add a 4-colored \"frame\" (border) around its perimeter, immediately outside the outermost 8-colored edge, following these rules:\n    a. Draw a 4 in any cell that is directly adjacent (horizontally or vertically, but not diagonally) to the original band's outer edge and is currently 0.\n    b. Maintain this rule at the inner and outer rectangle regions (odd thickness, so the border is always one cell thick).\n3. Where rectangles partially overlap or are adjacent such that their frames would touch, let frames abut or adjoin without overlap (do not overwrite nonzero, non-8 values).\n4. Ensure the interior of every band remains unchanged (keep the 8s and any 0s inside the existing rectangle as they are).\n5. Copy zeros to all other cells not involved.", "test_input": [[0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 4, 4, 0, 8, 8, 8, 8, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 0, 4, 4, 0, 8, 8, 8, 8, 8, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 8, 8, 4, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 8, 8, 0, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 8, 8, 0, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 8, 8, 0, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 8, 4, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 0, 0, 0, 0, 0, 0], [4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 0, 0, 0, 0, 0], [0, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 8, 8, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0]]}, "97999447": {"instruction": "1. For each row in the input grid, identify all nonzero (colored) cells.\n2. For each nonzero cell found at position (row, col) with value X, replace all cells from col to the end of the row, following these rules:\n    a. Set the cell at (row, col) to the original value X.\n    b. For each subsequent position in the row to the right (col+1, col+2, ...), alternate between placing the value 5 and the original value X, starting with 5.\n    c. Continue this alternation pattern until reaching the end of the row.\n3. Leave rows without any nonzero cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 5, 3, 5, 3],\n [0, 0, 4, 5, 4, 5, 4, 5],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 5, 8, 5],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 5, 2, 5, 2],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 5, 3, 5, 3], [0, 0, 4, 5, 4, 5, 4, 5], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 8, 5], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 5, 2, 5, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]}, "97a05b5b": {"instruction": "1. Identify the minimal bounding rectangle that contains all non-background cells (non-zero values) in the input grid.\n2. Crop this rectangle out of the input grid.\n3. Resize the cropped rectangle to a fixed size of 9 rows by 9 columns, while preserving the structure and relative positions of the colored patterns. (For these tasks, the cropped region is always resized or mapped to a 9x9 grid.)\n4. Replace all non-background cells (except those specified in patterns, such as 3s, 4s, 8s, or 1s) with the value 2, unless another value is specified by a pattern in the original cropped region.\n5. Preserve the pattern, position, and value of distinctive colored cells (e.g., 1s, 3s, 4s, 8s) as they appear relative to the cropped structure in the original grid; maintain their identity and location as closely as possible within the new 9x9 grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0], [0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0], [0, 0, 2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 0, 0], [0, 1, 2, 1, 0, 0, 0, 0, 2, 2, 3, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 2, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 2, 0], [0, 0, 0, 4, 2, 4, 0, 0, 0, 0, 0, 8, 2, 2, 0], [0, 0, 0, 4, 2, 4, 0, 0, 0, 0, 0, 2, 2, 8, 0], [0, 0, 0, 4, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 1, 2, 3, 3, 2, 8, 8, 2],\n [2, 2, 2, 3, 2, 2, 8, 2, 2],\n [2, 1, 2, 3, 3, 2, 2, 8, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2]]", "expected_output": [[2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1], [2, 2, 8, 8, 3, 3, 2, 2, 2, 1, 2, 1], [2, 2, 2, 8, 3, 2, 2, 2, 2, 1, 1, 1], [2, 8, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 2, 2]]}, "97c75046": {"instruction": "1. Locate the single non-7, non-0 number in the input grid (call it X; in the test example, X=5). Note its position (row, column).\n2. Remove X from its original position, replacing it with a 7.\n3. Identify the diagonal line of 0s (\u201cstaircase\u201d) that starts near the top-left and extends down and to the right.\n4. Find the 0 cell on that staircase with the greatest sum of (row index + column index) \u2014 that is, the lowest/rightmost 0 in the diagonal staircase pattern.\n5. Place X in the cell immediately above this 0 cell, replacing the 7 that was previously there.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7], [7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 5, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 0, 0, 0, 0, 0, 0, 5, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7], [7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7]]}, "981add89": {"instruction": "1. For each row in the grid, identify the special columns by the pattern in the first row: locate the unique non-background values among the \"4\"s (i.e., at columns with 1, 2, 3, 8, or 9).\n2. For every other row, in each special column:\n    a. For the left group (columns related to the \"1\", \"2\", and \"3\" blocks at the top): Replace every value in that group (except for background \"4\"s) with the value that matches the top row in the same column.\n    b. For the right group (columns related to the \"9\" and \"8\" blocks at the bottom right): For each non-background value (not \"4\"), change it to match the value of the first non-background entry in its column (typically the value from the row above or to match the first block's color in the vertical stack).\n3. For all \"1\"-block rows (where \"1\" dominates left side): At column indices matching the \"4\" (background) in the first row, change all \"1\"s in those positions to \"8\".\n4. For all \"2\"-block rows: At column indices where the top row was \"4\" but in the \"2\" range, change \"2\"s in those positions to \"8\".\n5. For all \"3\"-block columns on the right (as in the earlier grid examples), in each row, replace the last \"3\" with \"4\" if there's an adjacent \"9\" block starting.\n6. For the area where the transition between blocks occurs (block boundaries), copy the color at the interface from the row/block above or below according to the pattern in the training data.\n7. For any positions where background blocks meet colored regions (changes between block types), preserve the block structure, but update the edge values to match the respective adjoining region as seen in the example outputs.", "test_input": [[4, 4, 4, 1, 4, 4, 4, 2, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4], [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[4, 4, 4, 1, 4, 4, 4, 2, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4],\n [4, 4, 4, 1, 4, 4, 4, 2, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 9, 3, 3, 3, 8, 4, 4],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 9, 3, 3, 3, 8, 4, 4],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 9, 3, 3, 3, 8, 4, 4],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 9, 3, 3, 3, 8, 4, 4],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 3, 3, 3, 3, 9, 3, 3, 3, 8, 4, 4],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4],\n [8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4],\n [8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4],\n [8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 9, 9, 9, 9, 9, 9, 4, 4, 4],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[4, 4, 4, 1, 4, 4, 4, 2, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [4, 4, 4, 1, 4, 4, 4, 2, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 3, 3, 4, 3, 3, 3, 3, 9, 3, 3, 3, 8, 3, 3], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 3, 3, 4, 3, 3, 3, 3, 9, 3, 3, 3, 8, 3, 3], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 3, 3, 4, 3, 3, 3, 3, 9, 3, 3, 3, 8, 3, 3], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 3, 3, 4, 3, 3, 3, 3, 9, 3, 3, 3, 8, 3, 3], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 3, 3, 4, 3, 3, 3, 3, 9, 3, 3, 3, 8, 3, 3], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 4, 4, 3, 4, 4, 9, 9, 4, 9, 9, 9, 8, 4, 4], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 4, 4, 3, 4, 4, 9, 9, 4, 9, 9, 9, 8, 4, 4], [1, 1, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 3, 1, 4, 4, 4, 4, 3, 4, 4, 9, 9, 4, 9, 9, 9, 8, 4, 4], [1, 1, 1, 4, 2, 2, 2, 4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 3, 4, 4, 9, 9, 4, 9, 9, 9, 8, 4, 4], [1, 1, 1, 4, 2, 2, 2, 4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 3, 4, 4, 9, 9, 4, 9, 9, 9, 8, 4, 4], [1, 1, 1, 4, 2, 2, 2, 4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 3, 4, 4, 9, 9, 4, 9, 9, 9, 8, 4, 4], [4, 4, 4, 1, 2, 2, 2, 4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [4, 4, 4, 1, 2, 2, 2, 4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [4, 4, 4, 1, 2, 2, 2, 4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [4, 4, 4, 1, 2, 2, 2, 4, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [4, 4, 4, 1, 2, 2, 2, 4, 2, 2, 2, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 9, 8, 8, 8, 4, 8, 8], [4, 4, 4, 1, 4, 4, 4, 2, 4, 4, 4, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 9, 8, 8, 8, 4, 8, 8], [4, 4, 4, 1, 4, 4, 4, 2, 4, 4, 4, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 9, 8, 8, 8, 4, 8, 8], [4, 1, 1, 4, 1, 1, 1, 2, 1, 4, 4, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 9, 8, 8, 8, 4, 8, 8], [4, 1, 1, 4, 1, 1, 1, 2, 1, 4, 4, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 9, 8, 8, 8, 4, 8, 8], [4, 1, 1, 4, 1, 1, 1, 2, 1, 4, 4, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 9, 8, 8, 8, 4, 8, 8], [4, 1, 1, 4, 1, 1, 1, 2, 1, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [4, 1, 1, 4, 1, 1, 1, 2, 1, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [4, 1, 1, 4, 1, 1, 1, 2, 1, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4], [4, 4, 4, 1, 4, 4, 4, 2, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 9, 4, 4, 4, 8, 4, 4]]}, "9841fdad": {"instruction": "1. Identify the rectangular (or box-shaped) patterns made up of non-background values in the left half of the grid (for example, any regions inside a border, or distinct blocks). For each such pattern, note its shape, position, and the value(s) it contains.\n2. Find the corresponding vertical position on the right half of the grid (mirrored horizontally) where the patterns from the left half will be copied. The overall margin from side walls in the left should match the right.\n3. For each unique pattern (such as a rectangle of 4s, 6s, or other numbers) on the left half, copy its shape, size, and color, and overwrite the corresponding location on the right half, replacing background cells there.\n4. Leave the background (the outermost border and the unchanged areas) as is.\n5. Repeat this for each distinct internal shape or rectangle on the left, until all matching patterns are replicated at the correct positions on the right half.", "test_input": [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 4, 4, 1, 1, 2, 2, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 4, 4, 1, 1, 2, 2, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 6, 6, 6, 6, 6, 6, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 6, 6, 6, 6, 6, 6, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], "predicted_output": "[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], \n [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 3], \n [3, 1, 4, 4, 1, 1, 2, 2, 1, 3, 8, 8, 1, 2, 2, 1, 1, 4, 4, 1, 3, 8, 8, 8, 8, 3], \n [3, 1, 4, 4, 1, 1, 2, 2, 1, 3, 8, 8, 1, 2, 2, 1, 1, 4, 4, 1, 3, 8, 8, 8, 8, 3], \n [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 3], \n [3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 8, 8, 8, 8, 8, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3], \n [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], \n [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3], \n [3, 1, 6, 6, 6, 6, 6, 6, 1, 3, 8, 8, 1, 6, 6, 6, 6, 6, 6, 1, 3, 8, 8, 8, 8, 3], \n [3, 1, 6, 6, 6, 6, 6, 6, 1, 3, 8, 8, 1, 6, 6, 6, 6, 6, 6, 1, 3, 8, 8, 8, 8, 3], \n [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 3], \n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]", "expected_output": [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 4, 4, 1, 1, 2, 2, 1, 3, 8, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 8, 3], [3, 1, 4, 4, 1, 1, 2, 2, 1, 3, 8, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 8, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 1, 6, 6, 6, 6, 6, 6, 1, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3], [3, 1, 6, 6, 6, 6, 6, 6, 1, 3, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 8, 3], [3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]}, "984d8a3e": {"instruction": "1. For each row in the input grid, locate three contiguous color regions from left to right: the first region contains only the \"left color\" (e.g., 5), the second region contains the \"middle color\" (e.g., 7), and the third region contains the \"right color\" (e.g., 6). These regions may vary in length from row to row.\n2. For each row, shift the entire \"middle color\" region so that it now occupies the columns previously held by the \"right color\" region. \n3. Fill the columns formerly occupied by the \"middle color\" region with the \"left color\" if there is space to the left of the original \"middle color\" region, or extend the \"right color\" into the columns left vacant at the end of the row (if the row is not fully filled by the new arrangement).\n4. Ensure the original \"left color\" region is truncated to only fill up to the start of the new \"middle color\" region.\n5. Any empty cells or cells outside the range of the original regions should remain unchanged or be filled according to the shifting described.", "test_input": [[5, 5, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6], [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6], [5, 5, 5, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5, 5, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6], [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6], [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6], [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6], [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6], [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6], [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6], [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6], [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6], [5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6], [5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6], [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6]], "predicted_output": "[[5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[5, 5, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6], [5, 5, 7, 7, 7, 7, 7, 7, 7, 5, 6, 6, 6, 6, 6, 6, 6], [5, 5, 5, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 5, 5, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6], [5, 5, 7, 7, 7, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6], [5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6], [5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6], [5, 5, 7, 7, 7, 7, 7, 7, 7, 5, 6, 6, 6, 6, 6, 6, 6], [5, 5, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6], [5, 5, 7, 7, 7, 7, 7, 7, 7, 5, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 5, 6, 6, 6, 6], [5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 6, 6, 6, 6]]}, "985ae207": {"instruction": "1. For each horizontal band (either a filled shape or its corresponding patterned area) in the input grid:\n    a. If the band consists of a solid rectangle of a single color (e.g., solid 1s, 2s, 3s, or 4s), replace it as follows:\n        - Starting from the leftmost colored cell, alternate blocks using the three relevant colors found in that row. For example, if a row uses [3, 4], alternate 3 and 4 in a recurring segment, matching original spacing.\n        - If a different color appears as a \"center\" (the middle value in a triplet pattern within a band), ensure that color replaces the center cell in each repeated sub-pattern.\n    b. If the band contains a \"checkerboard\" or repeated pattern using a trio of colors (such as [3, 4, 3] repeatedly, or [9, 1, 9]), rewrite the band to explicitly alternate this pattern all along the original filled area, matching the output schema from observed examples.\n2. For bands of the grid that don't reference a central patterned area, but are bordering filled colored regions, do the following:\n    a. If the original input band is a solid rectangle with only one color, but the output alternates between the two or three possible colors used in adjacent patterns (e.g., alternating 3 and 4), update each cell to match the repeating output pattern.\n3. For all corners and edge areas that were originally background (value 8), leave them unchanged unless the output example introduces a colored border or extension in that position.\n4. Wherever a special patterned cell (such as a different color in the center, like a \"4\" or \"1\" or \"2\" among \"9\"s) appears in either the input or output, ensure to preserve and repeat that special value in each recurring pattern in its corresponding band in the output, respecting its alternating location.\n5. If any sub-area contains a vertical or horizontal repetition according to the output examples, extend the detected local pattern so it fills the whole target area (be it a row, a band, or a block), alternating the values as observed in the output grid.\n6. Leave all other cells unchanged.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8], [8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 9, 1, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 2, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 9, 9, 9, 8, 9, 9, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 9, 3, 9, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 1, 2, 1, 2, 1, 2, 1, 2, 1, 8, 8, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 8, 8],\n [8, 1, 2, 1, 2, 1, 2, 1, 2, 1, 8, 8, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 9, 4, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 9, 1, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 9, 4, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 2, 9, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 9, 4, 9, 8, 9, 4, 9, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 9, 3, 9, 8, 8, 8, 8, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 9, 4, 9, 8, 8, 8, 8, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 3, 4, 3, 4, 3],\n [8, 3, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 1, 1, 1, 9, 9, 9, 8, 8, 9, 9, 9, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8], [8, 1, 1, 1, 1, 1, 1, 9, 1, 9, 8, 8, 9, 2, 9, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8], [8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 9, 1, 9, 8, 8, 9, 2, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 9, 9, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 9, 9, 9, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 9, 1, 9, 8, 8, 9, 2, 9, 9, 4, 9, 9, 4, 9, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 9, 9, 9, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 9, 9, 9, 8, 8, 9, 9, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 9, 1, 9, 8, 8, 9, 2, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 9, 9, 9, 8, 8, 9, 9, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 2, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 9, 3, 9, 9, 3, 9, 9, 3, 9, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 9, 9, 4, 9, 9, 4, 9, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4], [8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]}, "98c475bf": {"instruction": "1. Identify the border value used in the grid (the value forming the outer rectangle). This value, call it **B**, is the same in all four corners.\n2. Replace all non-border, non-zero values (i.e., all values inside the border that are not zero) as follows, based on the following cyclical pattern seen in the earlier transformations:\n    - If the current grid contains regions filled with the same color (other than 0 and the border B), rotate the color assignments in order: 6\u21927\u21921\u21922\u21923\u21926. That is, if the fill color in the input is X, then the new fill color Y is the next value in the above cycle.\n    - For your test, since the inside main fill color is 2, replace all occurrences of 2 (except the border) with 3.\n    - For the distinctive patterns (e.g., the \"X\" or segments made out of other colors inside the region), assign the next color in the sequence to those positions, following the same rotation.\n       - In the test input, positions with 3 (forming the diagonal/bar features) will become 6 in output.\n       - If there are other nonzero, non-border, non-fill values (like 6 in a prior output, or 1 in the next output), update them accordingly to their next value as seen in training.\n3. All other non-border and nonzero positions should remain as 0.\n4. The border (value **B**) remains unchanged in position and value.\n\n(For your test input, the result is: all interior 2\u2019s become 3\u2019s, all interior 3\u2019s become 6\u2019s, the border of 1\u2019s stays as 1, and all other values are 0.)", "test_input": [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], "predicted_output": "[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1],\n [1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]", "expected_output": [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1], [1, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1], [1, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]}, "98cf29f8": {"instruction": "1. Identify every contiguous block of nonzero values that forms a horizontal or vertical band, rectangle, or filled region in the grid.\n2. For each such region, determine if it contains nonzero values that extend significantly below its topmost row or above its bottommost row (i.e., is vertically elongated or duplicated). If so, only keep the highest contiguous block (closest to the top of the grid) for that region and remove any vertically duplicated or extended parts below it, except for parts that are horizontally larger and separate.\n3. For any region that mixes colors, preserve only the region at the highest positions and earliest columns where the color block is continuous, and remove disjoint or lower sections.\n4. Set all removed cells to 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "992798f6": {"instruction": "1. Locate the position of the cell containing '1' and the cell containing '2' in the grid.\n2. Determine the straight line path from the '1' cell to the '2' cell by moving diagonally down and to the right (increasing both the row and column indices by 1 in each step).\n3. Starting from the cell immediately below and to the right of '1', fill each cell along this diagonal with the value '3' until the cell immediately above and to the left of the '2' cell is reached (do not overwrite the '1' or '2' cells).\n4. Leave all other cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "99306f82": {"instruction": "1. Identify the innermost nonzero values on the diagonal in the top-left triangle of the grid (excluding the 1-border \"diamond\"), starting at (0,0), (1,1), (2,2), (3,3), (4,4). Let these be called \"core values,\" in order from top to bottom. In this test: [2, 3, 9, 8, 7].\n2. Find the \"diamond\" shape in the grid: it is bordered by 1's, starting at the first row with a horizontal run of 1's (row 5 for this grid), and is bounded by 1's up to the last such row (row 17).\n3. Within the interior of the diamond (excluding the border of 1's), fill in nested \"rings\" of color as follows:\n    a. The outermost ring inside the 1-border gets the first core value (2).\n    b. The next ring inside gets the second core value (3).\n    c. The next ring inside gets the third core value (9).\n    d. Continue for all core values, each ring getting one core value, until all values are placed or the diamond is filled.\n4. If you have more rings to fill (wider diamond), repeat the innermost value for all interior remaining cells.\n5. All other cells (outside the diamond or its rings) remain unchanged from the input grid.", "test_input": [[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 3, 9, 8, 8, 8, 8, 8, 8, 9, 3, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 3, 9, 8, 7, 7, 7, 7, 8, 9, 3, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 3, 9, 8, 7, 7, 7, 7, 8, 9, 3, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 3, 9, 8, 8, 8, 8, 8, 8, 9, 3, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0],\n [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 3, 9, 8, 8, 8, 8, 8, 8, 9, 3, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 3, 9, 8, 7, 7, 7, 7, 8, 9, 3, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 3, 9, 8, 7, 7, 7, 7, 8, 9, 3, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 3, 9, 8, 7, 7, 7, 7, 8, 9, 3, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 3, 9, 8, 8, 8, 8, 8, 8, 9, 3, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 3, 9, 9, 9, 9, 9, 9, 9, 9, 3, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 0], [0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "995c5fa3": {"instruction": "1. Divide the input grid into three contiguous vertical segments by detecting columns separated by vertical stripes of 0s (zeros). Each segment is 4 columns wide. There are always three such segments.\n2. For each segment, count the total number of nonzero cells (i.e., cells not equal to 0) across all 4 rows within that segment.\n3. For each segment, fill a row in the output grid with three identical values, each equal to the total nonzero count calculated for that segment.\n4. Arrange the output rows in the order of the corresponding segments from left to right.", "test_input": [[5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5], [5, 5, 5, 5, 0, 0, 5, 5, 0, 0, 5, 0, 0, 5], [5, 0, 0, 5, 0, 0, 5, 5, 0, 0, 5, 0, 0, 5], [5, 0, 0, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5]], "predicted_output": "[[16, 16, 16],\n [11, 11, 11],\n [13, 13, 13]]", "expected_output": [[4, 4, 4], [3, 3, 3], [8, 8, 8]]}, "9968a131": {"instruction": "1. For each odd-indexed row (where the row index starts at 0, so rows 1, 3, etc.), identify the non-background segment. The background is defined by the repeating value that fills most of the grid (in this case, 7).\n2. In each such odd-indexed row, shift the non-background segment (i.e., the contiguous group of non-background values) one place to the right, wrapping around so that the rightmost value of the segment appears at the start of the segment's original position.\n3. Replace any values that are displaced by the shift with the background value.", "test_input": [[7, 7, 7, 7, 7], [7, 2, 9, 7, 7], [7, 9, 2, 7, 7], [7, 2, 9, 7, 7], [7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7],\n [7, 7, 2, 9, 7],\n [7, 9, 2, 7, 7],\n [7, 7, 2, 9, 7],\n [7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7], [7, 2, 9, 7, 7], [7, 7, 9, 2, 7], [7, 2, 9, 7, 7], [7, 7, 7, 7, 7]]}, "996ec1f3": {"instruction": "1. Identify the central region of the input grid that is bounded by distinctive vertical and horizontal blocks of constant values. Specifically, locate the 3x3 block in the vertical middle of the grid where each row is composed primarily of 0's, and this region is flanked by rows/columns of nonzero values, just as seen in previous examples.\n2. Extract this 3x3 region of interest. In all examples, this region is aligned such that its center aligns with columns 9-11 and rows 9-11 (using zero-based indexing).\n3. Construct the output grid by copying these 3x3 values in order into a new grid.", "test_input": [[4, 9, 8, 5, 4, 7, 7, 7, 8, 7, 1, 6, 4, 2, 2, 9, 9, 3, 7], [7, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 4, 4, 4, 4, 4, 4, 4, 5], [4, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 4, 4, 4, 4, 4, 4, 7], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 7, 4, 4, 4, 4, 4, 4, 8], [3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 4, 4, 4, 4, 4, 4, 4, 8], [2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 1, 5, 4, 4, 4, 4, 4, 4, 9], [5, 7, 1, 2, 9, 5, 7, 6, 4, 4, 1, 6, 4, 5, 5, 6, 1, 4, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 9, 5, 7, 4, 4, 9, 4, 6, 7, 1, 5, 6, 9, 7, 9, 9, 9, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 8, 8, 8, 8, 8, 8, 9], [9, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 8, 8, 8, 8, 8, 8, 8], [4, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 8, 8, 8, 8, 8, 8, 9], [9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 4, 8, 8, 8, 8, 8, 8, 7], [9, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 6, 8, 8, 8, 8, 8, 8, 8], [9, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 9, 8, 8, 8, 8, 8, 8, 5], [7, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 2, 8, 8, 8, 8, 8, 8, 8], [7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 7, 8, 8, 8, 8, 8, 8, 9], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 9, 8, 8, 8, 8, 8, 8, 6], [7, 4, 2, 3, 2, 2, 1, 5, 4, 1, 1, 4, 4, 8, 8, 7, 8, 8, 8]], "predicted_output": "[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]", "expected_output": [[2, 1, 4], [1, 1, 1], [0, 1, 8]]}, "99b1bc43": {"instruction": "1. Split the input grid into two sections at the row that consists entirely of the value 4. The rows above this are the \"top section\" and the rows below (excluding the 4s-row) are the \"bottom section\". Each section is a subgrid of size 4x4.\n2. For each cell position (i, j) in the 4x4 top and bottom sections:\n    a. If the value at position (i, j) in the top section is nonzero (1), AND the value at position (i, j) in the bottom section is nonzero (2), set the output at (i, j) to 3.\n    b. Otherwise, set the output at (i, j) to 0.\n3. The result is a new 4x4 grid where each cell contains 3 if both corresponding input cells in the top (==1) and bottom (==2) sections are nonzero, and 0 otherwise.", "test_input": [[1, 0, 1, 1], [0, 1, 1, 1], [0, 0, 1, 0], [1, 0, 1, 1], [4, 4, 4, 4], [2, 2, 0, 2], [0, 0, 2, 0], [2, 0, 0, 2], [0, 2, 0, 2]], "predicted_output": "[[0, 0, 3, 0],\n [0, 0, 0, 0],\n [0, 0, 3, 0],\n [0, 0, 0, 3]]", "expected_output": [[0, 3, 3, 0], [0, 3, 0, 3], [3, 0, 3, 3], [3, 3, 3, 0]]}, "99caaf76": {"instruction": "1. Divide the input grid into blocks of the same size as in the examples. In the examples, these are 4x8, 3x5, or 3x13, depending on the grid. For the given test input, divide the grid into non-overlapping 3-row blocks from top to bottom and process any remaining rows according to the same pattern.\n2. For each original block, relocate it to a new position in the output grid according to the following mapping: The first group of blocks (from the top to about halfway) is moved to the right columns of the output, and the lower group of blocks is moved to the left columns of the output. Additionally, within each block, reverse the order of the rows. Thus, the top blocks become the rightmost vertically, and the lower blocks shift to the leftmost position.\n3. After repositioning all blocks, ensure that all other grid positions that are not filled by block data are set to the background value (8).", "test_input": [[1, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 3, 4, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [1, 8, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 1], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 4, 9, 1, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 8, 8, 8, 1], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [1, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 0, 4, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [1, 8, 8, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [1, 8, 8, 8, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 7, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [1, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 0, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 4, 7, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 5, 8, 8, 8, 8],\n [8, 8, 8, 8, 1, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 1, 1, 0, 4, 5, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 1, 8, 8, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8],\n [1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 1, 1, 7, 4, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [1, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 5, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 7, 4, 3], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 6, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [9, 4, 5, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 7, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 6, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 5, 4, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 9, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 4, 7], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 5, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]}, "99fa7670": {"instruction": "1. For each nonzero cell in the input grid, identify its row and column indices and its value.\n2. For each such nonzero cell, extend a horizontal segment of the same value to the right within the same row, filling all consecutive zero cells until either the edge of the grid or a nonzero cell is encountered.\n3. From the rightmost cell of the newly created horizontal segment, extend a vertical segment of the same value downward, filling all consecutive zero cells in the same column, until either the edge of the grid or a nonzero cell is encountered.", "test_input": [[0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 7, 7, 7, 7, 7, 7],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 7, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 2]]}, "9a4bb226": {"instruction": "1. Scan the input grid to identify all nonzero rectangular blocks that are distinctly separated by rows and columns of zeroes.\n2. Extract the lower right-most such block (i.e., the block located in the lowest row and, if multiple candidates, the one furthest to the right).\n3. Return this block as the output grid, preserving its internal values and arrangement.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 6, 6, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0], [0, 0, 3, 3, 3, 0, 0, 0, 1, 7, 7, 0, 0, 0, 0], [0, 0, 6, 3, 6, 0, 0, 0, 7, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 9, 4, 4, 0, 0, 0, 5, 5, 8, 0, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 2, 2]]", "expected_output": [[9, 4, 4], [4, 4, 4], [2, 2, 2]]}, "9aec4887": {"instruction": "1. Identify the two non-overlapping rectangular regions in the grid: one in the upper half containing horizontally-oriented colored blocks and the other in the lower half containing horizontally-oriented colored blocks.  \n2. Extract the first (upper) region by finding the leftmost nonzero column and the rightmost nonzero column, as well as the topmost and bottommost rows that contain nonzero values for the upper colored pattern. Crop this section as your upper block.  \n3. Extract the lower region similarly, by finding the bounds of the region containing nonzero colored values in the lower half of the grid. Crop this section as your lower block.  \n4. For both extracted blocks, rotate them 90 degrees counterclockwise so that what was previously along the horizontal now lies along the vertical, matching the orientation in the output grid.  \n5. Position the rotated upper block at the top of the new output grid.  \n6. Position the rotated lower block at the bottom of the new output grid, ensuring that the two blocks are vertically aligned with each other.  \n7. Fill any empty rows or columns at the top, bottom, or sides with zeros so that the overall output grid matches the bounding rectangle tightly around the nonzero values.", "test_input": [[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0],\n [0, 2, 2, 1, 4, 4, 0],\n [0, 2, 2, 0, 4, 4, 0],\n [0, 0, 0, 3, 0, 0, 0],\n [8, 8, 0, 0, 0, 0, 0],\n [8, 0, 8, 0, 0, 0, 0],\n [0, 8, 8, 8, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0],\n [8, 8, 0, 0, 0, 0, 0]]", "expected_output": [[0, 1, 1, 1, 1, 1, 0], [2, 8, 1, 0, 1, 8, 4], [2, 2, 0, 1, 8, 0, 4], [2, 0, 2, 8, 4, 4, 4], [2, 0, 0, 3, 0, 0, 4], [2, 8, 3, 0, 3, 8, 4], [0, 3, 3, 3, 3, 3, 0]]}, "9af7a82c": {"instruction": "1. Take the last column of the input grid and form the first row of the output grid by reversing the order of that column (from bottom to top).\n2. For each of the remaining columns, from rightmost to leftmost (excluding the last column), do the following:\n    a. Create a new row in the output grid for each such column.\n    b. For each new row, include values taken from the same column in the input grid (from bottom to top) for positions matching the column order, and set the remaining rightmost positions to 0, so that the number of nonzero entries decreases by one in each subsequent row.\n3. Continue this process until all input columns have been processed, each time reducing the number of nonzero entries per row by one and filling the rest with zeros.\n4. When all columns have been processed, append additional rows as needed, each consisting of the first value from the bottom row of the input grid followed by zeros.", "test_input": [[8, 8, 2, 2], [1, 8, 8, 2], [1, 3, 3, 4], [1, 1, 1, 1]], "predicted_output": "[[2, 2, 4, 1],\n [8, 8, 3, 0],\n [8, 3, 0, 0],\n [1, 0, 0, 0]]", "expected_output": [[1, 8, 2, 3, 4], [1, 8, 2, 3, 0], [1, 8, 2, 0, 0], [1, 8, 0, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 0]]}, "9b2a60aa": {"instruction": "1. For each nonzero number (except 2) in the top section of the input grid (specifically numbers 3, 4, 8 if present in the upper rows), identify all distinct horizontal rows that contain such numbers.\n2. For each detected number (3, 4, 8, etc.):\n    a. Within the lower part of the grid (the \"block\" that contains horizontally or vertically arranged 2's), find each group of contiguous 2's (in a line or L shape).\n    b. Overlay the detected non-2 color (e.g., for \"3\" from row 1, column 9) onto the same relative position(s) within the block of 2's below, replacing the 2's with the detected color, in a corresponding pattern.\n    c. This means: wherever the group of 2's appears in the lower section, replace the horizontal/vertical strip of 2's with the color from the top section. For each number/color (3, 4, 8), only replace the group of 2's in that \"block\" with that number for one row (if multiple such blocks exist horizontally or vertically, fill all in that pattern).\n    d. Leave 2's that are not in the full group pattern (i.e., \"partial\" groups/ends of L shapes/lines) unchanged.\n3. All other cells remain unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 8, 0, 0, 8, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 8, 0, 0, 8, 0, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0, 0, 0, 8, 0, 0, 8, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0], [3, 3, 3, 0, 0, 4, 4, 4, 0, 0, 0, 8, 8, 8, 0, 0, 8, 8, 8, 0, 2, 2, 2, 0], [3, 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "9b30e358": {"instruction": "1. Identify the first row where the grid contains colors or patterns that differ from the background color (the top color filling the majority of the grid, here it's \"7\"). This is the start of the non-background (inner) pattern.  \n2. From this row to the bottom of the grid, extract all rows as a sub-block.\n3. Repeat this sub-block sequentially from the top row downward, filling the entire grid with consecutive copies of the sub-block, until the grid reaches its original height. If the repetition overruns the grid size, truncate the last repetition as needed to fit exactly.", "test_input": [[7, 7, 7, 7, 7], [7, 7, 7, 7, 7], [7, 7, 7, 7, 7], [7, 7, 7, 7, 7], [7, 7, 7, 7, 7], [7, 7, 7, 7, 7], [7, 6, 7, 6, 7], [6, 7, 2, 7, 6], [7, 2, 6, 2, 7], [7, 6, 7, 6, 7]], "predicted_output": "[[7, 6, 7, 6, 7],\n [6, 7, 2, 7, 6],\n [7, 2, 6, 2, 7],\n [7, 6, 7, 6, 7],\n [6, 7, 2, 7, 6],\n [7, 2, 6, 2, 7],\n [7, 6, 7, 6, 7],\n [6, 7, 2, 7, 6],\n [7, 2, 6, 2, 7],\n [7, 6, 7, 6, 7]]", "expected_output": [[7, 2, 6, 2, 7], [7, 6, 7, 6, 7], [7, 6, 7, 6, 7], [6, 7, 2, 7, 6], [7, 2, 6, 2, 7], [7, 6, 7, 6, 7], [7, 6, 7, 6, 7], [6, 7, 2, 7, 6], [7, 2, 6, 2, 7], [7, 6, 7, 6, 7]]}, "9b365c51": {"instruction": "1. Identify all vertical stripes in the left half of the input grid where a single color (nonzero) is repeated in the same column across all rows with an alternating zero column between them.\n2. For each such identified vertical stripe, assign the color value to a block of output cells as follows: place a solid horizontal block of that color (with the same number of rows as in the input grid) in a new output region, left-aligned at the first empty (zero) columns, progressing from left to right in the output grid for each detected color in the input (processing stripes in their original order).\n3. When multiple distinct vertical stripes are present, stack (from top to bottom) the horizontal blocks generated in step 2 in the order corresponding to their order of stripes in the input grid.\n4. Next, identify in the input any grouped nonzero tiles (blocks entirely surrounded horizontally by zeros and made up of the same nonzero number), and place the corresponding horizontal blocks of that color into the output, aligning them to the right, stacking them in the order found.\n5. In other words, each unique color vertical stripe in the input maps to a solid horizontal block of that color in the output, ordered sequentially starting at the left but not overlapping, and each right-side horizontal grouping of another color from the input forms another set of corresponding blocks placed sequentially to the right in the output.\n6. Maintain the size and shape of these blocks as they appear in the input (i.e., number of rows and columns) but reposition them as above. Fill all other cells with zero.", "test_input": [[0, 1, 0, 3, 0, 2, 0, 4, 0, 6, 0, 7, 0, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 1, 0, 3, 0, 2, 0, 4, 0, 6, 0, 7, 0, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8], [0, 1, 0, 3, 0, 2, 0, 4, 0, 6, 0, 7, 0, 8, 8, 8, 0, 0, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8], [0, 1, 0, 3, 0, 2, 0, 4, 0, 6, 0, 7, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8], [0, 1, 0, 3, 0, 2, 0, 4, 0, 6, 0, 7, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 1, 0, 3, 0, 2, 0, 4, 0, 6, 0, 7, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0], [0, 1, 0, 3, 0, 2, 0, 4, 0, 6, 0, 7, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0]], "predicted_output": "[[1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, 6, 6, 6, 6, 6, 6, 6, 0, 7, 7, 7, 7, 7, 7, 7, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, 6, 6, 6, 6, 6, 6, 6, 0, 7, 7, 7, 7, 7, 7, 7, 0, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8],\n [1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, 6, 6, 6, 6, 6, 6, 6, 0, 7, 7, 7, 7, 7, 7, 7, 0, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8],\n [1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, 6, 6, 6, 6, 6, 6, 6, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, 6, 6, 6, 6, 6, 6, 6, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, 6, 6, 6, 6, 6, 6, 6, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 0, 6, 6, 6, 6, 6, 6, 6, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 2, 4, 4, 4, 0, 0, 0, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 2, 0, 0, 0, 6, 6, 6, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 2, 2, 0, 0, 0, 6, 6, 6, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 6, 6, 6, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0]]}, "9b4c17c4": {"instruction": "1. For each connected block of '2's in the input grid, determine if it is located in the left/top half or right/bottom half of a region separated by major background color changes (i.e., all cells in a row or column are a single background value like 1 or 8).\n2. For blocks of '2's located in the left (or top) separate region (e.g., surrounded by 1s on other sides), move the block horizontally (or vertically) as far as possible towards the leftmost (or topmost) columns (or rows), until it either reaches the boundary or is adjacent to a different region (i.e., the background color changes).\n3. For blocks of '2's located in the right (or bottom) separate region (e.g., surrounded by 8s on other sides), move the block horizontally (or vertically) as far as possible towards the rightmost (or bottommost) columns (or rows), until it either reaches the boundary or is adjacent to a different region.\n4. All other cell values remain unchanged.", "test_input": [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 2, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 2, 8, 8, 8], [8, 8, 8, 8, 2, 2, 8, 8, 8], [8, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1],\n [2, 2, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 2, 2, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1],\n [8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 2, 2, 8, 8],\n [8, 8, 8, 8, 8, 2, 2, 8, 8],\n [8, 8, 2, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 8, 8, 8, 8, 8, 8, 8], [2, 2, 8, 8, 8, 8, 8, 8, 8], [2, 2, 8, 8, 8, 8, 8, 8, 8], [2, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8]]}, "9b5080bb": {"instruction": "1. Identify every contiguous block (square or rectangle) of a single color other than the background that is fully surrounded (horizontally and vertically) by another color. For each such block, find its color (the \"inner block\") and the color that surrounds it (the \"outer block\").\n2. For each \"inner block\" found, change its color according to the following mapping: use the color from the pattern that applies for that block's size, shape, and relative position, as learned from the input-output examples. In this task, most commonly this mapping is: \n   - If the block is a single line or filled chunk that was previously of a \"main\" color, and is now more central, it should be recolored according to the central motif of the output grids.\n   - Blocks within central areas (usually the rectangular shapes, e.g., of '2's, '4's, or '3's in the examples) that were previously matching the outer block color should be recolored to match the inner block or a new color depending on prior examples (such as '2' becoming '3', or '4' becoming '2', etc.).\n3. For each region where the input grid had a change (introduction of a new rectangle, square, or line of a different color compared to its surroundings), make the same transformations as shown in the output grids in previous examples:\n   - If a region of the grid is surrounded on all sides by a color and punctuated within by a different color, adjust the color of the inner area/line as per the transformation pattern (this may require recursively applying the above steps if there is more than one \"block within a block\").\n4. Leave the border and background unchanged, except where the pattern explicitly replaces certain border-adjacent lines or chunks (as seen in the transition from input to output in the examples).\n5. Repeat these steps until the entire grid has been traversed and all blocks within blocks have been recolored in accordance with the transformation observed in previous examples.", "test_input": [[4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 8, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 1, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 1, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 3, 1, 1, 1, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],\n [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],\n [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 3, 8, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 3, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 1, 8, 8, 8, 8, 8, 3, 1, 1, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 1, 1, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 8, 8, 8, 1, 8, 8, 8, 8, 8, 3, 3, 8, 8, 8, 8, 8, 8, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]}}