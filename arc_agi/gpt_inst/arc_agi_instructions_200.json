{"36d67576": {"instruction": "1. Identify every 3x3 (or rectangular) \"block\" of colored cells that contains at least one contiguous cluster of cells with color 4.\n2. For each such detected block, look for a unique nonzero color (either 1 or 3) that is present on either the left or right of a row containing a cluster of 4s. If found, copy that color and insert it at the end of the corresponding row of 4s, as seen in the examples.\n3. Similarly, if a block of 4s ends in a column, and there is a color (1 or 3) at the top or bottom of the column (vertically aligned), append or prepend that color to extend the cluster as needed.\n4. In every row containing contiguous 4s with a 3 or 1 at the end of the sequence (with possibly zeros in between), \"push\" (move) the nonzero color (3 or 1) to the end (or start) of the 4 sequence, as is contextually consistent with surrounding blocks (left or right, top or bottom).\n5. Apply the transformation independently for each distinct block of colored region or pattern; ensure to preserve all other zero cells outside the blocks.\n6. Do not alter any pre-existing non-block colored cells; only append or move existing 1s or 3s adjacent to sequences of 4s as described.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 4, 0, 4, 3, 0, 0, 0, 0, 4, 0, 4, 0, 0], [0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 4, 4, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0], [0, 2, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 4, 4, 2, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0],\n [0, 0, 4, 4, 3, 0, 0, 0, 0, 0, 4, 4, 3, 0, 0],\n [0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 4, 4, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 0, 0, 0, 0, 2, 4, 4, 0, 0, 0, 0],\n [0, 4, 4, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0],\n [0, 2, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 2, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0], [0, 0, 4, 0, 4, 3, 0, 0, 0, 0, 4, 0, 4, 3, 0], [0, 0, 0, 4, 4, 1, 0, 0, 0, 0, 4, 4, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0], [1, 4, 4, 0, 0, 0, 0, 0, 2, 4, 4, 0, 0, 0, 0], [3, 4, 0, 4, 0, 0, 0, 3, 4, 0, 4, 0, 0, 0, 0], [0, 2, 4, 4, 0, 0, 0, 1, 4, 4, 0, 0, 0, 0, 0], [0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "36fdfd69": {"instruction": "1. For every contiguous horizontal or vertical sequence of cells with the value 2 that is bordered on both ends by cells with the value 9 (bordering cells must be immediately adjacent to the sequence of 2s), change all such 2s in the sequence to 4.\n2. Leave all other cell values unchanged.", "test_input": [[0, 0, 0, 9, 9, 9, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 9, 0], [9, 2, 9, 2, 2, 9, 0, 0, 0, 9, 0, 0, 9, 0, 0, 0, 0, 0], [0, 2, 2, 9, 9, 2, 0, 0, 9, 9, 9, 0, 0, 9, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 9, 0], [0, 9, 9, 0, 0, 0, 9, 0, 9, 9, 0, 9, 0, 0, 9, 9, 9, 9], [9, 9, 9, 9, 0, 9, 2, 9, 2, 2, 9, 0, 0, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 9, 2, 2, 2, 2, 9, 0, 9, 9, 0, 0, 0, 0], [9, 0, 9, 9, 0, 9, 0, 0, 9, 0, 9, 9, 0, 9, 9, 9, 0, 9], [0, 0, 0, 9, 0, 0, 0, 9, 9, 9, 9, 9, 0, 9, 0, 0, 0, 0], [9, 9, 0, 9, 0, 9, 0, 9, 9, 0, 0, 9, 9, 0, 0, 0, 0, 9], [0, 9, 9, 0, 9, 0, 9, 2, 9, 0, 0, 9, 0, 0, 9, 9, 9, 9], [0, 9, 9, 0, 0, 9, 2, 9, 9, 9, 0, 0, 0, 9, 9, 9, 0, 9], [9, 0, 9, 9, 0, 9, 9, 9, 0, 0, 9, 0, 0, 0, 9, 9, 9, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 9, 2, 2, 9, 2, 2, 9, 0], [0, 9, 9, 9, 9, 9, 9, 0, 9, 0, 0, 2, 9, 2, 9, 9, 2, 9], [0, 9, 0, 9, 0, 0, 9, 9, 0, 9, 0, 2, 2, 9, 2, 2, 9, 0], [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 9, 9, 9, 0]], "predicted_output": "[[0, 0, 0, 9, 9, 9, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 9, 0],\n [9, 4, 9, 2, 2, 9, 0, 0, 0, 9, 0, 0, 9, 0, 0, 0, 0, 0],\n [0, 4, 4, 9, 9, 2, 0, 0, 9, 9, 9, 0, 0, 9, 0, 0, 9, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 9, 0],\n [0, 9, 9, 0, 0, 0, 9, 0, 9, 9, 0, 9, 0, 0, 9, 9, 9, 9],\n [9, 9, 9, 9, 0, 9, 4, 9, 4, 4, 9, 0, 0, 9, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 9, 4, 4, 4, 4, 9, 0, 9, 9, 0, 0, 0, 0],\n [9, 0, 9, 9, 0, 9, 0, 0, 9, 0, 9, 9, 0, 9, 9, 9, 0, 9],\n [0, 0, 0, 9, 0, 0, 0, 9, 9, 9, 9, 9, 0, 9, 0, 0, 0, 0],\n [9, 9, 0, 9, 0, 9, 0, 9, 9, 0, 0, 9, 9, 0, 0, 0, 0, 9],\n [0, 9, 9, 0, 9, 0, 9, 2, 9, 0, 0, 9, 0, 0, 9, 9, 9, 9],\n [0, 9, 9, 0, 0, 9, 2, 9, 9, 9, 0, 0, 0, 9, 9, 9, 0, 9],\n [9, 0, 9, 9, 0, 9, 9, 9, 0, 0, 9, 0, 0, 0, 9, 9, 9, 0],\n [9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 9, 4, 4, 9, 2, 2, 9, 0],\n [0, 9, 9, 9, 9, 9, 9, 0, 9, 0, 0, 2, 9, 2, 9, 9, 2, 9],\n [0, 9, 0, 9, 0, 0, 9, 9, 0, 9, 0, 2, 2, 9, 2, 2, 9, 0],\n [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 9, 9, 9, 0]]", "expected_output": [[0, 0, 0, 9, 9, 9, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 9, 0], [9, 2, 4, 2, 2, 4, 0, 0, 0, 9, 0, 0, 9, 0, 0, 0, 0, 0], [0, 2, 2, 4, 4, 2, 0, 0, 9, 9, 9, 0, 0, 9, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 9, 0], [0, 9, 9, 0, 0, 0, 9, 0, 9, 9, 0, 9, 0, 0, 9, 9, 9, 9], [9, 9, 9, 9, 0, 9, 2, 4, 2, 2, 9, 0, 0, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 9, 2, 2, 2, 2, 9, 0, 9, 9, 0, 0, 0, 0], [9, 0, 9, 9, 0, 9, 0, 0, 9, 0, 9, 9, 0, 9, 9, 9, 0, 9], [0, 0, 0, 9, 0, 0, 0, 9, 9, 9, 9, 9, 0, 9, 0, 0, 0, 0], [9, 9, 0, 9, 0, 9, 0, 9, 9, 0, 0, 9, 9, 0, 0, 0, 0, 9], [0, 9, 9, 0, 9, 0, 4, 2, 9, 0, 0, 9, 0, 0, 9, 9, 9, 9], [0, 9, 9, 0, 0, 9, 2, 4, 9, 9, 0, 0, 0, 9, 9, 9, 0, 9], [9, 0, 9, 9, 0, 9, 9, 9, 0, 0, 9, 0, 0, 0, 9, 9, 9, 0], [9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 9, 2, 2, 4, 2, 2, 4, 0], [0, 9, 9, 9, 9, 9, 9, 0, 9, 0, 0, 2, 4, 2, 4, 4, 2, 9], [0, 9, 0, 9, 0, 0, 9, 9, 0, 9, 0, 2, 2, 4, 2, 2, 4, 0], [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 9, 9, 9, 0]]}, "37ce87bb": {"instruction": "1. Identify all columns that contain at least one cell with the value 8. For each such column, proceed to step 2.\n2. In each of these identified columns, change the rightmost cell in the column that currently has the value 7 to 5. Make this change only if there is no cell with value 5 below it in the same column; only modify the lowest such 7 in each 8-column.\n3. Leave all other cells unchanged.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 2, 7, 7, 7, 8, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 2, 7, 8, 7, 8, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 2, 7, 8, 7, 8, 7, 2, 7, 2, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7],\n [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7],\n [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7],\n [7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 2, 7, 7, 7],\n [7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 2, 7, 7, 7],\n [7, 8, 7, 2, 7, 7, 7, 8, 7, 7, 7, 2, 7, 7, 7],\n [7, 8, 7, 2, 7, 8, 7, 8, 7, 7, 7, 2, 7, 7, 7],\n [7, 5, 7, 2, 7, 8, 7, 5, 7, 2, 7, 2, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 2, 7, 7, 7, 8, 7, 7, 7, 2, 7, 7, 7], [7, 8, 7, 2, 7, 8, 7, 8, 7, 7, 7, 2, 7, 5, 7], [7, 8, 7, 2, 7, 8, 7, 8, 7, 2, 7, 2, 7, 5, 7]]}, "37d3e8b2": {"instruction": "1. For every distinct contiguous region of nonzero cells in the input grid (where regions are separated by zeros), identify its position and shape.\n2. Assign a unique output color (1, 2, 3, 7, etc.) for each region, using the following method: assign output color '1' for the topmost/leftmost large solid block, '2' for the next, and so on, as seen in the examples. (Consistent regions across examples have consistent mappings: e.g., top-left \u2248 1, middle/upper right \u2248 3, bottom-right \u2248 7, etc.)\n3. For each region, replace all the nonzero (8) values in that region with its assigned output color, preserving 0s elsewhere.\n4. Leave all original zeros in the grid unchanged.", "test_input": [[0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 0, 8, 8, 8, 0, 8, 0, 8, 8, 0, 0, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 0, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 8, 8, 8, 8, 0, 8, 8, 0, 0, 8, 8, 8, 0, 0, 8, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 1, 0, 1, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0],\n [0, 0, 1, 0, 1, 1, 1, 0, 3, 0, 3, 3, 0, 0, 3, 0, 0, 0],\n [0, 0, 1, 1, 1, 1, 1, 0, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0],\n [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0],\n [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 7, 0, 0, 7, 7, 7, 7, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0],\n [0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0],\n [0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0],\n [0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 7, 7, 7, 0, 0, 7, 7, 0],\n [0, 4, 4, 4, 4, 0, 4, 4, 0, 0, 7, 7, 7, 0, 0, 7, 7, 0],\n [0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 2, 0, 2, 2, 2, 0, 3, 0, 3, 3, 0, 0, 3, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0], [0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 7, 0, 7, 7, 7, 7, 7, 0], [0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 7, 7, 7, 0, 0, 7, 7, 0], [0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 7, 7, 7, 0, 0, 7, 7, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "3906de3d": {"instruction": "1. Scan each column for the lowest cell in that column with a value of 2 (starting from the bottom of the grid and moving upward).\n2. For each such cell found at position (row_i, col_j):\n    a. For all rows above row_i (from row 0 to row_i - 1) in column col_j:\n        i. If the cell contains a 0, set it to 2.\n        ii. Leave all nonzero cells unchanged.\n3. For every cell with value 2, set all cells below it in the same column to 0 (if they are not already 0).", "test_input": [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 2, 1], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0], [0, 0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 2, 0, 2, 2, 0, 0, 2, 0], [0, 0, 2, 0, 2, 2, 2, 0, 2, 0]], "predicted_output": "[[0, 1, 2, 1, 2, 2, 1, 1, 2, 1],\n [0, 1, 2, 1, 2, 2, 1, 1, 2, 1],\n [0, 1, 2, 1, 2, 2, 1, 1, 2, 1],\n [0, 1, 2, 1, 2, 2, 1, 1, 2, 1],\n [0, 0, 2, 1, 2, 2, 1, 0, 2, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 2, 1, 1, 1, 1, 1, 2, 1], [0, 1, 2, 1, 2, 1, 2, 1, 2, 1], [0, 1, 2, 1, 2, 2, 0, 1, 2, 1], [0, 0, 0, 1, 0, 2, 0, 0, 2, 1], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "396d80d7": {"instruction": "1. For every non-background block (that is, any shape not made of the background color '7'), add a border around the block using the color of the shape's \"interior\" (the unique color filling the shape). The border consists of single cells placed on the outside of the block, above, below, to the left, and to the right, as well as diagonally, mirroring the shape's layout but offset by one cell outward.\n2. When two or more non-background blocks are present, repeat this border placement for each such block, being sure not to overwrite the interior of other shapes.\n3. Specifically, for each block, wherever there is a background cell (color '7') adjacent (in any direction: up, down, left, right, diagonally) to the block, change these adjacent background cells to the block's own color.\n4. If any part of the block touches the grid boundary, still add the border outward where possible, except where it would go outside the grid.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 9, 9, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 9, 9, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 1, 1, 9, 9, 1, 1, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 1, 9, 9, 9, 9, 1, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 1, 1, 1, 9, 9, 1, 1, 1, 7, 7, 7, 7],\n [7, 7, 7, 7, 1, 9, 9, 9, 9, 9, 9, 1, 7, 7, 7, 7],\n [7, 7, 7, 7, 1, 9, 9, 9, 9, 9, 9, 1, 7, 7, 7, 7],\n [7, 7, 7, 7, 1, 1, 1, 9, 9, 1, 1, 1, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 1, 9, 9, 9, 9, 1, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 1, 1, 9, 9, 1, 1, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 9, 7, 9, 9, 7, 9, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 9, 7, 9, 9, 7, 9, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 9, 7, 9, 9, 7, 9, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 1, 7, 7, 1, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 9, 7, 9, 9, 7, 9, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "3979b1a8": {"instruction": "1. Duplicate the original 5x5 input grid and place it in the top-left corner of a new 10x10 grid.\n2. In the top-right 5x5 block (columns 5 to 9, rows 0 to 4), insert:\n   - In each row, starting from the left, add two copies of the value from the first column of the input grid, then one copy of the central (odd-indexed) value, then the second column value, then the central value again for each output grid row. This forms an L-shaped and vertical pattern similar to the examples.\n   - More simply: replicate each input row into positions 5 to 9 as [first column value, central value, second column value, central value, ...], interleaved in the given way observed from the examples.\n3. In the bottom-left 5x5 block (columns 0 to 4, rows 5 to 9), insert:\n   - For rows 5 to 8, fill consecutive rows with copies of the first value in each input row (the corner/edge value), and then with corresponding symmetric values from the edges, matching the vertical stacking seen in the output examples.\n   - For row 9, fill all values with the last value from the input grid's last row.\n4. In the middle block (rows 5 to 9, columns 5 to 9), tile a pattern that sequences the most prominent value in the center column and central value of the grid, mixing with edge values along diagonals, reproducing the way input colors are repeated and distributed in output.\n5. For the bottom-right 5x5 block (columns 5 to 9, rows 5 to 9), create a column-wise repeated pattern using values sourced from the input grid's last row and the central row/column values, as seen in the output grid: strongly emphasize the last value and central value in a similar interleaving.\n6. Review the entire 10x10 grid to ensure that each quadrant and corner matches the symmetry and repeating-interleaved patterns visible in the output examples\u2014particularly that the repetition of edge and central values are placed to match the recurring tile logic in output grids.", "test_input": [[5, 1, 1, 1, 5], [1, 1, 9, 1, 1], [1, 9, 9, 9, 1], [1, 1, 9, 1, 1], [5, 1, 1, 1, 5]], "predicted_output": "[[5, 1, 1, 1, 5, 5, 9, 1, 9, 1],\n [1, 1, 9, 1, 1, 1, 9, 1, 1, 9],\n [1, 9, 9, 9, 1, 1, 9, 9, 1, 9],\n [1, 1, 9, 1, 1, 1, 9, 1, 1, 9],\n [5, 1, 1, 1, 5, 5, 9, 1, 9, 1],\n [5, 1, 1, 1, 5, 9, 9, 1, 5, 5],\n [1, 1, 1, 1, 1, 9, 9, 1, 9, 1],\n [1, 9, 9, 9, 1, 9, 9, 9, 1, 9],\n [1, 1, 9, 1, 1, 1, 9, 1, 9, 1],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]", "expected_output": [[5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [1, 9, 9, 9, 1, 5, 9, 1, 5, 9], [1, 1, 9, 1, 1, 5, 9, 1, 5, 9], [5, 1, 1, 1, 5, 5, 9, 1, 5, 9], [5, 5, 5, 5, 5, 9, 9, 1, 5, 9], [9, 9, 9, 9, 9, 9, 1, 1, 5, 9], [1, 1, 1, 1, 1, 1, 1, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 1]]}, "39a8645d": {"instruction": "1. Identify all 3x3 regions in the input grid that contain nonzero values of the same color (i.e., where the 3x3 region consists of only one nonzero color and possibly some zeros).\n2. For each unique nonzero color present, extract the minimal bounding 3x3 region that contains all occurrences of that color (ignore all other values and colors).\n3. For each bounding 3x3 region, create a new 3x3 grid matching the positions and values of the nonzero color in that region, with zeros elsewhere.\n4. The output grid is the 3x3 grid corresponding to the nonzero color(s) found in the input, centered and preserving their spatial configuration within the 3x3 box.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 0, 0, 2, 2, 2, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 3, 0, 0], [0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 3, 0, 3, 0, 0]], "predicted_output": "[[3, 0, 3],\n [0, 3, 3],\n [3, 0, 3]]", "expected_output": [[0, 2, 0], [2, 2, 2], [2, 2, 0]]}, "39e1d7f9": {"instruction": "1. Identify all rows in the grid that have all nonzero values equal to 4 (these are \"full-4\" rows). For each \"full-4\" row, replace every 4 in that row with 6.\n2. For all other rows, identify every group of three consecutive cells that vertically aligns with a \"full-4\" row above or below. If in a given row, the first cell of such a group is 0, the second is 0, and the third is 4, replace this group with [6, 6, 4].\n3. For all other cells, leave the value unchanged.", "test_input": [[0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 6, 6, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 6, 6, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 6, 6, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 6, 6, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [6, 6, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [6, 6, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0]], "predicted_output": "[[0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 6, 6, 4, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 6, 6, 4, 0, 0, 4, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 6, 6, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 6, 6, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [6, 6, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0]]", "expected_output": [[0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0], [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0], [3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 3, 3, 4, 6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0], [6, 6, 4, 3, 3, 4, 0, 0, 4, 0, 0, 4, 8, 8, 4, 3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0], [3, 3, 4, 8, 8, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0]]}, "3a301edc": {"instruction": "1. Locate the smallest bounding rectangle that contains all non-zero values in the input grid.\n2. For each row in the input grid, copy the non-zero pattern contained within the bounding rectangle.\n3. Add a border, one cell thick, of a new color (taken from the \"background\" color of the small inner region, i.e., the corner value of the bounding rectangle) around the bounding rectangle, extending its dimensions by 2 (one on each side). Fill this border with the inner region's background color.\n4. Copy the expanded rectangle with its border to the same vertical region as the original shape, but shifted to the leftmost available columns of the grid (the expanded shape is now flush with the left, with zeros beyond the right edge).\n5. Fill the interior (excluding the border) where the original background was found with the original background's secondary color (the color inside the previous border) instead of zero, matching the pattern as in previous examples.\n6. Leave the rest of the grid unchanged, filled with zeros.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 8, 8, 8, 8, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "3aa6fb7a": {"instruction": "1. For each connected group of '8's in the grid (connected orthogonally), identify the '8' cell located with the smallest column index (i.e., the leftmost '8' in the connected group).\n2. If there are multiple such '8's in the same group sharing the smallest column index, select the one with the smallest row index (i.e., the topmost among them).\n3. Replace the immediate right-adjacent cell (same row, column+1) of this selected '8' with '1', but only if that cell is currently '0'.\n4. Repeat steps 1-3 for each separate (orthogonally connected) group of '8's in the grid.", "test_input": [[0, 0, 0, 0, 0, 8, 8], [8, 8, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 8, 8, 0, 0], [0, 8, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 8, 8],\n [8, 8, 1, 0, 0, 0, 8],\n [8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 8, 8, 0, 0],\n [1, 8, 0, 0, 0, 0, 0],\n [8, 8, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 8, 8], [8, 8, 0, 0, 0, 1, 8], [8, 1, 0, 0, 0, 0, 0], [0, 0, 0, 8, 1, 0, 0], [0, 0, 0, 8, 8, 0, 0], [1, 8, 0, 0, 0, 0, 0], [8, 8, 0, 0, 0, 0, 0]]}, "3ac3eb23": {"instruction": "1. Identify all nonzero cells in the first row of the grid. For each such cell at position (0, c) with value v, mark its column as a target column for value v.\n2. For each subsequent row (starting from row 1 down to the last row):\n    a. For each column c:\n        i. If column c is a marked target column for value v, and the parity (evenness/oddness) of the row index matches that of the initial row (row 0) for that column (i.e., row and column are either both even or both odd as they appear in the original pattern), set cell (r, c) to value v; otherwise, set it to 0.\n        ii. For each pair of target columns for value v, fill a cell with value v between them, at every other step, maintaining the checkerboard pattern from the initial row. (For example, if columns 2 and 6 are both marked for value 3 and 6 respectively, in rows with odd indices, fill the intermediate cells (like (1,2), (1,6)), while in even rows, fill (2,2), (2,6)), and so on.)\n3. Leave all other cells as 0.", "test_input": [[0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0],\n [0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0],\n [0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0],\n [0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0],\n [0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0],\n [0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0]]", "expected_output": [[0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0], [0, 3, 0, 3, 0, 6, 0, 6, 7, 0, 7, 0], [0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0], [0, 3, 0, 3, 0, 6, 0, 6, 7, 0, 7, 0], [0, 0, 3, 0, 0, 0, 6, 0, 0, 7, 0, 0], [0, 3, 0, 3, 0, 6, 0, 6, 7, 0, 7, 0]]}, "3ad05f52": {"instruction": "1. For every group of cells enclosed by '8's in a rectangular or square region (where '8's form a closed frame), identify the non-zero, non-'8' color(s) inside. For each such region, fill **all empty (zero) cells inside the enclosure** with the interior color, so that the entire area within the '8' boundary becomes a solid block of that color.\n2. If the region contains **more than one distinct interior color**, use the most prevalent color, or if the pattern inside is a known \"filled block\" (e.g., a consistent non-zero color shape), extend that shape to fill the interior.\n3. Keep all exterior '8's and any structure outside the enclosure unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 2, 2, 2, 8, 0, 0, 0], [8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 8, 0, 0, 0], [8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 2, 2, 2, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 8, 8], [8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0], [8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 2, 2, 2, 8, 0, 0, 0],\n [8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 8, 0, 0, 0],\n [8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 2, 2, 2, 8, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 8, 8],\n [8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0],\n [8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0],\n [8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0],\n [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 8, 2, 2, 2, 8, 2, 2, 2, 8, 2, 2, 2, 8, 2, 2, 2, 8, 2, 2, 2, 8, 0, 0, 0], [8, 0, 0, 0, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 2, 2, 2, 8, 0, 0, 0], [8, 0, 0, 0, 8, 2, 2, 2, 8, 2, 2, 2, 8, 2, 2, 2, 8, 2, 2, 2, 8, 2, 2, 2, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 0, 0, 0, 8, 2, 2, 2, 8, 2, 2, 2, 8, 0, 0, 0, 8, 2, 2, 2, 8, 2, 2, 2, 8, 0, 0, 0], [8, 0, 0, 0, 8, 2, 2, 2, 2, 2, 2, 2, 8, 0, 0, 0, 8, 2, 2, 2, 2, 2, 2, 2, 8, 0, 0, 0], [8, 0, 0, 0, 8, 2, 2, 2, 8, 2, 2, 2, 8, 0, 0, 0, 8, 2, 2, 2, 8, 2, 2, 2, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0]]}, "3af2c5a8": {"instruction": "1. Horizontally reflect (mirror) the input grid to create a reversed version of it.\n2. Concatenate the original grid and its mirrored version side by side to form a new, wider grid (this doubles the columns).\n3. Vertically reflect (mirror) the resulting grid from step 2 to create a flipped-bottom version.\n4. Concatenate the grid from step 2 and its flipped-bottom version one below the other to form the final output grid (this doubles the rows).", "test_input": [[4, 0, 0, 0], [0, 0, 0, 4], [4, 4, 0, 0]], "predicted_output": "[[4, 0, 0, 0, 0, 0, 0, 4],\n [0, 0, 0, 4, 4, 0, 0, 0],\n [4, 4, 0, 0, 0, 0, 4, 4],\n [4, 4, 0, 0, 0, 0, 4, 4],\n [0, 0, 0, 4, 4, 0, 0, 0],\n [4, 0, 0, 0, 0, 0, 0, 4]]", "expected_output": [[4, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 4, 4, 0, 0, 0], [4, 4, 0, 0, 0, 0, 4, 4], [4, 4, 0, 0, 0, 0, 4, 4], [0, 0, 0, 4, 4, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 4]]}, "3b4c2228": {"instruction": "1. Identify all contiguous blocks (connected components) of cells with value 3 in the input grid. A block is a group of touching 3s (connected orthogonally).\n2. For each block of 3s, mark the center position of the block (if the block is 2x2, use its top-left corner as the center for these tasks).\n3. Create a new 3x3 grid initialized with all zeros.\n4. For each detected block, set the corresponding cell in the 3x3 output grid to 1 according to the position of the block:\n   - Top-left for blocks located in the top-left region of the input grid \u2192 output[0][0] = 1\n   - Top-center for blocks in the top-center region \u2192 output[0][1] = 1\n   - Top-right for blocks in the top-right region \u2192 output[0][2] = 1\n   - Middle-left for blocks in the middle-left region \u2192 output[1][0] = 1\n   - Center for blocks in the center of the grid \u2192 output[1][1] = 1\n   - Middle-right for blocks in the middle-right region \u2192 output[1][2] = 1\n   - Bottom-left for blocks in the bottom-left region \u2192 output[2][0] = 1\n   - Bottom-center for blocks in the bottom-center region \u2192 output[2][1] = 1\n   - Bottom-right for blocks in the bottom-right region \u2192 output[2][2] = 1\n5. The final output grid is the 3x3 grid with 1s marking the locations of the 3-blocks according to their positions, all other cells remain 0.", "test_input": [[0, 3, 3, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 3, 2, 0], [2, 0, 0, 0, 0, 0, 0, 3], [0, 0, 2, 2, 0, 0, 0, 0], [3, 0, 2, 2, 0, 3, 3, 0], [0, 0, 0, 0, 0, 3, 3, 0], [0, 3, 3, 0, 0, 0, 0, 0], [0, 3, 3, 0, 2, 0, 3, 0]], "predicted_output": "[[1, 1, 1],\n [1, 0, 1],\n [0, 1, 1]]", "expected_output": [[1, 0, 0], [0, 1, 0], [0, 0, 1]]}, "3bd292e8": {"instruction": "1. Identify all cells with the value 2 in the input grid. Keep these cells as 2 in the output grid; do not change their position or value.\n2. Divide the grid into four regions based on position:\n   - Top-left region: all rows above the first row containing a 2, and all columns to the left of the leftmost column containing a 2.\n   - Bottom-right region: all rows below the last row containing a 2, and all columns to the right of the rightmost column containing a 2.\n   - Left or top \"frames\": columns to the left of the leftmost column containing a 2, or rows above the topmost row containing a 2.\n   - Right or bottom \"frames\": columns to the right of the rightmost column containing a 2, or rows below the lowest row containing a 2.\n3. For all cells that are not 2 and are strictly to the left of any column containing a 2 (i.e., left side \u201cframe\u201d), replace their value with 5.\n4. For all cells that are not 2 and are strictly above any row containing a 2 (i.e., top side \u201cframe\u201d), replace their value with 3.\n5. For all cells that are not 2 and are strictly to the right of any column containing a 2 (i.e., right side \u201cframe\u201d), replace their value with 3.\n6. For all cells that are not 2 and are strictly below any row containing a 2 (i.e., bottom side \u201cframe\u201d), replace their value with 5.\n7. For any non-2 cell that is not strictly in the left, right, top, or bottom \u201cframe\u201d as defined above, preserve their current value unless a rule above applied.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7], [2, 2, 2, 2, 2, 2, 2, 2, 7], [7, 7, 7, 7, 7, 7, 7, 2, 7], [2, 2, 2, 2, 2, 2, 7, 2, 2], [7, 7, 7, 7, 7, 2, 7, 7, 7], [2, 2, 2, 2, 7, 2, 2, 7, 7], [7, 7, 7, 2, 7, 7, 2, 2, 2], [7, 7, 7, 2, 7, 7, 7, 7, 7]], "predicted_output": "[[3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3],\n [5, 5, 2, 2, 2, 2, 2, 2, 3],\n [5, 5, 5, 5, 5, 5, 5, 2, 3],\n [2, 2, 2, 2, 2, 2, 5, 2, 2],\n [5, 5, 5, 5, 5, 2, 5, 5, 5],\n [2, 2, 2, 2, 5, 2, 2, 5, 5],\n [5, 5, 5, 2, 5, 5, 2, 2, 2],\n [5, 5, 5, 2, 5, 5, 5, 5, 5]]", "expected_output": [[3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3], [2, 2, 2, 2, 2, 2, 2, 2, 3], [5, 5, 5, 5, 5, 5, 5, 2, 3], [2, 2, 2, 2, 2, 2, 5, 2, 2], [3, 3, 3, 3, 3, 2, 5, 5, 5], [2, 2, 2, 2, 3, 2, 2, 5, 5], [5, 5, 5, 2, 3, 3, 2, 2, 2], [5, 5, 5, 2, 3, 3, 3, 3, 3]]}, "3bd67248": {"instruction": "1. Copy the input grid to the output grid.\n2. For each row index i from 0 to N-2 (where N is the height/width of the square grid), set the cell at position (i, N-1-i) to 2.\n   - That is, fill a diagonal line of 2s starting from the top-right (except the last row).\n3. For the last row (row N-1), fill all cells except the first cell (index 0) with the value 4.\n4. In the last row (row N-1), set the first cell (column 0) to X, where X is the value already present in the first column of every row in the input grid (they are all identical).", "test_input": [[3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[3, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [3, 0, 0, 0, 0, 0, 0, 0, 2, 0],\n [3, 0, 0, 0, 0, 0, 0, 2, 0, 0],\n [3, 0, 0, 0, 0, 0, 2, 0, 0, 0],\n [3, 0, 0, 0, 0, 2, 0, 0, 0, 0],\n [3, 0, 0, 0, 2, 0, 0, 0, 0, 0],\n [3, 0, 0, 2, 0, 0, 0, 0, 0, 0],\n [3, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [3, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[3, 0, 0, 0, 0, 0, 0, 0, 0, 2], [3, 0, 0, 0, 0, 0, 0, 0, 2, 0], [3, 0, 0, 0, 0, 0, 0, 2, 0, 0], [3, 0, 0, 0, 0, 0, 2, 0, 0, 0], [3, 0, 0, 0, 0, 2, 0, 0, 0, 0], [3, 0, 0, 0, 2, 0, 0, 0, 0, 0], [3, 0, 0, 2, 0, 0, 0, 0, 0, 0], [3, 0, 2, 0, 0, 0, 0, 0, 0, 0], [3, 2, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4]]}, "3bdb4ada": {"instruction": "1. For each contiguous rectangular block of nonzero values (each \"band\") in the grid, identify all rows that are identical within the block.\n2. In each such band, replace the entire second row (counting from the top of the band, and only if it exists) with an alternating pattern: every other cell starting from the leftmost cell of the block alternates between the block's value and 0 (starting with the block's value).\n   - For example, if the block is made of 5s, the row becomes [5, 0, 5, 0, 5, ...] for the width of the block.\n   - All other rows in the block are left unchanged.\n3. All other cells in the grid remain as they are.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8]]}, "3befdf3e": {"instruction": "1. Identify all nonzero rectangular blocks in the input grid where a single nonzero color forms a closed loop or square, potentially with a different color filling the center (the \"core\" region).\n2. For each such block, expand the block outward by one cell in all directions, replacing any surrounding zeros with the border color (the color forming the loop in the original block). The corners should also be expanded.\n3. In the expanded block, expand the core region outward by one cell in all directions using the core's fill color, such that the previous border cells adjacent to the core are replaced with the fill color, and the new \"core\" region forms a thicker plus-shaped or full filled region inside.\n4. If the original core region itself had different colors inside (multicolored), repeat the expansion pattern for each region separately, maintaining their relative positions.\n5. Retain all other zero areas outside the expanded block as zero.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 3, 3, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 3, 3, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0],\n [8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0],\n [8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0],\n [8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0],\n [8, 8, 3, 3, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 8],\n [8, 8, 3, 3, 8, 8, 3, 3, 3, 3, 8, 8],\n [8, 8, 3, 3, 8, 8, 3, 3, 3, 3, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 8],\n [0, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0], [8, 3, 8, 3, 8, 0, 0, 0, 0, 0, 0, 0], [8, 3, 3, 3, 8, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 8, 8, 3, 3, 3, 3, 8, 8], [0, 0, 0, 0, 8, 8, 3, 8, 8, 3, 8, 8], [0, 0, 0, 0, 8, 8, 3, 8, 8, 3, 8, 8], [0, 0, 0, 0, 8, 8, 3, 3, 3, 3, 8, 8], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0]]}, "3c9b0459": {"instruction": "1. Rotate the input grid 90 degrees clockwise.\n2. For each row in the rotated grid, reverse the order of the elements in the row.", "test_input": [[6, 4, 4], [6, 6, 4], [4, 6, 7]], "predicted_output": "[[4, 6, 6],\n [6, 6, 4],\n [7, 4, 4]]", "expected_output": [[7, 6, 4], [4, 6, 6], [4, 4, 6]]}, "3cd86f4f": {"instruction": "1. For each row in the input grid, append enough zeros to the left of the row so that the first nonzero element appears in a \"staircase\" descending diagonal from the bottom-left to the top-right of the resulting grid. The bottom row will have no leading zeros, the row above it will have one leading zero, and so on, up to the top row, which will have the most leading zeros.\n2. For each row in the input grid, append zeros to the right so that all rows are padded to the same length, corresponding to the sum of the input grid's number of rows and columns minus one.\n3. The result is an output grid where the original elements are positioned diagonally, and the rest of the grid is filled with zeros.", "test_input": [[1], [9], [5], [4]], "predicted_output": "[[0, 0, 1, 0],\n [0, 9, 0, 0],\n [5, 0, 0, 0],\n [4, 0, 0, 0]]", "expected_output": [[0, 0, 0, 1], [0, 0, 9, 0], [0, 5, 0, 0], [4, 0, 0, 0]]}, "3d31c5b3": {"instruction": "1. Divide the input grid into four vertical sections (blocks) of 3 rows each, starting from the top. Each block is 3 rows tall and 6 columns wide.\n2. For each block, select only the nonzero columns from each block to form the output row. Specifically:  \n   - Scan columns from left to right within the 3-row slice,\n   - For each column, include it in the output only if at least one of its three cells in the block is nonzero.\n3. For each block, output a new row where each cell is taken from the corresponding position (column and row) in the block, preserving order.\n4. The final output grid is formed by stacking these 3 output rows in the original block order, resulting in a 3x6 grid.", "test_input": [[5, 0, 5, 0, 0, 5], [0, 5, 0, 0, 0, 5], [5, 5, 5, 0, 0, 0], [0, 0, 0, 4, 0, 4], [0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 0, 0], [2, 0, 2, 0, 2, 2], [2, 2, 0, 2, 2, 2], [2, 2, 2, 2, 2, 2], [0, 0, 8, 8, 0, 0], [0, 8, 0, 0, 8, 8], [0, 0, 0, 8, 0, 0]], "predicted_output": "[[5, 0, 5, 5, 5, 0],\n [0, 5, 0, 5, 0, 5],\n [5, 5, 5, 0, 2, 2]]", "expected_output": [[5, 0, 5, 4, 2, 5], [2, 5, 0, 2, 8, 5], [5, 5, 5, 4, 2, 2]]}, "3d588dc9": {"instruction": "1. For each 3x3+ block of contiguous 0s in a row (that is, horizontal runs of three or more adjacent 0s), identify the right-most 0 in each such block.\n2. Replace this right-most 0 with the value 6, except in regions that are not surrounded by 7s or are part of areas already modified in steps above.\n3. Leave all other cell values unchanged.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7], [5, 5, 5, 5, 7, 7, 7, 0, 0, 0, 7, 7, 0, 0, 7, 7], [5, 5, 5, 7, 7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7], [5, 5, 7, 7, 7, 7, 7, 0, 0, 0, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 7, 2, 2, 2, 2, 2], [7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 2, 2, 2, 2], [7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 2, 2, 2], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 2], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 0, 0, 6, 7],\n [5, 5, 5, 5, 7, 7, 7, 0, 0, 6, 7, 7, 0, 0, 7, 7],\n [5, 5, 5, 7, 7, 7, 7, 0, 0, 6, 7, 7, 7, 7, 7, 7],\n [5, 5, 7, 7, 7, 7, 7, 0, 0, 6, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 0, 0, 6, 7, 2, 2, 2, 2, 2],\n [7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 2, 2, 2, 2],\n [7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 2, 2, 2],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2],\n [7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 2],\n [7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 6, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 0, 0, 0, 6, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7], [5, 5, 5, 5, 7, 7, 7, 6, 0, 0, 7, 7, 0, 0, 7, 7], [5, 5, 5, 7, 7, 7, 7, 6, 0, 0, 7, 7, 7, 7, 7, 7], [5, 5, 7, 7, 7, 7, 7, 6, 0, 0, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 6, 0, 0, 7, 2, 2, 2, 2, 2], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2, 2], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 2], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 2], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "3d6c6e23": {"instruction": "1. Identify all columns that contain any nonzero numbers (i.e., columns with colored or marked cells).\n2. For each identified column, collect, from top to bottom, all contiguous identical nonzero values as segments. Segments of different values in the same column are considered separate groups.\n3. For each unique color/value present in the input grid, collect all its column segments: group them together, maintaining their order from top to bottom within each segment.\n4. Build the output grid from bottom up as follows:\n\u2003a. The lowest rows are filled left-justified with the lowest color/value segments (by value as they appear in the input, maintaining within-color order), placing the first segment in the leftmost output columns, the next segment to its right, and so on.\n\u2003b. Stack segments of the same color if they appear in multiple columns in the input: concatenate them horizontally in order, filling the required number of cells per row.\n\u2003c. When all segments for a color/value are placed, move up to the next row(s) to place segments of the next color/value found in the input grid.\n5. Leave any extra cells in the output grid as zero.", "test_input": [[0, 0, 2, 0, 0, 0, 0, 0, 7, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 0, 0, 0, 0],\n [2, 2, 2, 2, 0, 0, 0, 0, 0, 0],\n [7, 7, 7, 7, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 7, 0], [1, 1, 1, 1, 1, 0, 0, 7, 7, 7]]}, "3de23699": {"instruction": "1. Identify all nonzero regions (connected components) in the input grid, ignoring isolated or widely separated duplicate regions.\n2. For each connected nonzero region, find the minimal bounding rectangle that contains all of its nonzero cells.\n3. For each identified bounding rectangle, crop and extract the subgrid corresponding to that rectangle.\n4. Select the subgrid corresponding to the largest or most complex region, generally near the center of the input grid (as in the examples, this is typically a solid shape formed by nonzero values, not isolated cells at the grid's corners).\n5. Replace all nonzero values within the extracted subgrid with the value that was located at the corners of the bounding rectangle or the value that forms the main shape (typically the higher-valued color in the region).\n6. Output the resulting cropped and normalized subgrid as the final output grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[3, 0, 0, 0, 0, 3, 3],\n [3, 0, 0, 0, 0, 0, 0],\n [0, 0, 3, 0, 0, 0, 0],\n [0, 3, 3, 3, 0, 0, 0],\n [0, 0, 3, 0, 0, 3, 0],\n [0, 0, 0, 0, 0, 3, 0],\n [0, 3, 3, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 2, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0]]}, "3e980e27": {"instruction": "1. For each row in the grid, identify all nonzero segments\u2014contiguous groups of nonzero values (non-background color).\n2. For every nonzero segment that is not already bordered by color 4 (above, below, left, and right), add color 4 as a border:\n    a. Add color 4 immediately to the left and right of each segment (if not already present or if the grid border does not prevent it).\n    b. Add color 4 as a new row above and below each segment's row, directly above/below the segment columns (if not already present or if the grid border does not prevent it).\n3. If the segment contains more than one row, ensure the vertical borders of color 4 on the left and right continue for every row of the segment.\n4. Segments consisting of just a single cell should also be bordered on four sides, unless at the grid's edge.\n5. Repeat this process for all nonzero segments in the grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 0],\n [0, 4, 1, 4, 0, 4, 0, 0, 0, 4, 0, 0, 0],\n [0, 4, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 4, 3, 4, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],\n [0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 8, 8, 8, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 3, 8, 0, 0, 2, 1, 0, 0], [0, 1, 2, 0, 0, 8, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 1, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 3, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "3eda0437": {"instruction": "1. For each row in the input grid, scan from left to right to find the longest contiguous sequence of zeros bordered by ones (i.e., a run of one or more zeros with a '1' immediately to its left and right, or at the row boundary). \n2. Among all such bordered zero runs in the grid, select the rightmost run. If there are multiple runs of equal length, select the rightmost one.\n3. Replace all zeros in the selected run with the number 6.\n4. Leave all other cells unchanged.", "test_input": [[0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1]], "predicted_output": "[[0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0],\n [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0],\n [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1],\n [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 6, 6, 1, 0, 0, 0, 1]]", "expected_output": [[0, 6, 6, 6, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0], [1, 6, 6, 6, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0], [0, 6, 6, 6, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1]]}, "3ee1011a": {"instruction": "1. Identify all nonzero cells in the input grid; these will form distinct shapes or lines of unique colors.\n2. Find the minimal bounding box that contains all nonzero cells in the input grid.\n3. Within this bounding box, collect and preserve the color and shape of each type of nonzero segment (for example: single horizontal or vertical lines, blocks, or clusters of each color).\n4. Construct a new square output grid whose size is determined as follows: The smallest dimension of the bounding box needed to just contain each colored segment, plus enough padding to form a nested, centered framed pattern as found in the samples.\n5. Reconstruct the colored segments inside this new square by arranging them into a sequence of nested frames:\n    a. The outermost frame is filled with the color of the horizontal or vertical boundary line from the input (the \"frame\" color).\n    b. The next inner frame is filled with the color of the next unique segment found inside the bounding box, centered and nested within the previous frame.\n    c. Continue nesting frames inward, each with the corresponding color from the next inner input segment, until reaching the centermost area.\n6. For any segment that forms a block within the bounding box (not a thin frame), its color occupies the appropriate interior block within the corresponding nested frame in the output.\n7. If any line from the input is shorter, fill only the area matching its size inside its frame; but keep everything centered so a uniform frame effect is preserved, as in the outputs.\n8. The final output grid should contain only the nested, colored frames or blocks corresponding to the nonzero input segments, in the same order from outer to inner as their positions and colors in the input, forming a concentric/framed pattern.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 0, 0, 0, 0, 0, 0, 0, 6],\n [6, 0, 7, 7, 7, 7, 7, 0, 6],\n [6, 0, 7, 0, 0, 0, 7, 0, 6],\n [6, 0, 7, 0, 8, 0, 7, 0, 6],\n [6, 0, 7, 0, 0, 0, 7, 0, 6],\n [6, 0, 7, 7, 7, 7, 7, 0, 6],\n [6, 0, 0, 0, 0, 0, 0, 0, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8], [8, 6, 6, 6, 6, 6, 8], [8, 6, 7, 7, 7, 6, 8], [8, 6, 7, 3, 7, 6, 8], [8, 6, 7, 7, 7, 6, 8], [8, 6, 6, 6, 6, 6, 8], [8, 8, 8, 8, 8, 8, 8]]}, "3f23242b": {"instruction": "1. Identify the locations of all nonzero cells with value 3 in the input grid. For each such cell, proceed with steps 2\u20137 using its position as the \"center\" (denote the coordinates as (center_row, center_col)).\n2. Create a bounding rectangle around each center (3) that fits the following shapes:\n   - The rectangle for the \"house\" (upper part) is 4 cells tall and 5 cells wide, with the center (3) at its third row and third column (relative to the rectangle).\n   - The \"garage\" (lower part) is a horizontal band 2 cells tall and 7 cells wide, with its top row starting two rows below the center, and centered horizontally under the \"house\".\n3. Fill the horizontal line three rows above center_row and from (center_col\u22122) to (center_col+2) with 5.\n4. For the two rows below that (center_row\u22121 to center_row), at columns (center_col\u22122) and (center_col+2), fill with 2.\n5. Leave the center cell as 3, and set all surrounding positions within the 5\u00d74 box that have not already been colored with 2 or 5 to 0 (if their value is not already set appropriately).\n6. Starting two rows below the center, draw the \"garage\": for rows (center_row+2) and (center_row+3), fill columns (center_col\u22123) to (center_col+3) as follows:\n   - All cells in these rows and columns (except the outermost on each side) are set to 8.\n   - The outer columns (center_col\u22123 and center_col+3) in these two rows are filled with 2.\n7. Ensure that cells outside these house structures remain 0. If multiple 3s present, repeat for each, allowing overlap.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 0, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 2, 8, 8, 8, 2, 0, 0, 2, 2, 8, 8, 8, 2, 0, 0],\n [0, 0, 0, 2, 2, 8, 8, 8, 2, 0, 0, 2, 2, 8, 8, 8, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 8, 8, 8, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 8, 8, 8, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 5, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2], [0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "3f7978a0": {"instruction": "1. Locate the smallest rectangular bounding box that contains all nonzero (non-background) cells in the input grid.\n2. Extract the contents inside this bounding box, creating a new grid with only this region and discarding all rows and columns outside it.\n3. For this extracted region, remove any fully empty rows (all zeros) from the top and bottom, and any fully empty columns from the left and right, if still present.\n4. The resulting grid is the output grid.", "test_input": [[8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 8], [5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 5, 0, 0, 8, 0, 0, 8, 0, 0, 0], [5, 0, 8, 5, 8, 0, 0, 0, 0, 0, 0, 0, 8], [5, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0, 0], [5, 8, 0, 5, 0, 0, 0, 0, 0, 0, 8, 0, 8], [5, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]], "predicted_output": "[[8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0],\n [8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 8],\n [5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 0, 0, 5, 0, 0, 8, 0, 0, 8, 0, 0, 0],\n [5, 0, 8, 5, 8, 0, 0, 0, 0, 0, 0, 0, 8],\n [5, 0, 0, 5, 0, 8, 0, 0, 0, 0, 0, 0, 0],\n [5, 8, 0, 5, 0, 0, 0, 0, 0, 0, 8, 0, 8],\n [5, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[8, 0, 0, 8], [5, 8, 0, 5], [5, 0, 0, 5], [5, 0, 0, 5], [5, 0, 0, 5], [5, 0, 8, 5], [5, 0, 0, 5], [5, 8, 0, 5], [5, 0, 0, 5], [8, 0, 0, 8]]}, "4093f84a": {"instruction": "1. For every cell in the grid, replace all nonzero values except for those in the contiguous central rectangle of value 5 with 0. The rectangle is defined as the area covering all the 5s (it has fixed columns across all rows).\n2. For every cell within the rectangle of 5s, if the corresponding cell in the input grid contains the distinct nonzero value (other than 5, e.g., 4), output a 5 in that position outside the main filled rectangle where the nonzero value was found (i.e., transfer isolated colored 'dots' into specific output positions).\n3. All other cells remain 0, except where, in the rows above and below the main rectangle of 5s, output a 5 in every column where a nonzero (non-5) value appears in the input grid in that row; the rest remain 0.\n4. This results in the nonzero non-5 colored marks being replaced by 5, positioned in the same relative locations around the main rectangle of 5s, with the rest set to 0.", "test_input": [[0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 5, 5, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 4, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 5, 5, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 4, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 5, 0, 0, 5, 5, 0, 0, 5, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 5, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 5, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 0, 5, 0, 5, 5, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 5, 0]]", "expected_output": [[0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0]]}, "40f6cd08": {"instruction": "1. Identify the main colored block on the left half of the grid. In this example, it starts from column 2 and occupies columns 2-14 for the upper half of the grid.\n2. Copy this entire left block (columns 2-14) to the right half of the grid, starting from column 18 and onward, for as many rows as the pattern continues.\n3. Replace the existing right-block area (starting column 18) with this copied block from the left side, thereby overwriting any previous values in this region. The rest of the grid (background zeros) is kept unchanged.\n4. Remove any vertical extension of the block in the left or right that does not exist on the corresponding side: keep the copy's vertical extent to match the original left-side block.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 8, 4, 8, 2, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 2, 2, 8, 4, 4, 4, 4, 8, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "412b6263": {"instruction": "1. Take the input grid and split it horizontally into two rectangular sections: one where the left columns contain '5's (usually left block) and one where the right columns are mostly '7's (right block). The dimensions of these sections vary but the blocks are clear from color.\n2. Create two new subgrids:\n    a. Top block: all rows of the left block, including the rows containing a '9' at their leftmost non-'7' position.\n    b. Bottom block: all rows of the right block, with the rows that contain '9' in the right block section.\n3. For each of these subgrids, construct a new grid (call them transformed blocks) as follows:\n    a. Add a frame of '1's around the block (one row and column on each side).\n    b. On the left and right outermost column (now with the frame), set the corners to '7' and the rest to '1'.\n    c. Keep the block interior as it is (do not change the numbers in the block, preserve their structure).\n4. Repeat this transformation for as many blocks as are implied by the input structure (usually two: top block and bottom block).\n5. Stack the framed, transformed blocks on top of one another, preserving their original order.\n6. Output the resulting stacked grid as the final output.", "test_input": [[5, 5, 5, 5, 7, 7, 7, 7, 7, 7], [5, 5, 5, 5, 7, 7, 5, 5, 5, 5], [5, 5, 5, 5, 7, 7, 5, 5, 5, 5], [9, 5, 5, 5, 7, 7, 5, 5, 5, 5], [7, 7, 7, 7, 7, 7, 9, 5, 5, 5]], "predicted_output": "[[7, 1, 1, 1, 1, 7],\n [1, 5, 5, 5, 5, 1],\n [1, 5, 5, 5, 5, 1],\n [1, 5, 5, 5, 5, 1],\n [7, 9, 5, 5, 5, 7],\n [7, 1, 1, 1, 1, 7],\n [1, 7, 7, 7, 7, 1],\n [1, 7, 7, 7, 7, 1],\n [1, 7, 7, 9, 5, 1],\n [7, 1, 1, 1, 1, 7]]", "expected_output": [[7, 1, 1, 1, 1, 1, 7], [1, 7, 5, 5, 5, 5, 1], [1, 7, 5, 5, 5, 5, 1], [1, 7, 5, 5, 5, 5, 1], [1, 7, 5, 5, 5, 9, 1], [1, 7, 7, 7, 7, 7, 1], [1, 7, 7, 7, 7, 7, 1], [1, 5, 5, 5, 5, 7, 1], [1, 5, 5, 5, 5, 7, 1], [1, 5, 5, 5, 5, 7, 1], [1, 5, 5, 5, 9, 7, 1], [7, 1, 1, 1, 1, 1, 7], [1, 7, 5, 5, 5, 5, 1], [1, 7, 5, 5, 5, 5, 1], [1, 7, 5, 5, 5, 5, 1], [1, 7, 5, 5, 5, 9, 1], [1, 7, 7, 7, 7, 7, 1], [1, 7, 7, 7, 7, 7, 1], [1, 5, 5, 5, 5, 7, 1], [1, 5, 5, 5, 5, 7, 1], [1, 5, 5, 5, 5, 7, 1], [1, 5, 5, 5, 9, 7, 1], [7, 1, 1, 1, 1, 1, 7]]}, "414297c0": {"instruction": "1. Identify and extract the largest contiguous non-background (nonzero) rectangular region in the input grid for both the top half and the bottom half of the grid. The regions are formed by the clusters of 2/7/6/1 and 4/8/3, with filled borders of 4/4/4/4 in the bottom region.\n2. For the top region: Crop the minimal rectangle that contains all nonzero cells in the upper cluster (roughly covering rows 2\u20138 and columns 2\u20137). For the bottom region: Crop the minimal rectangle that contains all nonzero cells in the lower cluster (roughly covering rows 12\u201320 and columns 1\u201316).\n3. For both extracted regions, change every background cell (0) within the cropped rectangle to the border color of that region: For the top region, fill with 2; for the bottom region, fill with 4. Any cell originally containing a value (nonzero) should remain unchanged.\n4. Place the two cropped and processed regions vertically, top region above the bottom region, into a new output grid. Horizontally, left-align both regions so their leftmost columns match.\n5. Remove any remaining padding/background/empty rows or columns so the output grid is tightly fit to the content.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 7, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 2, 2, 0, 0, 0], [0, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 0, 0, 0, 0, 8, 2, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 2, 2, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 2, 7, 2, 2, 2],\n [2, 2, 2, 2, 2, 2],\n [2, 2, 2, 1, 2, 2],\n [2, 2, 2, 2, 2, 2],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 1, 2, 4, 4, 4, 4, 4, 4, 2, 7, 2, 4], [4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 2, 2, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 6, 4, 4, 4, 4, 4], [4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 2, 4], [2, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 2], [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2]]}, "41ace6b5": {"instruction": "1. Identify the rectangular region of the grid that contains the non-background pattern. For these tasks, the background value is 7. The region starts at the first row containing a 2 or a 5 (in these examples, where the patterned structure begins).\n2. For all rows above this pattern region, replace every cell whose value is 7 with 7 (no change), but for the last two rows directly above the start of the non-background region, do the following:  \n    a. Replace every 7 in columns with odd indices (starting at 0) with 8, leaving other 7's unchanged.\n3. In the first pattern row (row containing only 2\u2019s and 7\u2019s in alternating columns), replace every cell with 7 by 8.  \n   For example, convert [2,7,2,7,...,2] \u21d2 [2,8,2,8,...,2].\n4. In the second pattern row (row with 5\u2019s and possibly other values):\n    a. Replace every cell with 7 by 1.\n    b. Leave all 8s unchanged.\n    c. Replace any other value as follows: If a cell is 8 and is on an odd column (starting at 0), leave as is; if it is on an even column, convert to 1.\n5. For all rows below, follow these rules:\n    a. For every cell equal to 8, replace as follows:\n        i. If the column index is even, replace 8 by 9.\n        ii. If the column index is odd, and the row is the one immediately below the processed 5-row, leave as 1.\n        iii. For rows further below, continuing down, alternate 9's and 1's in the odd columns, starting with 9 for the first such row.\n    b. For every 1, leave as 1.\n    c. For every other non-background value (including 7), leave as is.\n6. Result: The pattern region is transformed according to the above steps, with background and untouched regions staying as 7. Odd columns in the region fill with alternately 8, then 9, then 1 as you descend rows; 1\u2019s are preserved or placed in place of 7s or 8s where specified.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2, 7, 2], [5, 8, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5, 7, 5], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7], [7, 8, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7], [7, 8, 7, 7, 7, 8, 7, 8, 7, 8, 7, 7, 7, 8, 7], [7, 1, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7], [7, 1, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 1, 7], [7, 1, 7, 8, 7, 8, 7, 1, 7, 8, 7, 8, 7, 1, 7], [7, 1, 7, 8, 7, 1, 7, 1, 7, 1, 7, 8, 7, 1, 7], [7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7],\n [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2],\n [5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5],\n [7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 8, 7],\n [7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 1, 7],\n [7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 9, 7],\n [7, 9, 7, 9, 7, 9, 7, 1, 7, 9, 7, 9, 7, 1, 7],\n [7, 1, 7, 1, 7, 1, 7, 9, 7, 1, 7, 1, 7, 9, 7],\n [7, 9, 7, 1, 7, 9, 7, 1, 7, 9, 7, 1, 7, 1, 7],\n [7, 1, 7, 9, 7, 1, 7, 9, 7, 1, 7, 9, 7, 1, 7],\n [7, 9, 7, 1, 7, 9, 7, 1, 7, 9, 7, 1, 7, 9, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7], [7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7], [2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2, 8, 2], [5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5], [7, 1, 7, 9, 7, 1, 7, 1, 7, 1, 7, 9, 7, 1, 7], [7, 1, 7, 9, 7, 9, 7, 1, 7, 9, 7, 9, 7, 1, 7], [7, 1, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 1, 7], [7, 1, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7], [7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7], [7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7], [7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7], [7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7]]}, "41e4d17e": {"instruction": "1. For each column in the grid, if any cell in the column contains the value 1, fill every cell in that column that originally contained the value 8 with the value 6, except for the rows that are part of a central block containing 1s (the centrally aligned shape).\n2. For each row, if the row is part of the central block pattern containing 1s (i.e., a distinct horizontal sequence of 1s and/or border 1s), do not modify the value of 8s within those rows.\n3. All 1s remain unchanged in position and value.\n4. All other values (8s not meeting the above criteria) remain unchanged.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 1, 8, 8, 8, 1, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 1, 8, 8, 8, 1, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 1, 8, 8, 8, 1, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 1, 8, 8, 8, 1, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 1, 8, 8, 8, 1, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 1, 8, 8, 8, 1, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 1, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]]", "expected_output": [[8, 8, 8, 8, 8, 6, 8, 8, 6, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 6, 1, 1, 1, 1, 1, 8, 8, 8, 8], [8, 8, 8, 8, 8, 6, 1, 8, 6, 8, 1, 8, 8, 8, 8], [6, 6, 6, 6, 6, 6, 1, 6, 6, 6, 1, 6, 6, 6, 6], [8, 8, 8, 8, 8, 6, 1, 8, 6, 8, 1, 8, 8, 8, 8], [8, 8, 8, 8, 8, 6, 1, 1, 1, 1, 1, 8, 8, 8, 8], [8, 8, 8, 8, 8, 6, 8, 8, 6, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 6, 8, 8, 6, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 6, 8, 8, 6, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 1, 1, 1, 1, 6, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 6, 8, 1, 6, 8, 8, 8, 8, 8, 8], [6, 6, 6, 1, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6], [8, 8, 8, 1, 8, 6, 8, 1, 6, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 1, 1, 1, 1, 6, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 6, 8, 8, 6, 8, 8, 8, 8, 8, 8]]}, "423a55dc": {"instruction": "1. Locate the region containing the nonzero (colored) values in the grid. This is the shape to be transformed. Identify its minimum bounding box.\n2. For each nonzero value within the bounding box, shift its position leftward within its row so that the leftmost nonzero value of that row is moved to the first column of the bounding box, while preserving the relative spacing between nonzero values within the row.\n3. Place the transformed shape back into the original grid at the same rows as the original bounding box, but now left-justified within the bounding box area.\n4. Set all other cells outside this transformed shape (or outside the original nonzero area) to zero.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0, 0],\n [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0],\n [0, 0, 7, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0],\n [0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0],\n [0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "4258a5f9": {"instruction": "1. For each cell in the grid containing the value 5, record its position (row, column).\n2. For every recorded position (i, j), replace the 8 surrounding cells (the 3x3 area centered at (i, j), excluding the center) with the value 1, unless the cell already contains a 5.\n3. Ensure that each cell containing 5 remains unchanged.\n4. All other cells in the grid remain unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 0, 0, 0, 0, 0, 0, 0],\n [1, 5, 1, 0, 0, 0, 0, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 5, 1],\n [0, 0, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 0, 5, 1, 1, 1, 1, 0],\n [0, 0, 0, 1, 1, 1, 1, 1, 0],\n [0, 0, 0, 1, 1, 1, 1, 1, 0],\n [1, 5, 1, 1, 1, 5, 1, 1, 0],\n [1, 1, 1, 0, 0, 1, 0, 0, 0]]", "expected_output": [[1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 5, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 1, 5, 1], [0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 5, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 5, 1, 0, 1, 5, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0]]}, "4290ef0e": {"instruction": "1. Identify the smallest rectangular bounding box that contains all non-background cells of interest. In these tasks, the background can often be inferred as the most common color on the border (here, 1), but look for enclosed objects and diversity in colors/shapes.\n2. Crop the grid down to this minimal bounding rectangle.\n3. Within the cropped region, group visually or spatially distinct blocks of color (shapes, clusters, or bordered regions).\n4. For each group, re-map it into a new fixed spatial arrangement, forming a symmetric, centralized \"badge\" pattern. The components should be reflected and rotated to form corners, edges, and central sections.\n5. When there is a distinctive linear or block pattern (such as an embedded square, cross, or numbers), arrange them so that matching sides are opposite each other, and smaller colored regions are moved to the center, edges, or corners depending on the transformation rules in the training examples.\n6. Remove any unneeded background padding to ensure the output grid is the smallest possible size containing the new arrangement.\n7. If necessary, swap colors of specific shapes/regions in the pattern to match their new positions (for example, if a shape's position in the new badge should correspond to a different color).\n8. Output the transformed, symmetrically arranged, minimal badge-like grid.", "test_input": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 4, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 8, 1, 8, 1, 1, 1, 4, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 4, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 3, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 3, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1], [1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1]], "predicted_output": "[[1, 4, 1, 8, 8, 8, 1, 4, 1],\n [4, 1, 4, 8, 1, 8, 4, 1, 4],\n [1, 4, 1, 8, 8, 8, 1, 4, 1],\n [8, 8, 8, 1, 6, 1, 8, 8, 8],\n [8, 1, 8, 6, 3, 6, 8, 1, 8],\n [8, 8, 8, 1, 6, 1, 8, 8, 8],\n [1, 4, 1, 8, 8, 8, 1, 4, 1],\n [4, 1, 4, 8, 1, 8, 4, 1, 4],\n [1, 4, 1, 8, 8, 8, 1, 4, 1]]", "expected_output": [[4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4], [4, 2, 2, 2, 1, 1, 1, 2, 2, 2, 4], [4, 2, 6, 6, 1, 1, 1, 6, 6, 2, 4], [4, 2, 6, 3, 3, 1, 3, 3, 6, 2, 4], [4, 1, 1, 3, 8, 8, 8, 3, 1, 1, 4], [1, 1, 1, 1, 8, 1, 8, 1, 1, 1, 1], [4, 1, 1, 3, 8, 8, 8, 3, 1, 1, 4], [4, 2, 6, 3, 3, 1, 3, 3, 6, 2, 4], [4, 2, 6, 6, 1, 1, 1, 6, 6, 2, 4], [4, 2, 2, 2, 1, 1, 1, 2, 2, 2, 4], [4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4]]}, "42918530": {"instruction": "1. Divide the input grid into non-overlapping blocks, where each block has a surrounding background border (of color 0) and an inner shape composed of colored numbers (not 0).\n2. For each block, identify all columns and rows that have non-background (non-zero) colors on at least one cell at both the top/bottom (for columns) or left/right (for rows) of the block.\n3. For each such column inside the block, if there is at least one non-background color in both the top and bottom rows (not counting the border), fill all interior cells of that column (between the border and border) with the majority non-background color(s) found at either the top or bottom (but maintain the original pattern if more than one unique color is present).\n4. For each such row inside the block, if there is at least one non-background color in both the leftmost and rightmost columns (not counting the border), fill all interior cells of that row (between the border and border) with the majority non-background color(s) found at either the left or right (but maintain the original pattern if more than one unique color is present).\n5. If a cell inside the block (not on the border) is between two non-background cells of the same color within its row or column, fill that cell with that color, reconstructing \"bars\" of color between border columns/rows as observed from previous blocks.\n6. Leave any cell in the block as background (0) if there is no pattern to fill it according to the above rules (i.e., single cells surrounded by background remain 0).\n7. Repeat for all blocks in the grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 8, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 0, 0, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 0, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0],\n [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0],\n [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0],\n [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0],\n [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0],\n [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0],\n [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0],\n [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0],\n [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0],\n [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0],\n [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0],\n [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0],\n [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0],\n [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0],\n [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0],\n [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0],\n [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 0, 0, 8, 0, 3, 0, 0, 3, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 8, 8, 0, 8, 0, 3, 0, 3, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 0, 0, 0, 1, 0, 8, 0, 8, 0, 8, 0, 3, 3, 0, 0, 3, 0, 7, 0, 7, 0, 7, 0], [0, 1, 1, 1, 1, 1, 0, 8, 8, 8, 8, 8, 0, 3, 3, 3, 3, 3, 0, 7, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 6, 0, 6, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0], [0, 6, 0, 6, 6, 6, 0, 2, 2, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 2, 2, 0, 2, 0], [0, 6, 0, 0, 0, 6, 0, 2, 0, 2, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 2, 0], [0, 6, 6, 6, 6, 6, 0, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 8, 0, 0, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 3, 3, 0, 2, 0, 2, 0, 2, 0], [0, 8, 8, 8, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 0, 3, 0, 3, 0, 2, 2, 2, 0, 2, 0], [0, 8, 0, 8, 0, 8, 0, 4, 0, 0, 0, 4, 0, 3, 3, 0, 0, 3, 0, 2, 0, 2, 0, 2, 0], [0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4, 0, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 0, 0, 8, 0, 2, 0, 2, 0, 2, 0, 6, 0, 6, 0, 6, 0], [0, 2, 2, 2, 0, 2, 0, 8, 8, 8, 0, 8, 0, 2, 2, 2, 0, 2, 0, 6, 0, 6, 6, 6, 0], [0, 2, 0, 2, 0, 2, 0, 8, 0, 8, 0, 8, 0, 2, 0, 2, 0, 2, 0, 6, 0, 0, 0, 6, 0], [0, 2, 2, 2, 2, 2, 0, 8, 8, 8, 8, 8, 0, 2, 2, 2, 2, 2, 0, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "42a15761": {"instruction": "1. For every row in the input grid:\n    a. Identify groups of consecutive rows that are identical (i.e., with the same values in all columns).\n    b. For each group, leave the first row unchanged.\n    c. For each subsequent row in the group, look at all columns where that row contains a 2 between zeros (i.e., the column index is odd and surrounded by zeros or other pattern). Change the value at these columns from 2 to 0, but only in alternate patterning as seen in the output examples: For every other row within the group, substitute 2s that are not part of a filled block (for instance, single 2s surrounded by zeros on either side) with 0.\n2. More simply: For every row (starting from the top):\n    a. If it is identical to the previous row, but the previous row contains a 0 where the current has a 2 (specifically at every second 2 in a break), set the current value at those columns to 0\u2014ensure that for any sequence of repeated rows, the alternation goes 2,0,2,0, etc., at those positions within the sequence.\n3. Leave all other grid values unchanged.", "test_input": [[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]], "predicted_output": "[[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2],\n [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2],\n [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2],\n [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2],\n [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2],\n [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2],\n [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2],\n [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2],\n [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2],\n [2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2],\n [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]", "expected_output": [[2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2], [2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2], [2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2]]}, "42a50994": {"instruction": "1. For each row in the input grid, identify all nonzero (non-background) colored cells.\n2. For each nonzero colored cell, check if it has any other nonzero colored cell in the same row.\n3. If a nonzero colored cell is the only nonzero in its row, keep it as is.\n4. If a nonzero colored cell shares its row with one or more other nonzero colored cells, keep only the first (leftmost) and last (rightmost) nonzero colored cell in that row; set all other nonzero colored cells in that row to zero.\n5. Leave all other (zero) cells unchanged.", "test_input": [[0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3], [3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 3, 0, 0, 0, 0, 3, 3, 3, 0, 0], [3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0], [3, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0], [3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 3, 3]], "predicted_output": "[[0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],\n [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],\n [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],\n [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],\n [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0],\n [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],\n [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0],\n [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0],\n [3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0],\n [3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]]", "expected_output": [[0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3], [3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3], [3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0], [3, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0], [3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 3, 0, 0, 0, 0, 0, 3, 3]]}, "42f14c03": {"instruction": "1. Identify all distinct, non-background (non-8) colored blocks that are grouped together within their own rectangular regions, separated by background (8) cells.\n2. For each such region, crop the smallest possible rectangle containing all its non-background cells.\n3. Extract these rectangular blocks, maintaining their internal arrangement and colors, while disregarding their original positions in the grid.\n4. Stack the extracted blocks vertically in the order in which their topmost, leftmost non-background cell appears reading left-to-right, top-to-bottom in the original grid.\n5. Place each rectangle as a row in the new output grid, starting from the top. If a rectangle is larger than one row, use multiple rows. Add no padding between the blocks.\n6. The final output grid consists only of these stacked regions, tightly packed together, with no surrounding background cells.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 8, 8, 4, 8, 8], [8, 8, 1, 8, 8, 1, 8, 8, 8, 8, 4, 8, 8, 4, 8, 8], [8, 8, 1, 1, 1, 1, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8], [8, 8, 1, 8, 8, 1, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 8, 8, 4, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 8, 8, 4, 8, 8], [8, 8, 8, 2, 2, 2, 2, 2, 2, 8, 4, 8, 8, 4, 8, 8], [8, 8, 8, 8, 8, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 8, 8, 8, 8, 8, 9, 9, 8, 8, 8, 8, 8], [8, 8, 3, 3, 8, 8, 8, 8, 8, 9, 9, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[1, 8, 8, 1, 8, 8, 1, 1, 1, 1, 8, 8, 1],\n [2, 2, 2, 2, 2],\n [2, 8, 8, 2, 2],\n [3, 3],\n [3, 3],\n [9, 9],\n [9, 9]]", "expected_output": [[4, 3, 3, 4], [4, 3, 3, 4], [4, 4, 4, 4], [4, 4, 4, 4], [4, 9, 9, 4], [4, 9, 9, 4], [4, 9, 9, 4]]}, "42f83767": {"instruction": "1. Identify all distinct colored \"blocks\" (connected regions of nonzero, same-valued cells) in the input grid. Each block typically appears as a rectangular (or near-rectangular) region, and some blocks may consist of repeated motifs or shapes.  \n2. For each block, extract its minimal bounding box (the smallest rectangle that contains all its nonzero cells).  \n3. For each unique block/motif, translate that block into a corresponding output pattern as follows:  \n    a. If the block is a **3x3 square block of a single color along an edge** (e.g., `[1,1,0,2,2,0,3,3,0]` in input), then in the output it is mapped to a **3x5 matrix**, where the motif is repeated: three columns and five rows (or vice versa), following the consistent pattern seen in the first two provided pairs.  \n    b. If the block is a \"bar with central zeros,\" map this pattern into the corresponding output bar with zeros in the same relative locations and colored segments in corresponding places as in the examples.\n    c. If the block consists of a matrix of color bordered by zeros (for instance, interleaved with zeros), replace all zeros with the new color and repeat the motif horizontally and vertically to cover a larger output grid, according to the established translation pattern between the grids.  \n4. The **output grid is constructed** by placing all translated blocks in their respective places, preserving their relative layout and order as in the input. If the input contained repeated motifs side by side, the output grid is composed of those translated motifs placed side-by-side in the same order.  \n5. **Pad the output grid** with zeros or the motif\u2019s background color as required, to keep motifs separated, matching the output structure in provided examples.", "test_input": [[1, 1, 0, 2, 2, 0, 3, 3, 0, 8, 8, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5], [1, 1, 0, 2, 2, 0, 3, 3, 0, 8, 8, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 1, 8, 8, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 1, 1, 8, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 8, 8, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 8, 2, 2, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 2, 2, 2, 1, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 1, 1, 1, 1, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 8, 8, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5],\n [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 0, 5, 0, 0, 5, 0, 5, 0, 5, 0, 0],\n [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5, 5, 5, 5, 5],\n [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 2, 2, 2, 1, 1, 1, 8, 8, 8, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 1, 1, 1, 8, 2, 2, 2, 1, 1, 1, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 8, 8, 2, 2, 2, 1, 1, 1, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 2, 2, 1, 1, 1, 8, 8, 8, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 2, 2, 2, 1, 1, 1, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 1, 1, 1, 1, 8, 8, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[2, 2, 2, 2, 2, 2, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3], [0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 3, 0, 3], [2, 2, 2, 2, 2, 2, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3], [2, 2, 2, 1, 1, 1, 1, 1, 1, 8, 8, 8, 2, 2, 2, 1, 1, 1, 3, 3, 3], [0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 2, 1, 0, 0, 3, 0, 3], [2, 2, 2, 1, 1, 1, 1, 1, 1, 8, 8, 8, 2, 2, 2, 1, 1, 1, 3, 3, 3], [1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 2, 2, 2, 1, 1, 1, 3, 3, 3], [1, 0, 0, 1, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 2, 1, 0, 0, 3, 0, 3], [1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 2, 2, 2, 1, 1, 1, 3, 3, 3], [8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 1, 1, 1, 8, 8, 8], [0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 8, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 1, 1, 1, 8, 8, 8], [8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 8, 8, 8], [0, 8, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 8, 0], [8, 8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 8, 8, 8], [8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 2, 2, 2], [0, 8, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 2], [8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2], [3, 0, 3, 3, 0, 3, 3, 0, 3, 0, 8, 0, 0, 8, 0, 0, 0, 2, 0, 0, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2]]}, "4347f46a": {"instruction": "1. Identify all distinct solid-colored rectangular regions in the grid (regions of nonzero constant color surrounded by zeros).\n2. For each such region, determine if it forms a solid-filled rectangle bordered by zeros on all four sides.\n3. For each qualifying region:\n    a. Leave the outermost border of the colored rectangle unchanged.\n    b. For the interior (i.e., remove one \"layer\" from each edge forming a smaller rectangle inside), set all interior cells (not at the border) of the region to zero.\n    c. If the region is more than 2 cells wide and 2 cells tall, ensure that both rows and columns have an unmodified border of one cell thickness.\n4. Repeat for all such regions in the grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0],\n [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0],\n [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0],\n [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "458e3a53": {"instruction": "1. Identify all contiguous rectangular regions in the input grid that are filled entirely with a single unique value, different from the surrounding pattern; these regions act as \"blocks\" (e.g., solid blocks of the same color/number bounded by values that differ).\n2. For each unique block type (distinguished by the value inside the region), extract the value of the block (the unique value filling the region).\n3. Arrange the extracted values into a new grid, where each value occupies one cell. Place these values in the order the blocks appear vertically (top to bottom) and horizontally (left to right) as they occur in the input.\n4. Return the resulting grid of block values as the output.", "test_input": [[2, 3, 6, 1, 8, 7, 9, 1, 6, 3, 2, 3, 6, 9, 8, 7, 8, 1, 6, 3, 9, 3, 6, 1, 8, 7, 8], [3, 2, 3, 6, 1, 8, 9, 8, 1, 6, 3, 2, 3, 9, 1, 8, 7, 8, 1, 6, 9, 2, 3, 6, 1, 8, 7], [6, 3, 2, 3, 6, 1, 9, 7, 8, 1, 6, 3, 2, 9, 6, 1, 8, 7, 8, 1, 9, 3, 2, 3, 6, 1, 8], [1, 6, 3, 2, 3, 6, 9, 8, 7, 8, 1, 6, 3, 9, 3, 6, 1, 8, 7, 8, 9, 6, 3, 2, 3, 6, 1], [8, 1, 6, 3, 2, 3, 9, 1, 8, 7, 8, 1, 6, 9, 2, 3, 6, 1, 8, 7, 9, 1, 6, 3, 2, 3, 6], [7, 8, 1, 6, 3, 2, 9, 6, 1, 8, 7, 8, 1, 9, 3, 2, 3, 6, 1, 8, 9, 8, 1, 6, 3, 2, 3], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 9, 2, 2, 2, 2, 2, 2, 9, 1, 6, 3, 2, 3, 6, 9, 8, 7, 8, 1, 6, 3], [8, 8, 8, 8, 8, 8, 9, 2, 2, 2, 2, 2, 2, 9, 8, 1, 6, 3, 2, 3, 9, 1, 8, 7, 8, 1, 6], [8, 8, 8, 8, 8, 8, 9, 2, 2, 2, 2, 2, 2, 9, 7, 8, 1, 6, 3, 2, 9, 6, 1, 8, 7, 8, 1], [8, 8, 8, 8, 8, 8, 9, 2, 2, 2, 2, 2, 2, 9, 8, 7, 8, 1, 6, 3, 9, 3, 6, 1, 8, 7, 8], [8, 8, 8, 8, 8, 8, 9, 2, 2, 2, 2, 2, 2, 9, 1, 8, 7, 8, 1, 6, 9, 2, 3, 6, 1, 8, 7], [8, 8, 8, 8, 8, 8, 9, 2, 2, 2, 2, 2, 2, 9, 6, 1, 8, 7, 8, 1, 9, 3, 2, 3, 6, 1, 8], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [2, 2, 2, 2, 2, 2, 9, 6, 6, 6, 6, 6, 6, 9, 2, 3, 6, 1, 8, 7, 9, 1, 6, 3, 2, 3, 6], [2, 2, 2, 2, 2, 2, 9, 6, 6, 6, 6, 6, 6, 9, 3, 2, 3, 6, 1, 8, 9, 8, 1, 6, 3, 2, 3], [2, 2, 2, 2, 2, 2, 9, 6, 6, 6, 6, 6, 6, 9, 6, 3, 2, 3, 6, 1, 9, 7, 8, 1, 6, 3, 2], [2, 2, 2, 2, 2, 2, 9, 6, 6, 6, 6, 6, 6, 9, 1, 6, 3, 2, 3, 6, 9, 8, 7, 8, 1, 6, 3], [2, 2, 2, 2, 2, 2, 9, 6, 6, 6, 6, 6, 6, 9, 8, 1, 6, 3, 2, 3, 9, 1, 8, 7, 8, 1, 6], [2, 2, 2, 2, 2, 2, 9, 6, 6, 6, 6, 6, 6, 9, 7, 8, 1, 6, 3, 2, 9, 6, 1, 8, 7, 8, 1], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 9, 1, 8, 7, 8, 1, 6, 9, 2, 3, 6, 1, 8, 7], [1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 9, 6, 1, 8, 7, 8, 1, 9, 3, 2, 3, 6, 1, 8], [1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 9, 3, 6, 1, 8, 7, 8, 9, 6, 3, 2, 3, 6, 1], [1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 9, 2, 3, 6, 1, 8, 7, 9, 1, 6, 3, 2, 3, 6], [1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 9, 3, 2, 3, 6, 1, 8, 9, 8, 1, 6, 3, 2, 3], [1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 9, 6, 3, 2, 3, 6, 1, 9, 7, 8, 1, 6, 3, 2]], "predicted_output": "[[9, 8, 2, 1]]", "expected_output": [[8, 2], [2, 6], [1, 1]]}, "45bbe264": {"instruction": "1. Identify all the non-zero cells in the input grid. For each unique nonzero value, note its value and its coordinate locations.\n2. For each unique color (nonzero value) found:\n    a. Find the coordinates of all cells containing that value.\n    b. Draw a vertical \"stripe\" through all rows at each column where that unique value originally appeared. For example, if the color 8 appears at column c, then for every row r, set (r, c) to 8.\n    c. Draw a horizontal \"stripe\" through all columns at each row where that unique value originally appeared. For example, if the color 8 appears at row r, then for every column c, set (r, c) to 8.\n3. For every intersection where both a vertical and horizontal stripe of the same color cross, replace that cell\u2019s value with 2.\n4. For all positions where original unique nonzero values overlap, but are of different colors, take the value of the last processed color.\n5. The resulting grid is the output.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [4, 4, 4, 2, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0]]}, "4612dd53": {"instruction": "1. For every non-zero cell (cell value 1) in the input grid, check its immediate horizontal neighbors (the cell directly to the left and the cell directly to the right).\n2. If at least one of the horizontal neighbors is also a non-zero cell (value 1), change the current cell's value to 1 (no change).\n3. If both horizontal neighbors are zero or outside the grid, keep the current cell as 1 (unchanged).\n4. If the horizontal neighbors are not both zero, but only one is non-zero, change the empty neighbor (that is, a zero between two non-zero 1s) to 2.\n5. Apply the above process also to the vertical neighbors for each row: if a zero cell has 1s immediately above and below it (in the same column), change that zero to 2.\n6. Repeat this for all rows and columns, so any zero cell that is \"sandwiched\" between two 1s horizontally or vertically is set to 2.\n7. Leave all other cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 2, 1, 1, 2, 1, 2, 1, 1, 0, 0],\n [0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n [0, 0, 1, 2, 1, 0, 1, 0, 2, 1, 1, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n [0, 0, 1, 2, 1, 1, 2, 1, 2, 1, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 1, 1, 2, 1, 2, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 2, 1, 2, 1, 2, 2, 1, 1, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 2, 1, 1, 2, 1, 2, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "46442a0e": {"instruction": "1. Take the input grid and reflect it horizontally (mirror left-to-right).\n2. Place this horizontally reflected grid to the right of the original input grid, creating a grid that is double the width.\n3. Take the grid produced in step 2 and reflect it vertically (mirror top-to-bottom).\n4. Place this vertically reflected grid below the grid from step 2, creating a grid that is double both the width and height of the original grid.", "test_input": [[1, 4, 1], [4, 9, 4], [9, 1, 9]], "predicted_output": "[[1, 4, 1, 1, 4, 1],\n [4, 9, 4, 4, 9, 4],\n [9, 1, 9, 9, 1, 9],\n [9, 1, 9, 9, 1, 9],\n [4, 9, 4, 4, 9, 4],\n [1, 4, 1, 1, 4, 1]]", "expected_output": [[1, 4, 1, 9, 4, 1], [4, 9, 4, 1, 9, 4], [9, 1, 9, 9, 4, 1], [1, 4, 9, 9, 1, 9], [4, 9, 1, 4, 9, 4], [1, 4, 9, 1, 4, 1]]}, "465b7d93": {"instruction": "1. Identify all non-background regions at the top of the grid (above the main \"6\" square border), where the color is different from the border (in this case, looking for a contiguous region of \"9\"s at the top-right).\n2. Remove (replace with background \"7\") all cells that are part of these non-border, non-background regions above the main square.\n3. Locate the largest connected region of \"6\"s that forms a nearly-square border (with inner area of \"7\"s or other values).\n4. Find the area enclosed by this \"6\" border (excluding the border itself).\n5. Fill the interior area, except for the border, with the color of the removed region from step 1 (i.e., fill the \"square\u2019s\" interior with \"9\"s).\n6. Leave all other regions (border, outside the border, bottom border of \"6\"s, and any previously background cells) unchanged.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [6, 6, 6, 6, 6, 6, 6, 6, 7, 7], [6, 7, 7, 7, 7, 7, 7, 6, 7, 7], [6, 7, 7, 7, 7, 7, 7, 6, 7, 7], [6, 7, 7, 7, 7, 7, 7, 6, 7, 7], [6, 7, 7, 7, 7, 7, 7, 6, 7, 7], [6, 7, 7, 7, 7, 7, 7, 6, 7, 7], [6, 7, 7, 7, 7, 7, 7, 6, 7, 7], [6, 6, 6, 6, 6, 6, 6, 6, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [6, 6, 6, 6, 6, 6, 6, 6, 7, 7],\n [6, 9, 9, 9, 9, 9, 9, 6, 7, 7],\n [6, 9, 9, 9, 9, 9, 9, 6, 7, 7],\n [6, 9, 9, 9, 9, 9, 9, 6, 7, 7],\n [6, 9, 9, 9, 9, 9, 9, 6, 7, 7],\n [6, 9, 9, 9, 9, 9, 9, 6, 7, 7],\n [6, 9, 9, 9, 9, 9, 9, 6, 7, 7],\n [6, 6, 6, 6, 6, 6, 6, 6, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6, 6, 6, 7, 7], [6, 9, 9, 9, 9, 9, 9, 6, 7, 7], [6, 7, 7, 7, 7, 7, 9, 6, 7, 7], [6, 7, 7, 7, 7, 7, 9, 6, 7, 7], [6, 7, 7, 7, 7, 7, 9, 6, 7, 7], [6, 7, 7, 7, 7, 7, 9, 6, 7, 7], [6, 7, 7, 7, 7, 7, 9, 6, 7, 7], [6, 6, 6, 6, 6, 6, 6, 6, 7, 7]]}, "469497ad": {"instruction": "1. For the given input grid of size 5x5, expand the grid so each original cell becomes a 4x4 block of the same value, forming a 20x20 grid.\n2. Overlay the expanded 20x20 grid with two stylized diagonals of value '2': one from the top-left to bottom-right and one from the top-right to bottom-left, with thickness 1 cell. The diagonals are centered such that they start and end at the corners and form an 'X' shape perfectly overlaying the expanded grid.\n3. After overlaying the diagonals, for every cell in the expanded grid that the diagonals overwrite, set the cell's value to '2'.\n4. The resulting output grid is a 20x20 grid featuring the expanded input pattern, with diagonal stripes of '2's superimposed, matching the output style seen in the examples.", "test_input": [[0, 6, 6, 0, 8], [0, 6, 6, 0, 8], [0, 0, 0, 0, 1], [0, 0, 0, 0, 7], [8, 8, 1, 7, 9]], "predicted_output": "[[2, 6, 6, 0, 2, 6, 6, 0, 8, 8, 8, 8, 2, 6, 6, 0, 8, 8, 8, 2],\n [0, 2, 6, 0, 8, 2, 6, 0, 8, 8, 8, 8, 0, 2, 6, 0, 8, 8, 2, 8],\n [0, 6, 2, 0, 8, 6, 2, 0, 8, 8, 8, 8, 0, 6, 2, 0, 8, 2, 8, 8],\n [0, 6, 6, 2, 8, 6, 6, 2, 8, 8, 8, 8, 0, 6, 6, 2, 2, 8, 8, 8],\n [0, 6, 6, 0, 2, 6, 6, 0, 2, 0, 0, 0, 2, 6, 6, 0, 1, 1, 1, 2],\n [0, 6, 6, 0, 8, 2, 6, 0, 0, 2, 0, 0, 1, 2, 6, 0, 1, 1, 2, 1],\n [0, 6, 6, 0, 8, 6, 2, 0, 0, 0, 2, 0, 1, 1, 2, 0, 1, 2, 1, 1],\n [0, 6, 6, 0, 8, 6, 6, 2, 0, 0, 0, 2, 1, 1, 1, 2, 2, 1, 1, 1],\n [0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 7, 7, 7, 9, 9, 9, 2],\n [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 7, 2, 7, 7, 9, 9, 2, 9],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 7, 7, 2, 7, 9, 2, 9, 9],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 7, 7, 7, 2, 2, 9, 9, 9],\n [2, 8, 8, 8, 8, 2, 1, 1, 1, 2, 9, 9, 2, 8, 8, 8, 2, 6, 6, 0],\n [8, 2, 8, 8, 1, 1, 2, 1, 1, 9, 2, 9, 8, 2, 8, 8, 0, 2, 6, 0],\n [8, 8, 2, 8, 1, 1, 1, 2, 1, 9, 9, 2, 8, 8, 2, 8, 0, 6, 2, 0],\n [8, 8, 8, 2, 1, 1, 1, 1, 2, 9, 9, 9, 8, 8, 8, 2, 0, 6, 6, 2],\n [2, 8, 8, 8, 2, 1, 7, 7, 2, 9, 9, 9, 2, 6, 6, 0, 2, 6, 6, 0],\n [8, 2, 8, 8, 1, 2, 7, 7, 9, 2, 9, 9, 6, 2, 6, 0, 8, 2, 6, 0],\n [8, 8, 2, 8, 1, 7, 2, 7, 9, 9, 2, 9, 6, 6, 2, 0, 8, 8, 2, 0],\n [8, 8, 8, 2, 1, 7, 7, 2, 9, 9, 9, 2, 6, 6, 0, 2, 8, 8, 8, 2]]", "expected_output": [[0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 1, 1], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 1, 1, 1, 1], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9]]}, "46c35fc7": {"instruction": "1. Identify the non-7 integer subgrid(s) in the input grid. For each such block, process as follows.\n2. For each identified subgrid, cyclically shift all numbers (excluding 7s) within the subgrid along diagonals (\u2198) by one step, wrapping numbers within the subgrid window. The value in each diagonal cell moves to the next cell along the diagonal, and the last diagonal value wraps around to the start of the diagonal.\n3. Retain all 7s (background) in their original positions, both within the subgrid and outside it.\n4. Leave all other parts of the grid unchanged.", "test_input": [[7, 7, 7, 7, 7, 7, 7], [2, 6, 5, 7, 7, 7, 7], [1, 7, 9, 7, 0, 1, 9], [4, 0, 9, 7, 6, 7, 1], [7, 7, 7, 7, 5, 9, 2], [7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7],\n [2, 6, 5, 7, 7, 7, 7],\n [1, 9, 0, 7, 1, 9, 7],\n [4, 0, 9, 7, 6, 1, 9],\n [7, 7, 7, 7, 5, 9, 2],\n [7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7], [5, 1, 9, 7, 7, 7, 7], [0, 7, 6, 7, 9, 6, 2], [2, 9, 4, 7, 9, 7, 1], [7, 7, 7, 7, 0, 1, 5], [7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7]]}, "46f33fce": {"instruction": "1. For each nonzero cell in the input grid, identify its value and position.\n2. For each such nonzero cell of value X (at position (r, c)), create a 4x4 solid block of value X in the output grid:\n    a. The block should occupy rows 4*r to 4*r+3 (inclusive) and columns 4*c to 4*c+3 (inclusive) in the output grid.\n3. The output grid should be large enough to accommodate all such blocks. All other positions in the output grid are filled with 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "470c91de": {"instruction": "1. Identify all contiguous non-background (non-7) regions (blocks) in the input grid.\n2. For each identified block, move it vertically so that its leftmost occupied cell aligns with row index 1 (i.e., just below the first row of background), ensuring that the internal structure of each block is preserved.\n3. For each block, move it horizontally so that its topmost occupied cell aligns with column index 7 (i.e., starting at column 7), again preserving its internal shape.\n4. After relocating all blocks, fill the rest of the grid with the background value (7).\n5. Ensure the overall grid has the same dimensions as the input.", "test_input": [[9, 9, 9, 7, 7, 7, 7, 7, 3, 3, 3], [9, 9, 9, 7, 7, 7, 7, 7, 3, 3, 3], [9, 9, 9, 7, 7, 7, 7, 7, 8, 3, 3], [9, 9, 9, 7, 4, 8, 7, 7, 7, 7, 7], [9, 9, 8, 7, 4, 4, 7, 7, 7, 7, 7], [7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7], [7, 7, 7, 7, 4, 4, 2, 2, 7, 7, 7], [7, 7, 7, 7, 7, 7, 2, 8, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 3],\n [7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 3],\n [7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 3],\n [7, 7, 7, 7, 7, 7, 7, 9, 9, 8, 3],\n [7, 7, 7, 7, 7, 7, 7, 9, 9, 4, 8],\n [7, 7, 7, 7, 7, 7, 7, 8, 4, 4, 4],\n [7, 7, 7, 7, 7, 7, 7, 2, 2, 4, 4],\n [7, 7, 7, 7, 7, 7, 7, 2, 8, 4, 4],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 9, 9, 9, 7, 7, 7, 3, 3, 3, 7], [7, 9, 9, 9, 7, 4, 4, 3, 3, 3, 7], [7, 9, 9, 9, 7, 4, 4, 3, 3, 3, 7], [7, 9, 9, 9, 7, 4, 4, 7, 7, 7, 7], [7, 9, 9, 9, 7, 4, 4, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 2, 2, 7, 7], [7, 7, 7, 7, 7, 7, 7, 2, 2, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "47c1f68c": {"instruction": "1. Remove the central column containing only the repeated nonzero value (in this case, the column of 3s in the center of the grid).\n2. Remove the middle row containing only the repeated nonzero value (in this case, the row of 3s in the center of the grid).\n3. After this, partition the remaining grid into four quadrants.\n4. For each quadrant, rotate it 180 degrees in place.\n5. Reassemble the four rotated quadrants, maintaining their relative positions to form the final grid.", "test_input": [[0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [8, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0],\n [8, 0, 8, 0, 0, 0, 0, 8, 0, 8, 0, 0],\n [0, 0, 8, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0],\n [8, 0, 8, 0, 0, 0, 0, 8, 0, 8, 0, 0],\n [0, 0, 8, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0], [3, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3], [0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [3, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0]]}, "48131b3c": {"instruction": "1. Duplicate the input grid, placing one copy to its right, resulting in a grid that is double the width of the original.\n2. Concatenate the same horizontally duplicated grid beneath the first, resulting in a grid that is double the width and double the height of the original.", "test_input": [[0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 0], [1, 0, 0, 0]], "predicted_output": "[[0, 1, 0, 1, 0, 1, 0, 1],\n [1, 0, 0, 1, 1, 0, 0, 1],\n [0, 0, 1, 0, 0, 0, 1, 0],\n [1, 0, 0, 0, 1, 0, 0, 0],\n [0, 1, 0, 1, 0, 1, 0, 1],\n [1, 0, 0, 1, 1, 0, 0, 1],\n [0, 0, 1, 0, 0, 0, 1, 0],\n [1, 0, 0, 0, 1, 0, 0, 0]]", "expected_output": [[1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1]]}, "484b58aa": {"instruction": "1. For each row in the input grid, check if **any** value in the row is `0`. If the row contains at least one zero, **remove** the entire row from the grid.\n2. After removing all such rows, keep the remaining rows unchanged and in their original order.", "test_input": [[8, 1, 2, 6, 1, 2, 0, 0, 0, 0, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 0, 0, 0, 0, 8, 9, 1, 5, 0, 0, 0, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8], [5, 3, 1, 8, 2, 1, 0, 0, 0, 0, 8, 1, 8, 9, 0, 0, 0, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8], [5, 1, 2, 9, 1, 2, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1], [1, 5, 2, 1, 2, 9, 0, 0, 0, 0, 5, 9, 1, 2, 0, 0, 0, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5], [8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 0, 0, 0, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2], [2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 0, 0, 0, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1], [1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 0, 0, 0, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2], [2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5], [8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8], [5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8], [5, 1, 0, 0, 1, 2, 8, 1, 2, 6, 1, 2, 2, 0, 0, 0, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1], [1, 5, 0, 0, 2, 9, 1, 8, 2, 1, 5, 9, 1, 0, 0, 0, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5], [8, 9, 0, 0, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2], [2, 1, 0, 0, 0, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1], [1, 2, 0, 0, 0, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2], [2, 6, 1, 0, 0, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5], [8, 1, 2, 0, 0, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8], [5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8], [5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1], [1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5], [8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2], [2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1], [1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2], [2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5], [8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8]], "predicted_output": "[[8, 1, 2, 6, 1, 2, 0, 0, 0, 0, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 0, 0, 0, 0, 8, 9, 1, 5, 0, 0, 0, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8], [5, 3, 1, 8, 2, 1, 0, 0, 0, 0, 8, 1, 8, 9, 0, 0, 0, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8], [5, 1, 2, 9, 1, 2, 0, 0, 0, 0, 1, 2, 2, 1, 0, 0, 0, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1], [1, 5, 2, 1, 2, 9, 0, 0, 0, 0, 5, 9, 1, 2, 0, 0, 0, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5], [8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 0, 0, 0, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2], [2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 0, 0, 0, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1], [1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 0, 0, 0, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2], [2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5], [8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8], [5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8], [5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1], [1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5], [8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2], [2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1], [1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2], [2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5], [8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8], [5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8], [5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1], [1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5], [8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2], [2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1], [1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2], [2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5], [8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8]]", "expected_output": [[8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8], [5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8], [5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1], [1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5], [8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2], [2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1], [1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2], [2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5], [8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8], [5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8], [5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1], [1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5], [8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2], [2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1], [1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2], [2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5], [8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8], [5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8], [5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1], [1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5], [8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2], [2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1], [1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2], [2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5, 1, 5, 3, 1, 8, 2, 1, 2, 6, 1, 5, 8, 1, 8, 9, 1, 2, 5], [8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1, 2, 5, 1, 2, 9, 1, 2, 8, 1, 2, 6, 1, 2, 2, 1, 2, 3, 1], [1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8, 9, 1, 5, 2, 1, 2, 9, 1, 8, 2, 1, 5, 9, 1, 2, 2, 1, 8]]}, "4852f2fa": {"instruction": "1. Identify all contiguous clusters of nonzero cells of color 8. For each such cluster, find the minimal bounding rectangle that contains the cluster.\n2. For every row in the input grid, check if it contains a cell of color 4. For each such row, extract the bounding rectangle containing all nonzero cells (color 8 only), if any, from the grid.\n3. For each detected bounding rectangle, extract its section containing the shape of color 8 cells. Store these rectangles in the order their corresponding '4's were found, reading rows left to right, top to bottom.\n4. For each extracted shape, append its grid horizontally to the output grid, in the order determined in step 3, with no extra space or zero-columns between them.\n5. Place these grids into a new grid with as many rows as the extracted pieces, where each row concatenates the corresponding shapes from the input rectangles, maintaining their original coloring and relative order.", "test_input": [[0, 0, 0, 4, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 4, 0, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0]], "predicted_output": "[[8, 8, 8], [8]]", "expected_output": [[0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0]]}, "48634b99": {"instruction": "1. For each column, starting from the top row and moving down, identify the topmost sequence of consecutive cells in the same column containing the value 8.\n2. For all such columns, in the sequence of consecutive 8s starting from the top (or where they first appear), replace every 8 encountered with a 9 **until** the first cell below the sequence is not an 8 or the bottom of the grid is reached.\n3. All other cells remain unchanged.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8], [7, 9, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 8], [7, 9, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7], [7, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7], [7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7], [7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 9],\n [7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 9],\n [7, 7, 7, 7, 9, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 9],\n [7, 7, 7, 7, 9, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 9],\n [7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 9],\n [7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 9],\n [7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 9, 7, 7, 7, 7, 9],\n [7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 9, 7, 7, 7, 7, 9],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 9],\n [7, 9, 7, 7, 9, 7, 7, 9, 7, 7, 9, 7, 7, 7, 7, 9],\n [7, 9, 7, 7, 9, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7],\n [7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7],\n [7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7],\n [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 8, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 8, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 8], [7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 8], [7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7], [7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7], [7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "48d8fb45": {"instruction": "1. Locate the cell containing the special marker (value 5) in the input grid. This cell acts as a reference point.\n2. Identify all nonzero cells (with the target color, excluding the special marker) that together form a distinct shape or cluster in the vicinity of the special marker.\n3. Extract a 3x3 subgrid centered around the special marker (value 5), but only include the cells containing the target color (in this case, value 3). The 3x3 region should be positioned so the special marker was centered (if possible), and you copy the pattern of the nonzero (target color) cells in that region.\n4. In the extracted 3x3 grid, replace any special marker (5) with 0.\n5. Output this 3x3 grid as the final result.", "test_input": [[0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0],\n [0, 0, 3],\n [0, 3, 3]]", "expected_output": [[0, 3, 0], [3, 3, 0], [0, 3, 3]]}, "48f8583b": {"instruction": "1. Create a 9x9 grid filled with zeros.\n2. Starting at the top-left (position (0,0)), copy the input grid into the top-left 3x3 subgrid of the output.\n3. Starting at position (0,3), copy the input grid into the top-center 3x3 subgrid.\n4. Starting at position (3,0), copy the input grid into the middle-left 3x3 subgrid.\n5. Starting at position (3,3), copy the input grid into the center 3x3 subgrid.\n6. Starting at position (6,0), copy the input grid into the bottom-left 3x3 subgrid.\n7. Starting at position (6,3), copy the input grid into the bottom-center 3x3 subgrid.", "test_input": [[9, 7, 9], [9, 9, 7], [7, 9, 7]], "predicted_output": "[[9, 7, 9, 9, 7, 9, 0, 0, 0],\n [9, 9, 7, 9, 9, 7, 0, 0, 0],\n [7, 9, 7, 7, 9, 7, 0, 0, 0],\n [9, 7, 9, 9, 7, 9, 0, 0, 0],\n [9, 9, 7, 9, 9, 7, 0, 0, 0],\n [7, 9, 7, 7, 9, 7, 0, 0, 0],\n [9, 7, 9, 9, 7, 9, 0, 0, 0],\n [9, 9, 7, 9, 9, 7, 0, 0, 0],\n [7, 9, 7, 7, 9, 7, 0, 0, 0]]", "expected_output": [[0, 0, 0, 9, 7, 9, 0, 0, 0], [0, 0, 0, 9, 9, 7, 0, 0, 0], [0, 0, 0, 7, 9, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 9, 7, 9], [0, 0, 0, 0, 0, 0, 9, 9, 7], [0, 0, 0, 0, 0, 0, 7, 9, 7], [9, 7, 9, 0, 0, 0, 9, 7, 9], [9, 9, 7, 0, 0, 0, 9, 9, 7], [7, 9, 7, 0, 0, 0, 7, 9, 7]]}, "4938f0c2": {"instruction": "1. Identify the smallest non-zero pattern of 2s in the top half of the grid that is both vertically and horizontally isolated (i.e., a \"motif\" of 2s not touching other nonzero shapes).\n2. Copy this motif and paste it into the bottom half of the grid, mirrored vertically across the horizontal center of the grid. Ensure it is aligned so that its vertical placement is equidistant from the center as its original.\n3. Do not alter any other parts of the grid, including the 3s or the 0s, and do not add or remove any nonzero elements except as part of the mirrored motif.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "494ef9d7": {"instruction": "1. For each row in the grid, starting from the left, locate every nonzero cell.\n2. For each nonzero cell, check if it is immediately followed (to the right) by one or more zeros, and then another nonzero cell.\n3. If such a pattern is found (nonzero, one or more zeros, nonzero), move the last nonzero cell in this sequence into the leftmost zero position after the first nonzero, shifting any zeros and preserving the order of the other elements.\n4. Repeat this process for every row, ensuring only a single move is made per eligible pattern in each row at a time.\n5. All other grid values are left unchanged.", "test_input": [[0, 7, 0, 4], [6, 0, 8, 0], [8, 0, 1, 0], [0, 4, 0, 3]], "predicted_output": "[[0, 7, 4, 0],\n [6, 8, 0, 0],\n [8, 1, 0, 0],\n [0, 4, 3, 0]]", "expected_output": [[0, 7, 4, 0], [6, 0, 8, 0], [8, 1, 0, 0], [0, 4, 0, 3]]}, "496994bd": {"instruction": "1. Identify the contiguous nonzero rows starting from the top of the grid. Preserve the order of these rows at the top of the output grid.\n2. Count how many nonzero rows were present at the top in the input grid (let this number be N).\n3. Copy the next series of zero rows that follow these nonzero rows into the output grid, maintaining their order and position directly below the preserved nonzero rows.\n4. In the remaining spaces at the bottom of the grid, insert the nonzero rows from the top in reverse order. That is, starting with the last nonzero row from the top, followed by the preceding ones, filling the bottom N rows of the grid.", "test_input": [[3, 3, 3, 3, 3, 3], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], "predicted_output": "[[3, 3, 3, 3, 3, 3],\n [5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5],\n [0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0],\n [5, 5, 5, 5, 5, 5],\n [3, 3, 3, 3, 3, 3]]", "expected_output": [[3, 3, 3, 3, 3, 3], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [3, 3, 3, 3, 3, 3]]}, "49d1d64f": {"instruction": "1. Create a new grid with dimensions (input_rows + 2) x (input_cols + 2). Initialize all cells to 0.\n2. Copy the original input grid into the center of the new grid, starting from position (1, 1) in the new grid.\n3. For each row in the input grid, copy its first element to the first column (column 0) of the output grid in the corresponding row+1.\n4. For each row in the input grid, copy its last element to the last column (column input_cols+1) of the output grid in the corresponding row+1.\n5. For each column in the input grid, copy its first element to the first row (row 0) of the output grid in the corresponding col+1.\n6. For each column in the input grid, copy its last element to the last row (row input_rows+1) of the output grid in the corresponding col+1.\n7. The cell at position (0,0), (0,output_cols-1), (output_rows-1,0), and (output_rows-1,output_cols-1) remain as 0.", "test_input": [[2, 8], [1, 4], [3, 4]], "predicted_output": "[[0, 2, 8, 0],\n [1, 2, 8, 4],\n [3, 1, 4, 4],\n [0, 3, 4, 0]]", "expected_output": [[0, 2, 8, 0], [2, 2, 8, 8], [1, 1, 4, 4], [3, 3, 4, 4], [0, 3, 4, 0]]}, "4a1cacc2": {"instruction": "1. Locate the single cell in the grid whose value is not the majority background color (in this case, '8'). Let this value be V, and let its position be (r, c).\n2. Overwrite a 3x3 block of cells, with the top-left corner at (r, c), replacing them all with the value V. If any part of the 3x3 block would exceed the grid boundaries, only fill cells that exist within the grid.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 4, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 4, 4],\n [8, 8, 8, 8, 8, 8, 8, 8, 4, 4],\n [8, 8, 8, 8, 8, 8, 8, 8, 4, 4]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 4, 4], [8, 8, 8, 8, 8, 8, 8, 8, 4, 4], [8, 8, 8, 8, 8, 8, 8, 8, 4, 4]]}, "4acc7107": {"instruction": "1. Remove all rows from the top of the grid that do not contain any nonzero values, until you reach the first row with at least one nonzero value.\n2. Remove all rows from the bottom of the grid that do not contain any nonzero values, until you reach the last row with at least one nonzero value.\n3. Remove all columns from the left of the grid that do not contain any nonzero values, until you reach the first column with at least one nonzero value.\n4. Remove all columns from the right of the grid that do not contain any nonzero values, until you reach the last column with at least one nonzero value.\n5. Divide the resulting grid into two groups of nonzero blocks, each of a different color (i.e., connectivities of each color), ignoring zero rows and columns between the blocks.\n6. For each distinct color block, slide it downwards in the grid (maintaining its columns) until the lowest nonzero cell of the block reaches the bottommost row of the grid or just above the lowest row already occupied by another color block.\n7. If there are multiple blocks of the same color in separate areas, treat each as a group and slide them together as in step 6.\n8. After repositioning, fill any empty spaces above the moved blocks with zeros to maintain the original grid height and width.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 3, 3, 3, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 0, 2, 2, 2, 0], [0, 0, 0, 3, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 2, 2, 2, 2, 0, 0],\n [0, 0, 0, 0, 0, 3, 3, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 3, 3, 0, 0, 0, 0],\n [0, 3, 3, 3, 3, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 0, 0, 0, 3, 3, 0], [0, 0, 0, 2, 0, 3, 3, 3, 3, 0], [0, 0, 2, 2, 0, 0, 0, 3, 0, 0]]}, "4b6b68e5": {"instruction": "1. For each region in the grid where a colored border forms a closed or nearly closed shape (i.e., a rectangle or rounded rectangle made from a single color such as 2, 3, 7, etc.), fill the interior area surrounded by that border with a corresponding \"fill color\" that matches the general fill color from the training examples:\n    - For borders of `2`, fill the interior with the color of `6` (or the color matching the example output for that border from previous examples, which is typically a neighboring color seen inside similar bordered regions; for `2` it was `3`, `8`, or `6` in earlier examples).\n    - For borders of `3`, fill the interior with `6` (as in the third example).\n    - For borders of `7`, fill the interior with `0` (as in the last example, the inside of the `7` border remains `0` except where original content persists).\n2. While filling, ensure that any non-border, non-background cells inside each border (i.e., numbers that are not the border color or 0) are also overwritten with the fill color. Do not overwrite border pixels.\n3. Preserve the original content of the rest of the grid, including any shapes or patterns outside the filled bordered regions.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1], [0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 2, 0, 6, 0, 0, 8, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 6, 0, 3, 0, 0], [0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 3, 0, 0, 0, 0, 8, 0, 3, 0, 0], [0, 2, 0, 0, 1, 0, 6, 0, 0, 0, 0, 2, 0, 0, 3, 8, 0, 0, 0, 0, 0, 3, 0, 0], [0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0], [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 3, 3, 0, 1],\n [0, 0, 0, 2, 6, 6, 6, 6, 6, 2, 2, 2, 0, 0, 0, 0, 3, 6, 6, 6, 6, 3, 0, 0],\n [0, 0, 0, 2, 6, 6, 6, 6, 6, 6, 6, 2, 0, 0, 0, 0, 3, 6, 6, 6, 6, 3, 0, 0],\n [0, 0, 0, 2, 6, 6, 1, 6, 6, 6, 6, 2, 0, 0, 3, 3, 3, 6, 6, 6, 6, 3, 0, 0],\n [0, 2, 2, 2, 6, 6, 6, 6, 6, 6, 1, 2, 0, 0, 3, 6, 6, 6, 6, 6, 6, 3, 0, 0],\n [0, 2, 6, 6, 1, 6, 6, 6, 6, 6, 6, 2, 0, 0, 3, 6, 6, 6, 6, 6, 6, 3, 0, 0],\n [0, 2, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 0, 0, 3, 6, 6, 6, 6, 6, 6, 3, 0, 0],\n [0, 2, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 0, 0, 3, 6, 6, 6, 6, 1, 6, 3, 0, 0],\n [0, 2, 2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 0, 0, 3, 6, 6, 6, 6, 6, 6, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 3, 0, 0],\n [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n [0, 0, 8, 0, 4, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0],\n [0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 7, 0, 2, 0, 1, 0, 7, 0, 0],\n [0, 0, 8, 0, 0, 8, 8, 8, 8, 0, 0, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0],\n [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 3, 8, 8, 8, 8, 3, 0, 0], [0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 3, 3, 8, 8, 8, 8, 3, 0, 0], [0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 8, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 4, 4, 4, 4, 4, 4, 4, 4, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 4, 4, 8, 8, 8, 8, 4, 4, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "4be741c5": {"instruction": "1. For each row in the input grid, identify all unique colors present (excluding repeats within the same row).\n2. Starting from the top row, find and record the first row where a new color (not previously recorded in earlier rows) appears as the majority or dominant color. Add that color to a result list, in the order they appear vertically down the grid.\n3. Continue moving downward, each time a new dominant color appears (compared to the previously recorded ones), add it to the result list.\n4. Once all distinct dominant color regions have been found from top to bottom, construct an output grid as a single column, where each row contains one of the recorded dominant colors in the order they appeared from top to bottom.", "test_input": [[3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 8, 8], [3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 8, 8, 8], [3, 3, 3, 3, 3, 2, 2, 1, 1, 1, 8, 8, 8, 8], [3, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 8, 8, 8], [3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 8, 8], [3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 8], [3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 8, 8], [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 8, 8, 8], [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 8, 8], [3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 8, 8], [3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 8, 8, 8], [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 8, 8], [3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 8, 8], [3, 3, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 8, 8]], "predicted_output": "[[3],\n [2],\n [1],\n [8]]", "expected_output": [[3, 2, 1, 8]]}, "4c177718": {"instruction": "1. Remove all rows that are completely filled with the same nonzero value (e.g., the row of 5s).\n2. After removing the uniform row, split the grid into two horizontal sections: the section above the removed row (if any), and the section below (if any).\n3. Swap the order of these two sections: move the rows below the removed row to the top, and the rows above (if any) to the bottom, maintaining their internal order within each section.\n4. For each colored group (contiguous block of nonzero cells of the same value) that was originally located on a certain side of the removed row, move it to the corresponding position in the new section\u2014preserving the spatial relationships between groups, and maintaining their shape and color.\n5. Set all other cells to 0 (background), except for the moved groups from the previous step.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 0, 0], [0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 3, 0, 3, 0, 0], [0, 0, 1, 1, 1, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 0, 0],\n [0, 0, 1, 1, 0, 0, 0, 2, 0, 0, 3, 0, 3, 0, 0],\n [0, 0, 1, 1, 1, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "4c4377d9": {"instruction": "1. Take the input grid and reverse the order of its rows (i.e., flip it vertically).\n2. Append a copy of this vertically reversed grid directly beneath itself, creating a new grid that is twice the number of rows as the original, but with the same number of columns.", "test_input": [[4, 4, 9, 9], [4, 4, 4, 4], [4, 4, 9, 9]], "predicted_output": "[[4, 4, 9, 9],\n [4, 4, 4, 4],\n [4, 4, 9, 9],\n [4, 4, 9, 9],\n [4, 4, 4, 4],\n [4, 4, 9, 9]]", "expected_output": [[4, 4, 9, 9], [4, 4, 4, 4], [4, 4, 9, 9], [4, 4, 9, 9], [4, 4, 4, 4], [4, 4, 9, 9]]}, "4c5c2cf0": {"instruction": "1. Identify the nonzero colored region(s) in the lower part of the grid (bottom rows). These are the patterns that need to be copied\u2014look for any contiguous or related structure. In this example, the pattern of 4s (color 4) in the bottom right quadrant is the region of interest. \n2. For each colored region found in the lower part of the grid (excluding the upper part where there are only zeros), reflect this region vertically over the horizontal middle of the entire grid, so a copy appears symmetrically above the original, equidistant from the center. Overlay this copy onto the corresponding upper rows, preserving their structure and offset. \n3. For each colored region found in the right part of the grid (excluding the left part where there are only zeros), reflect this region horizontally over the vertical middle of the entire grid, so a copy appears symmetrically to the left of the original, equidistant from the center. Overlay this copy onto the corresponding leftmost columns, preserving their structure and offset. \n4. Repeat steps 2 and 3 for all uniquely colored regions present (not just color 4, but any distinct nonzero values), and ensure that the original colored regions remain, with their new symmetric copies added in the corresponding mirrored locations.\n5. Any nonzero elements not included in the copied/mirrored process remain in their places. Do not alter or erase any artifacts from the original grid outside of the mirrored/copy regions.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 4, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 7, 0, 7, 0, 4, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "4cd1b7b2": {"instruction": "1. For each row in the grid, replace all zeroes with the missing numbers from 1 to N in that row, where N is the number of columns. Each row must contain exactly the numbers 1 to N once.\n2. Distribute the missing numbers in the zero positions such that no number is repeated in the same column (i.e., after filling, each column also contains the numbers 1 to N exactly once).\n3. For each row, determine which numbers from 1 to N are not already present (do not count zeroes).\n4. For each zero in the row, fill it with one of the missing numbers, choosing so that it avoids creating any duplicate within its column.\n5. Repeat this process for all rows until all zeroes are filled and the resulting grid is a Latin square (each number 1 to N appears exactly once per row and per column).", "test_input": [[0, 1, 2, 3], [0, 3, 1, 0], [3, 0, 4, 1], [0, 4, 0, 2]], "predicted_output": "[[4, 1, 2, 3],\n [2, 3, 1, 4],\n [3, 2, 4, 1],\n [1, 4, 3, 2]]", "expected_output": [[4, 1, 2, 3], [2, 3, 1, 4], [3, 2, 4, 1], [1, 4, 3, 2]]}, "4df5b0ae": {"instruction": "1. Remove all rows from the grid that contain only a single, contiguous non-background region at their respective positions in the original input grid, until only a solid \"background\" grid remains (using the most common value in the middle area as the new background; here, 7).\n2. Place the previously removed distinct regions (blocks with the same colors/values but previously at different positions) into the lower right corner of the new grid. Do this by:\n   a. For each unique non-background region from the input, move and stack them in the output grid, bottom-aligned, right-aligned, and in the order found from bottom to top (preserving their shapes).\n   b. Ensure that each region keeps its original shape, but is re-positioned so that the bottom-rightmost cell of each region is in the new bottom-right corner of the output grid, then stack subsequent regions to the left and above as needed.\n3. Fill all remaining grid cells with the background value (7) to create a uniformly filled grid except for the relocated regions in the lower-right.", "test_input": [[7, 7, 1, 7, 7, 7, 4, 4, 7, 7], [7, 7, 1, 1, 7, 7, 4, 4, 7, 7], [7, 7, 1, 1, 7, 7, 4, 4, 7, 7], [7, 7, 7, 7, 7, 7, 4, 4, 7, 7], [7, 7, 7, 7, 7, 7, 1, 7, 7, 7], [7, 7, 7, 7, 7, 7, 1, 7, 7, 7], [7, 7, 7, 7, 6, 7, 1, 7, 7, 7], [7, 7, 7, 6, 6, 7, 1, 7, 7, 7], [7, 7, 7, 7, 7, 7, 1, 7, 7, 7], [7, 7, 7, 7, 7, 7, 1, 1, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 1, 1],\n [7, 7, 7, 7, 7, 7, 7, 1, 1, 7],\n [7, 7, 7, 7, 7, 7, 4, 4, 7, 7],\n [7, 7, 7, 7, 7, 4, 4, 7, 7, 7],\n [7, 7, 7, 7, 6, 6, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 1, 7, 7, 7, 7, 7], [7, 7, 7, 7, 1, 7, 7, 7, 7, 7], [7, 7, 7, 7, 1, 7, 4, 4, 7, 7], [7, 7, 1, 7, 1, 7, 4, 4, 7, 7], [7, 6, 1, 1, 1, 7, 4, 4, 7, 7], [6, 6, 1, 1, 1, 1, 4, 4, 7, 7]]}, "4e45f183": {"instruction": "1. Identify all contiguous blocks of nonzero cells that are separated horizontally by one or more columns (e.g., \"sections\" separated by a column of zeroes), if any exist.\n2. Within each such block/section (ignoring rows and columns made entirely of zero), record the color that is most numerous (i.e., the majority nonzero color), excluding zeros.\n3. For each nonzero cell within each section, if it does **not** match the majority color of its section, change it to the majority color for that section.\n4. Leave all zero (background) cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 1, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 1, 0, 4, 4, 1, 4, 4, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 1, 1, 0, 4, 1, 1, 1, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 1, 1, 0, 4, 1, 1, 1, 4, 0, 1, 1, 4, 1, 1, 0], [0, 4, 4, 4, 4, 1, 0, 4, 4, 1, 4, 4, 0, 1, 4, 4, 4, 1, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 1, 4, 4, 4, 1, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 1, 1, 4, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 1, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 1, 0], [0, 1, 1, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 1, 1, 0], [0, 1, 4, 4, 4, 4, 0, 1, 4, 4, 4, 4, 0, 4, 4, 4, 4, 1, 0], [0, 4, 4, 4, 4, 4, 0, 1, 1, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 1, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 1, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 4, 4, 4, 0, 4, 1, 1, 1, 4, 0, 4, 4, 4, 1, 1, 0], [0, 1, 4, 4, 4, 4, 0, 4, 4, 1, 4, 4, 0, 4, 4, 4, 4, 1, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 1, 1, 4, 1, 1, 0, 4, 4, 4, 4, 4, 0], [0, 1, 4, 4, 4, 4, 0, 1, 4, 4, 4, 1, 0, 4, 4, 4, 4, 1, 0], [0, 1, 1, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 1, 1, 0], [0, 1, 4, 4, 4, 4, 0, 1, 4, 4, 4, 1, 0, 4, 4, 4, 4, 1, 0], [0, 4, 4, 4, 4, 4, 0, 1, 1, 4, 1, 1, 0, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0], [0, 1, 4, 4, 4, 4, 0, 4, 4, 1, 4, 4, 0, 4, 4, 4, 4, 1, 0], [0, 1, 1, 4, 4, 4, 0, 4, 1, 1, 1, 4, 0, 4, 4, 4, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "4e469f39": {"instruction": "1. For each contiguous block of nonzero cells shaped like a \"rectangle with a notch\" (i.e., a shape with 5's roughly forming a rectangle with a missing area in one column/row), identify the bounding rectangle that contains all the nonzero (5) cells for the shape.\n2. For each such shape, fill the interior space of the bounding rectangle with the color 2, replacing any 0's inside the rectangle with 2's, except for locations already occupied by a nonzero color (such as 5).\n3. For the same rectangle, extend the filled region of color 2 outside of the bounding rectangle as a single contiguous bar, placed either as a row above or column to the left of the shape so that this bar is as long as the width (if above) or height (if left) of the shape. Place this bar adjacent to the rectangle's side, filling previously 0 cells with 2.\n4. Repeat steps 1-3 for all such shapes present in the grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 0, 5, 0, 0, 0, 0, 0], [0, 5, 0, 0, 5, 0, 0, 0, 0, 0], [0, 5, 0, 0, 5, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 5, 0], [0, 0, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 0]], "predicted_output": "[[0, 2, 2, 2, 2, 0, 0, 2, 2, 2],\n [0, 5, 5, 2, 5, 0, 0, 0, 0, 0],\n [0, 5, 2, 2, 5, 0, 0, 0, 0, 0],\n [0, 5, 2, 2, 5, 0, 0, 0, 0, 0],\n [0, 5, 5, 5, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 5, 5, 2, 5, 2],\n [0, 0, 0, 0, 0, 5, 2, 2, 5, 2],\n [0, 0, 0, 0, 0, 5, 5, 5, 5, 2]]", "expected_output": [[2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 5, 5, 2, 5, 0, 0, 0, 0, 0], [0, 5, 2, 2, 5, 0, 0, 0, 0, 0], [0, 5, 2, 2, 5, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 5, 5, 2, 5, 0], [0, 0, 0, 0, 0, 5, 2, 2, 5, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 0]]}, "4e7e0eb9": {"instruction": "1. Identify all 3x3 colored blocks in the grid where the center block is not a border or separating color (like 0 or 5). These colored blocks are flanked by border/line colors (such as 4 in the vertical center and 5 as block dividers).\n2. For each distinct 3x3 block region, replace every non-border color (e.g., 1, 2, 3, 6, 8) with the color of the adjacent 3x3 block directly to its right if it exists, or else leave it unchanged if not (bordering area).\n3. Keep all border/separating lines and cells such as 0, 4, 5 the same everywhere in the grid.\n4. Leave any solid lines of a single number stretching horizontally or vertically (e.g., entirely 5s or 4s) unmodified.", "test_input": [[0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 4, 3, 3, 3, 0, 5, 0, 6, 6, 6, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 4, 3, 3, 3, 0, 5, 0, 6, 6, 6, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 4, 3, 3, 3, 0, 5, 0, 6, 6, 6, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 4, 5, 5, 5, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 4, 4, 4, 0, 1, 1, 1, 0], [0, 3, 3, 3, 4, 5, 5, 5, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 4, 4, 4, 0, 1, 1, 1, 0], [0, 3, 3, 3, 4, 5, 5, 5, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 4, 4, 4, 0, 1, 1, 1, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 8, 8, 8, 0, 5, 5, 5, 0], [0, 2, 2, 2, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 8, 8, 8, 0, 5, 5, 5, 0], [0, 2, 2, 2, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 8, 8, 8, 0, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 8, 8, 8, 0, 5, 0, 1, 1, 1, 0, 6, 6, 6, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 8, 8, 8, 0, 5, 0, 1, 1, 1, 0, 6, 6, 6, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 8, 8, 8, 0, 5, 0, 1, 1, 1, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 3, 3, 4, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0],\n [0, 3, 3, 3, 4, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0],\n [0, 3, 3, 3, 4, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0],\n [0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 1, 1, 4, 1, 1, 1, 0, 5, 0, 4, 4, 4, 0, 4, 4, 4, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0],\n [0, 1, 1, 1, 4, 1, 1, 1, 0, 5, 0, 4, 4, 4, 0, 4, 4, 4, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0],\n [0, 1, 1, 1, 4, 1, 1, 1, 0, 5, 0, 4, 4, 4, 0, 4, 4, 4, 0, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0],\n [0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 1, 1, 0, 8, 8, 8, 0, 5, 0, 8, 8, 8, 0, 8, 8, 8, 0, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0],\n [0, 1, 1, 1, 0, 8, 8, 8, 0, 5, 0, 8, 8, 8, 0, 8, 8, 8, 0, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0],\n [0, 1, 1, 1, 0, 8, 8, 8, 0, 5, 0, 8, 8, 8, 0, 8, 8, 8, 0, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [0, 8, 8, 8, 0, 1, 1, 1, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0],\n [0, 8, 8, 8, 0, 1, 1, 1, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0],\n [0, 8, 8, 8, 0, 1, 1, 1, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 4, 1, 1, 1, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0, 5, 0, 4, 4, 4, 0, 4, 4, 4, 0], [0, 3, 3, 3, 4, 1, 1, 1, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0, 5, 0, 4, 4, 4, 0, 4, 4, 4, 0], [0, 3, 3, 3, 4, 1, 1, 1, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0, 5, 0, 4, 4, 4, 0, 4, 4, 4, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 4, 3, 3, 3, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0, 5, 0, 4, 4, 4, 0, 4, 4, 4, 0], [0, 5, 5, 5, 4, 3, 3, 3, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0, 5, 0, 4, 4, 4, 0, 4, 4, 4, 0], [0, 5, 5, 5, 4, 3, 3, 3, 0, 5, 0, 6, 6, 6, 0, 6, 6, 6, 0, 5, 0, 4, 4, 4, 0, 4, 4, 4, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 2, 2, 2, 0, 5, 0, 8, 8, 8, 0, 8, 8, 8, 0, 5, 0, 1, 1, 1, 0, 6, 6, 6, 0], [0, 2, 2, 2, 0, 2, 2, 2, 0, 5, 0, 8, 8, 8, 0, 8, 8, 8, 0, 5, 0, 1, 1, 1, 0, 6, 6, 6, 0], [0, 2, 2, 2, 0, 2, 2, 2, 0, 5, 0, 8, 8, 8, 0, 8, 8, 8, 0, 5, 0, 1, 1, 1, 0, 6, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 2, 2, 2, 0, 2, 2, 2, 0, 5, 0, 8, 8, 8, 0, 8, 8, 8, 0, 5, 0, 8, 8, 8, 0, 5, 5, 5, 0], [0, 2, 2, 2, 0, 2, 2, 2, 0, 5, 0, 8, 8, 8, 0, 8, 8, 8, 0, 5, 0, 8, 8, 8, 0, 5, 5, 5, 0], [0, 2, 2, 2, 0, 2, 2, 2, 0, 5, 0, 8, 8, 8, 0, 8, 8, 8, 0, 5, 0, 8, 8, 8, 0, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "4f537728": {"instruction": "1. Identify the unique color (other than 0 and 1) present in the input grid. Call this the \"injected color\" (in the test input, this is 8).\n2. Locate all contiguous 2x2 blocks of this \"injected color\". In the test input, this is the 2x2 block of 8s at rows 5-6 and columns 15-16.\n3. For every row and column of the grid:\n    a. If the row contains a 2x2 block of the injected color, change all 1s in that row to the injected color.\n    b. If the column contains a 2x2 block of the injected color, change all 1s in that column to the injected color.\n4. For all cells within any 2x2 areas that were injected (where the injected color was originally present), ensure those cells remain set to the injected color.\n5. For all other grid values, leave them unchanged.", "test_input": [[1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8],\n [8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8], [8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 8, 8, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "4ff4c9da": {"instruction": "1. For each row, identify groups of consecutive rows that are identical. Only keep the first occurrence of each such group, and remove all subsequent duplicate rows that are immediately below. This removes immediately vertically-duplicated rows.\n2. Within the resulting grid, for every row: \n   - Scan for regions where the number 8 appears.\n   - For every vertical alignment (column location) where an 8 appears in any row, overwrite the cell in all other rows of the same \"section\" (i.e., block of rows between double horizontal bands or distinct patterns) at that column with an 8, mirroring how 8s expand in the example outputs. \n   - Specifically, in any block where a row contains multiple 8s, turn all matching columns in the above and below \"corresponding\" rows in the section or block to 8, so all aligned positions have an 8.\n3. In addition, if a full row is a repeat of a prior section\u2019s \"boundary\" row (e.g., a band of a single value or specific pattern), do not remove. Only remove consecutive repeats.\n4. Outputs, after these two filters, display the same sections as input but without consecutive duplicate rows and with the 8s \u201cbroadcasted\u201d vertically and horizontally as shown in the training set.", "test_input": [[0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 8, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1], [2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 1, 2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 8, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "predicted_output": "[[0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 8, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1],\n [2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1],\n [1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [2, 2, 1, 2, 2, 1, 2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1],\n [0, 0, 1, 1, 2, 1, 0, 1, 1, 8, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1],\n [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1],\n [2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1],\n [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]", "expected_output": [[0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 8, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 2, 1, 1], [2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 1, 2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 8, 8, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 8, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 8, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 8, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 8, 1, 0, 0, 1, 2, 0, 1], [2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 2, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 1, 2, 2, 1, 2, 2, 1, 8, 8, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 8, 8, 1], [0, 0, 1, 1, 2, 1, 0, 1, 1, 8, 0, 1, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 8, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}, "5034a0b5": {"instruction": "1. For each row (excluding the first and last), shift all values between the first and last elements one cell to the right, wrapping the last inner element around to the first inner position of the row.\n2. Apply this shifting only to the inner part of each row\u2014meaning leave the first and last elements of every row unchanged.\n3. Ensure the first and last rows remain unchanged.", "test_input": [[4, 5, 5, 5, 5, 5, 5, 5, 4], [3, 4, 4, 1, 4, 4, 4, 4, 9], [3, 4, 4, 9, 4, 9, 4, 5, 9], [3, 4, 4, 4, 8, 4, 4, 4, 9], [3, 9, 4, 2, 4, 4, 4, 4, 9], [3, 3, 4, 4, 4, 4, 4, 3, 9], [3, 4, 2, 4, 4, 4, 8, 4, 9], [3, 4, 3, 4, 4, 4, 4, 7, 9], [4, 2, 2, 2, 2, 2, 2, 2, 4]], "predicted_output": "[[4, 5, 5, 5, 5, 5, 5, 5, 4],\n [3, 4, 4, 4, 1, 4, 4, 4, 9],\n [3, 4, 4, 4, 9, 4, 9, 4, 9],\n [3, 4, 4, 8, 4, 4, 4, 4, 9],\n [3, 4, 9, 4, 2, 4, 4, 4, 9],\n [3, 4, 3, 4, 4, 4, 4, 4, 9],\n [3, 4, 4, 2, 4, 4, 4, 8, 9],\n [3, 4, 4, 3, 4, 4, 4, 4, 9],\n [4, 2, 2, 2, 2, 2, 2, 2, 4]]", "expected_output": [[4, 5, 5, 5, 5, 5, 5, 5, 4], [3, 4, 4, 1, 4, 4, 4, 5, 9], [3, 4, 4, 4, 9, 4, 9, 4, 9], [3, 4, 4, 4, 8, 4, 4, 4, 9], [3, 4, 9, 4, 4, 4, 4, 4, 9], [3, 3, 4, 2, 4, 4, 3, 4, 9], [3, 4, 4, 4, 4, 4, 8, 4, 9], [3, 3, 2, 4, 4, 4, 4, 7, 9], [4, 2, 2, 2, 2, 2, 2, 2, 4]]}, "505fff84": {"instruction": "1. For each row in the input grid, identify any vertical column that contains only the values 1 or 8. These columns serve as \"dividers\" that separate the grid into smaller vertical segments.\n2. Partition the input grid horizontally into segments using the columns identified in step 1 as separating lines. Ignore any columns that contain a 1 or 8 as their only value for the separation; do not include these columns in the output.\n3. For each contiguous vertical segment (between separator columns), check if this segment contains only the values 0 or 2, potentially with leading or trailing columns comprised entirely of 0s (blanks).\n4. From all possible vertical segments, select the segment (block) whose rows contain the highest density of the value 2. If there is more than one valid block, select the one that is \"leftmost\" or \"topmost\" as per previous examples.\n5. Remove any leading or trailing rows and columns from the selected block that are comprised entirely of 0s (to crop the block tightly).\n6. The resulting grid is your output.", "test_input": [[2, 0, 1, 0, 2, 0, 2, 2, 8, 2, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2], [0, 1, 0, 2, 2, 0, 2, 8, 2, 0, 0, 0, 0, 2], [0, 2, 1, 0, 0, 0, 0, 0, 8, 2, 2, 0, 2, 2], [2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 2, 2, 0, 0], [0, 1, 2, 2, 0, 0, 0, 8, 0, 2, 2, 2, 2, 2], [2, 0, 0, 0, 2, 2, 0, 0, 2, 0, 2, 2, 2, 0], [2, 2, 2, 2, 1, 0, 0, 2, 0, 0, 8, 0, 2, 2], [0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 2, 2]], "predicted_output": "[[2, 2, 0, 0],\n [2, 8, 2, 0],\n [0, 8, 2, 2],\n [2, 2, 0, 0],\n [0, 8, 0, 2],\n [0, 0, 2, 2],\n [0, 0, 2, 2]]", "expected_output": [[0, 2, 0, 2, 2], [0, 2, 2, 0, 2], [0, 0, 0, 0, 0], [2, 2, 0, 0, 0], [0, 0, 2, 0, 0]]}, "506d28a5": {"instruction": "1. Remove all rows below the first row that contains only the value 4 (the separator row), including the separator row itself.\n2. For the remaining grid (above the separator row), replace every occurrence of the value 2 with the value 3.\n3. Replace every nonzero value other than 3 with 3.\n4. Keep zeros unchanged.", "test_input": [[0, 2, 2, 2, 2], [0, 0, 0, 2, 0], [0, 2, 0, 0, 0], [2, 2, 2, 0, 2], [4, 4, 4, 4, 4], [0, 0, 1, 0, 0], [0, 0, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 1]], "predicted_output": "[[0, 3, 3, 3, 3],\n [0, 0, 0, 3, 0],\n [0, 3, 0, 0, 0],\n [3, 3, 3, 0, 3]]", "expected_output": [[0, 3, 3, 3, 3], [0, 0, 0, 3, 3], [3, 3, 0, 3, 3], [3, 3, 3, 0, 3]]}, "50846271": {"instruction": "1. For each row in the grid, identify all contiguous horizontal groups of the number 2.\n2. For each such group, check if they are bounded on both immediate left and right by the number 5 (i.e., there must be a 5 before the first 2 and after the last 2 in the group in the same row), OR if the group starts or ends at the grid boundary and is bounded on the other side by a 5, or if it is a \"block\" of 2s in a '2,2,2,...' at the grid boundary with a 5 on just one side.\n3. For each group of 2s satisfying the above, replace the leftmost and rightmost 2s in the group with 8, keeping the interior 2s unchanged. If there is only a single 2, that 2 is replaced with 8.\n4. Leave all other cells unchanged.", "test_input": [[0, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5, 0], [0, 5, 0, 5, 5, 0, 0, 0, 5, 5, 0, 0, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5], [0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 5, 5, 0, 0, 5, 5, 5], [0, 0, 5, 5, 0, 5, 5, 5, 0, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 0], [0, 5, 0, 5, 2, 2, 5, 2, 2, 5, 0, 0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 0], [0, 0, 0, 5, 0, 5, 2, 5, 5, 5, 0, 5, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0], [5, 5, 0, 0, 5, 5, 2, 0, 5, 5, 0, 0, 0, 5, 0, 0, 0, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 0, 0, 5, 0, 5, 0], [5, 5, 5, 5, 5, 0, 0, 5, 5, 0, 5, 2, 5, 2, 5, 5, 0, 0, 5, 5, 5, 0], [0, 0, 0, 5, 5, 5, 0, 0, 5, 0, 0, 0, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 5, 0, 5, 0, 5, 5, 2, 5, 0, 5, 0, 0, 5, 5, 0], [0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 0, 5, 5, 0, 0, 0, 5, 5], [5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 0, 5, 0, 5, 5, 0, 0, 5, 5, 0, 5], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5, 0, 5], [5, 5, 0, 5, 5, 2, 2, 2, 5, 5, 5, 0, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0], [5, 0, 0, 0, 5, 2, 5, 0, 5, 0, 5, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5], [5, 5, 5, 0, 0, 2, 0, 5, 5, 0, 0, 2, 2, 2, 2, 2, 5, 0, 5, 0, 5, 5], [5, 0, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 5, 5, 0], [5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5]], "predicted_output": "[[0, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5, 0],\n [0, 5, 0, 5, 5, 0, 0, 0, 5, 5, 0, 0, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5],\n [0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 5, 5, 0, 0, 5, 5, 5],\n [0, 0, 5, 5, 0, 5, 5, 5, 0, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 0],\n [0, 5, 0, 5, 8, 8, 5, 8, 8, 5, 0, 0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 0],\n [0, 0, 0, 5, 0, 5, 8, 5, 5, 5, 0, 5, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0],\n [5, 5, 0, 0, 5, 5, 8, 0, 5, 5, 0, 0, 0, 5, 0, 0, 0, 5, 5, 5, 5, 5],\n [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 0, 0, 5, 0, 5, 0],\n [5, 5, 5, 5, 5, 0, 0, 5, 5, 0, 5, 8, 5, 8, 5, 5, 0, 0, 5, 5, 5, 0],\n [0, 0, 0, 5, 5, 5, 0, 0, 5, 0, 0, 0, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0],\n [0, 0, 0, 5, 5, 5, 0, 5, 0, 5, 0, 5, 5, 8, 5, 0, 5, 0, 0, 5, 5, 0],\n [0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 0, 5, 5, 0, 0, 0, 5, 5],\n [5, 5, 0, 0, 5, 5, 5, 0, 0, 5, 5, 0, 5, 0, 5, 5, 0, 0, 5, 5, 0, 5],\n [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5, 0, 5],\n [5, 5, 0, 5, 5, 8, 8, 8, 5, 5, 5, 0, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0],\n [5, 0, 0, 0, 5, 8, 5, 0, 5, 0, 5, 0, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5],\n [5, 5, 5, 0, 0, 8, 0, 5, 5, 0, 0, 8, 8, 8, 8, 8, 5, 0, 5, 0, 5, 5],\n [5, 0, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 5, 5, 0],\n [5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0, 5]]", "expected_output": [[0, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 5, 0], [0, 5, 0, 5, 5, 0, 0, 0, 5, 5, 0, 0, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5], [0, 0, 0, 0, 5, 5, 8, 0, 0, 0, 0, 5, 5, 0, 0, 5, 5, 0, 0, 5, 5, 5], [0, 0, 5, 5, 0, 5, 8, 5, 0, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 0], [0, 5, 0, 5, 2, 2, 8, 2, 2, 5, 0, 0, 5, 0, 5, 5, 5, 0, 0, 5, 5, 0], [0, 0, 0, 5, 0, 5, 2, 5, 5, 5, 0, 5, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0], [5, 5, 0, 0, 5, 5, 2, 0, 5, 5, 0, 0, 0, 8, 0, 0, 0, 5, 5, 5, 5, 5], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 8, 0, 5, 0, 0, 5, 0, 5, 0], [5, 5, 5, 5, 5, 0, 0, 5, 5, 0, 5, 2, 8, 2, 8, 8, 0, 0, 5, 5, 5, 0], [0, 0, 0, 5, 5, 5, 0, 0, 5, 0, 0, 0, 5, 8, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 0, 5, 0, 5, 0, 5, 5, 2, 5, 0, 5, 0, 0, 5, 5, 0], [0, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 0, 5, 5, 0, 0, 0, 5, 5], [5, 5, 0, 0, 5, 8, 5, 0, 0, 5, 5, 0, 5, 0, 5, 5, 0, 0, 5, 5, 0, 5], [0, 0, 5, 5, 5, 8, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5, 0, 5], [5, 5, 0, 8, 8, 2, 2, 2, 5, 5, 5, 0, 5, 8, 5, 0, 5, 0, 0, 5, 5, 0], [5, 0, 0, 0, 5, 2, 5, 0, 5, 0, 5, 0, 5, 8, 5, 5, 0, 0, 0, 0, 5, 5], [5, 5, 5, 0, 0, 2, 0, 5, 5, 0, 0, 2, 2, 2, 2, 2, 5, 0, 5, 0, 5, 5], [5, 0, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 8, 0, 5, 5, 5, 0, 5, 5, 0], [5, 5, 5, 5, 5, 0, 5, 0, 5, 5, 5, 5, 0, 8, 0, 0, 5, 5, 0, 5, 0, 5]]}, "508bd3b6": {"instruction": "1. Identify all cells that contain the value '8' in the input grid. For each such cell, note its position (row, column).\n2. For each noted '8' cell at position (r, c), draw a diagonal using the value '3':\n    a. Starting from the next row below (row r+1) and the next column to the right (column c+1), place a '3' at (r+1, c+1).\n    b. Continue placing '3's diagonally down and to the right (increment both row and column indices by 1) until either the edge of the grid is reached or a non-zero value is encountered.\n    c. Do not overwrite any non-zero values encountered during this process.\n3. Leave all other values (including '2's and zeros) unchanged.", "test_input": [[0, 0, 0, 8, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 8, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2]], "predicted_output": "[[0, 0, 0, 8, 0, 0, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 8, 0, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 3, 8, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 3, 8, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 3, 8, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2]]", "expected_output": [[0, 0, 0, 8, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 8, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 3, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 3, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 3, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 3, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 3, 0, 0, 0, 0, 2, 2, 2, 2], [0, 0, 3, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 3, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2]]}, "50a16a69": {"instruction": "1. Remove the last column from the input grid and insert it as the first column, shifting all other columns one position to the right.\n2. Remove the last row from the input grid and insert it as the first row, shifting all other rows one position down.", "test_input": [[6, 8, 6, 8, 6, 3], [8, 6, 8, 6, 8, 3], [6, 8, 6, 8, 6, 3], [8, 6, 8, 6, 8, 3], [6, 8, 6, 8, 6, 3], [3, 3, 3, 3, 3, 3]], "predicted_output": "[[3, 6, 8, 6, 8, 6],\n [3, 6, 8, 6, 8, 6],\n [3, 8, 6, 8, 6, 8],\n [3, 6, 8, 6, 8, 6],\n [3, 8, 6, 8, 6, 8],\n [3, 6, 8, 6, 8, 6]]", "expected_output": [[8, 6, 8, 6, 8, 6], [6, 8, 6, 8, 6, 8], [8, 6, 8, 6, 8, 6], [6, 8, 6, 8, 6, 8], [8, 6, 8, 6, 8, 6], [6, 8, 6, 8, 6, 8]]}, "50aad11f": {"instruction": "1. Identify all the distinct \"6\"-colored shapes in the input grid. These shapes are isolated clusters of adjacent cells filled with the color 6.\n2. For each such shape, locate the nearest non-zero non-6 color cell in the same row as the shape and to the right of the shape (if present). If not present, use the nearest non-zero non-6 color cell in the same row to the left.\n3. Crops each \"6\" shape into a minimal bounding box that contains the shape and any immediately adjacent non-zero non-6 color cell found in step 2 (ensure the non-6 color is included in the bounding box).\n4. Replace all 6s in each cropped shape's bounding box with the non-6 color present in that shape's bounding box (the color from step 2).\n5. Place each recolored (cropped) shape in a new output grid row, preserving the order the shapes are found (top to bottom in the input).\n6. Construct the output grid with each such recolored shape occupying a single row, aligning their cropped bounding boxes to the left of the output grid and padding with zeros as necessary on the right to make all rows equal-length.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 6, 6, 0, 7, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 1],\n [7, 7, 7, 7],\n [3, 3, 0]]", "expected_output": [[0, 1, 1, 0], [1, 1, 0, 0], [0, 1, 1, 1], [0, 0, 0, 1], [7, 0, 0, 0], [7, 7, 7, 7], [7, 0, 0, 0], [7, 7, 0, 0], [3, 3, 3, 0], [3, 0, 3, 3], [3, 0, 0, 0], [3, 3, 3, 0]]}, "50c07299": {"instruction": "1. Locate the three cells in the input grid that contain the value 2. These will appear along a descending diagonal line from right to left.\n2. For each of these three positions, shift the 2 exactly three rows downward and three columns to the left (i.e., for a cell at (r, c), move the 2 to position (r+3, c-3)).\n3. Set the original positions of the 2's (the diagonal from (6,8), (7,7), and (8,6)) back to 7.\n4. Leave all other grid values unchanged.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "50cb2852": {"instruction": "1. For each rectangular (or square) block of nonzero color, identify its bounding rectangle. For every such region, except those composed of only a single row or column, proceed as follows.\n2. Within each identified region, replace the innermost rows and columns\u2014leaving one row and one column of the region\u2019s border intact\u2014with color 8. This means all inner cells not on the region\u2019s external edge are changed to 8, preserving the original color on the boundary.\n3. If two colored regions share a border or touch at a corner, ensure each is processed independently, and only the true \"interior\" (not the shared boundary) is changed.", "test_input": [[0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3], [0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3], [0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3], [0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3]], "predicted_output": "[[0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 8, 8, 8, 1, 0, 0, 1, 1, 1, 0, 0],\n [0, 1, 8, 8, 8, 1, 0, 0, 1, 1, 1, 0, 0],\n [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0],\n [0, 0, 2, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0],\n [0, 0, 2, 8, 8, 8, 8, 2, 0, 3, 3, 3, 3],\n [0, 0, 2, 8, 8, 8, 8, 2, 0, 3, 8, 8, 3],\n [0, 0, 2, 8, 8, 8, 8, 2, 0, 3, 8, 8, 3],\n [0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 3]]", "expected_output": [[0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 8, 8, 8, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 8, 8, 8, 1, 0, 0, 1, 8, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 2, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0], [0, 0, 2, 8, 8, 8, 8, 2, 0, 3, 3, 3, 3], [0, 0, 2, 8, 8, 8, 8, 2, 0, 3, 8, 8, 3], [0, 0, 2, 8, 8, 8, 8, 2, 0, 3, 8, 8, 3], [0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 8, 8, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8, 8, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3]]}, "50f325b5": {"instruction": "1. For every row in the grid, if there is an uninterrupted horizontal sequence of three or more consecutive '3' cells, replace all such '3's with '8's. \n2. Repeat this process for each row independently, with the transformation only applying to runs of '3's where there are at least three '3's touching horizontally (no other values between them).\n3. All other values and positions remain unchanged from the input grid.", "test_input": [[7, 3, 2, 2, 4, 3, 7, 2, 7, 0, 7, 3, 4, 0, 3, 2, 4], [0, 2, 2, 2, 2, 3, 0, 3, 3, 0, 3, 2, 0, 0, 3, 0, 7], [3, 2, 0, 3, 7, 0, 2, 2, 2, 3, 7, 0, 3, 3, 0, 2, 2], [4, 2, 7, 7, 0, 0, 2, 0, 0, 0, 7, 4, 3, 2, 3, 7, 2], [7, 0, 8, 3, 0, 7, 3, 3, 0, 2, 3, 0, 4, 0, 0, 7, 0], [3, 4, 8, 8, 3, 2, 0, 0, 3, 4, 2, 4, 0, 3, 3, 2, 4], [2, 3, 0, 8, 0, 0, 2, 4, 0, 4, 4, 0, 0, 7, 2, 3, 0], [2, 4, 0, 3, 0, 0, 2, 2, 3, 2, 7, 3, 3, 7, 0, 4, 0], [2, 7, 7, 4, 0, 3, 0, 2, 7, 7, 0, 4, 7, 0, 7, 3, 3], [0, 0, 7, 3, 4, 0, 2, 3, 0, 7, 4, 3, 2, 3, 0, 7, 3], [2, 7, 0, 3, 4, 7, 3, 4, 0, 4, 0, 0, 0, 3, 3, 7, 2], [4, 3, 0, 2, 3, 0, 4, 0, 4, 3, 3, 2, 2, 3, 3, 0, 3], [4, 7, 0, 7, 3, 3, 2, 3, 3, 0, 7, 0, 0, 0, 0, 4, 7], [3, 3, 3, 3, 0, 4, 3, 4, 4, 7, 3, 7, 0, 0, 0, 3, 0], [0, 2, 2, 3, 3, 3, 0, 7, 3, 2, 7, 3, 4, 3, 3, 3, 3], [3, 3, 3, 4, 7, 4, 3, 3, 3, 0, 0, 4, 0, 7, 0, 4, 3]], "predicted_output": "[[7, 3, 2, 2, 4, 3, 7, 2, 7, 0, 7, 3, 4, 0, 3, 2, 4],\n [0, 2, 2, 2, 2, 3, 0, 3, 3, 0, 3, 2, 0, 0, 3, 0, 7],\n [3, 2, 0, 3, 7, 0, 2, 2, 2, 3, 7, 0, 3, 3, 0, 2, 2],\n [4, 2, 7, 7, 0, 0, 2, 0, 0, 0, 7, 4, 3, 2, 3, 7, 2],\n [7, 0, 8, 3, 0, 7, 3, 3, 0, 2, 3, 0, 4, 0, 0, 7, 0],\n [3, 4, 8, 8, 3, 2, 0, 0, 3, 4, 2, 4, 0, 3, 3, 2, 4],\n [2, 3, 0, 8, 0, 0, 2, 4, 0, 4, 4, 0, 0, 7, 2, 3, 0],\n [2, 4, 0, 3, 0, 0, 2, 2, 3, 2, 7, 3, 3, 7, 0, 4, 0],\n [2, 7, 7, 4, 0, 3, 0, 2, 7, 7, 0, 4, 7, 0, 7, 3, 3],\n [0, 0, 7, 3, 4, 0, 2, 3, 0, 7, 4, 3, 2, 3, 0, 7, 3],\n [2, 7, 0, 3, 4, 7, 3, 4, 0, 4, 0, 0, 0, 3, 3, 7, 2],\n [4, 3, 0, 2, 3, 0, 4, 0, 4, 3, 3, 2, 2, 3, 3, 0, 3],\n [4, 7, 0, 7, 3, 3, 2, 3, 3, 0, 7, 0, 0, 0, 0, 4, 7],\n [8, 8, 8, 8, 0, 4, 3, 4, 4, 7, 3, 7, 0, 0, 0, 3, 0],\n [0, 2, 2, 8, 8, 8, 0, 7, 3, 2, 7, 3, 4, 3, 3, 3, 3],\n [8, 8, 8, 4, 7, 4, 3, 3, 3, 0, 0, 4, 0, 7, 0, 4, 3]]", "expected_output": [[7, 3, 2, 2, 4, 3, 7, 2, 7, 0, 7, 3, 4, 0, 3, 2, 4], [0, 2, 2, 2, 2, 3, 0, 3, 3, 0, 3, 2, 0, 0, 3, 0, 7], [3, 2, 0, 3, 7, 0, 2, 2, 2, 3, 7, 0, 3, 3, 0, 2, 2], [4, 2, 7, 7, 0, 0, 2, 0, 0, 0, 7, 4, 3, 2, 3, 7, 2], [7, 0, 8, 3, 0, 7, 3, 3, 0, 2, 3, 0, 4, 0, 0, 7, 0], [3, 4, 8, 8, 3, 2, 0, 0, 3, 4, 2, 4, 0, 3, 3, 2, 4], [2, 3, 0, 8, 0, 0, 2, 4, 0, 4, 4, 0, 0, 7, 2, 3, 0], [2, 4, 0, 3, 0, 0, 2, 2, 3, 2, 7, 3, 3, 7, 0, 4, 0], [2, 7, 7, 4, 0, 3, 0, 2, 7, 7, 0, 4, 7, 0, 7, 3, 3], [0, 0, 7, 3, 4, 0, 2, 3, 0, 7, 4, 3, 2, 8, 0, 7, 3], [2, 7, 0, 3, 4, 7, 3, 4, 0, 4, 0, 0, 0, 8, 8, 7, 2], [4, 3, 0, 2, 3, 0, 4, 0, 4, 3, 3, 2, 2, 3, 8, 0, 3], [4, 7, 0, 7, 3, 3, 2, 3, 3, 0, 7, 0, 0, 0, 0, 4, 7], [3, 3, 8, 8, 0, 4, 3, 4, 4, 7, 3, 7, 0, 0, 0, 8, 0], [0, 2, 2, 8, 8, 3, 0, 7, 3, 2, 7, 3, 4, 3, 3, 8, 8], [3, 3, 3, 4, 7, 4, 3, 3, 3, 0, 0, 4, 0, 7, 0, 4, 8]]}, "5117e062": {"instruction": "1. Locate all isolated 3x3 blocks in the input grid that are centered around a unique nonzero value (the \"center\"), where the surrounding 8 cells are either equal or form a border pattern, and the center has a unique color different from the border cells.\n2. Extract the 3x3 block that is centered on the unique value '8' (the \"center marker\").\n3. For this extracted 3x3 block, set its top-left cell as the upper-left corner and maintain the cells' relative positions.\n4. Output only this 3x3 block as the result.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 7, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0],\n [0, 7, 7],\n [0, 8, 7]]", "expected_output": [[0, 7, 7], [7, 7, 7], [0, 7, 0]]}, "5168d44c": {"instruction": "1. Identify the rectangular region composed of nonzero elements (the \"active region\") in the input grid.\n2. Shift every row of the active region upward so that the topmost nonzero row in the region becomes the first empty row from the top of the grid.\n3. Within the active region, shift each row to the right so that the first nonzero band is always in the leftmost possible position, with any leading zeros removed and appended to the end of the row as needed, preserving the order of nonzero elements within each row.\n4. Fill the remaining cells of the grid with zeros to maintain the grid's original dimensions.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 3, 0, 3, 2, 3, 2, 3, 0, 3, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],\n [3, 0, 3, 2, 3, 2, 3, 0, 3, 0, 3],\n [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [3, 0, 3, 0, 3, 0, 3, 0, 3, 2, 3, 2, 3, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}}