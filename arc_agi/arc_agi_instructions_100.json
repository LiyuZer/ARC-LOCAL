{"1f85a75f": {"instruction": "1. Identify all nonzero cells in the input grid and record their row and column indices.\n2. Determine the smallest bounding rectangle that contains all nonzero cells. This is done by finding the minimum and maximum row indices (min_row, max_row) and minimum and maximum column indices (min_col, max_col) of all nonzero cells.\n3. Extract the rectangular subgrid defined by rows from min_row to max_row (inclusive) and columns from min_col to max_col (inclusive).\n4. In the extracted subgrid, change all nonzero values to a single value, which is the most frequent nonzero value present in the bounding rectangle (if there are ties, choose the value that appears last in reading order within the bounding box).\n5. Set all zero values to zero in the extracted subgrid.\n6. Output the resulting grid as the final output.", "test_input": [[0, 0, 1, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 1, 3, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 8], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 8, 0, 8, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 8, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 8, 0, 3], [0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 2, 2, 2, 0, 8, 3, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 3, 0, 1, 0, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 1, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 8, 0, 3, 0, 3, 0, 0], [0, 0, 1, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3]], "predicted_output": "[[0, 0, 1, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 1, 1, 0],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 1, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 8],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 1, 8, 0, 8, 0, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],\n [0, 8, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 8, 0, 3],\n [0, 0, 0, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 3, 0, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 8, 0, 0, 3, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 2, 2, 2, 0, 8, 3, 0, 0, 0, 0],\n [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 3, 0, 1, 0, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 1, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 8, 0, 3, 0, 3, 0, 0],\n [0, 0, 1, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3]]", "expected_output": [[0, 2, 2, 2], [2, 2, 0, 2], [2, 2, 0, 2], [0, 2, 2, 2]]}, "1f876c06": {"instruction": "1. For each nonzero value in the input grid, identify its position (row, column).\n2. For each value, create a diagonal \"trail\" extending from its original position towards the top-left, one step up and one step left per row, until you reach the first row or first column, or until the length of the trail equals the row or column index plus one (i.e., until extending further would exit the grid). Place the same number at each position along the trail.\n3. For each value, create a diagonal \"trail\" extending from its original position towards the bottom-right, one step down and one step right per row, until you reach the last row or last column, or until extending further would exit the grid. Place the same number at each position along the trail.\n4. Ensure that if a cell receives a value more than once due to overlapping trails, the first value placed remains (do not overwrite).\n5. All other cells remain as zero.", "test_input": [[0, 0, 0, 0, 0, 0, 3, 0, 0, 9], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 9, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 3, 0, 0, 9],\n [7, 0, 0, 0, 0, 0, 0, 3, 0, 0],\n [0, 7, 0, 0, 0, 0, 0, 0, 3, 0],\n [0, 0, 7, 3, 0, 0, 9, 0, 0, 3],\n [6, 0, 0, 0, 3, 0, 0, 9, 0, 0],\n [0, 6, 0, 0, 0, 3, 0, 0, 9, 4],\n [0, 0, 6, 0, 0, 0, 3, 0, 0, 0],\n [0, 0, 0, 6, 0, 0, 7, 0, 0, 0],\n [0, 0, 0, 0, 6, 0, 0, 7, 0, 0],\n [0, 0, 0, 0, 0, 4, 0, 0, 7, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 3, 0, 0, 9], [7, 0, 0, 0, 0, 3, 0, 0, 9, 0], [0, 7, 0, 0, 3, 0, 0, 9, 0, 0], [0, 0, 7, 3, 0, 0, 9, 0, 0, 0], [6, 0, 0, 7, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 7, 0, 0, 0, 0, 4], [0, 0, 6, 0, 0, 7, 0, 0, 4, 0], [0, 0, 0, 6, 0, 0, 7, 4, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0]]}, "1fad071e": {"instruction": "1. For each row in the input grid, count the number of connected regions (blocks) of 1s that have a length of at least 2, and note on which columns these regions appear.\n2. For each column index (from left to right), count how many times a region of at least two adjacent 1s appears in that column across all the rows.\n3. Construct a single output row where each cell corresponds to a column in the input grid:\n   - If a column participates in at least one region of two or more horizontally connected 1s in any row, set that cell to 1.\n   - Otherwise, set it to 0.\n4. Omit any columns from the output row that do not contain any nonzero value (i.e., if all cells in that column are always 0 in every region, exclude that column from the output).\n5. The resulting row forms the output grid.", "test_input": [[0, 0, 0, 0, 0, 2, 2, 0, 1], [1, 1, 0, 1, 0, 2, 2, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 2, 2, 0, 0, 1, 1, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 2, 2, 0], [2, 2, 0, 1, 1, 0, 2, 2, 0], [2, 2, 0, 1, 1, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 1, 0, 0, 0, 0]]", "expected_output": [[1, 1, 1, 0, 0]]}, "2013d3e2": {"instruction": "1. Identify all nonzero cells in the input grid.\n2. Find the smallest rectangle that contains all the nonzero cells (the bounding box).\n3. Extract the subgrid defined by this bounding box.\n4. From this subgrid, select the top-left 3x3 section (i.e., rows 0-2 and columns 0-2 of the extracted subgrid).\n5. Set this 3x3 section as the output grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 4, 4, 8, 4, 0, 0, 0], [0, 0, 8, 8, 3, 3, 4, 0, 0, 0], [0, 0, 0, 4, 3, 3, 8, 8, 0, 0], [0, 0, 0, 4, 8, 4, 4, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 8],\n [0, 4, 4],\n [8, 8, 3]]", "expected_output": [[0, 0, 0], [0, 4, 4], [8, 8, 3]]}, "2037f2c7": {"instruction": "1. Search the input grid for every non-overlapping block containing nonzero values that forms a distinguishable 'pattern' or 'object'. Each such object is surrounded by zeros, and multiple distinct objects may exist per row.\n2. For each such identified object, extract the tightest rectangle (smallest bounding box) that contains all its nonzero values.\n3. For each bounding box, generate a smaller abstract representation as follows:\n    a. Assign the color 8 to the positions in an output rectangle to encode the spatial layout of the original object, while compressing/simplifying its shape as in the examples.\n    b. The resulting mini-grid should have no more than 2 or 3 rows and around 6\u20138 columns, with color 8s distributed in a way that matches the number and general arrangement of clusters from the input object.\n    c. Preserve the rough left-right ordering of parts if the input has multiple clusters in one row.\n4. After processing all the objects in the input, arrange their abstracted (mini) representations row by row into a single output grid. Stack them vertically in the order they appear from top to bottom in the input.\n5. Ensure the output grid is compact, with no entirely zero (empty) rows or columns at the borders.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 6, 6, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 2, 6, 6, 2, 4, 1, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 6, 6, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 6, 6, 2, 1, 0, 0, 0], [0, 0, 0, 4, 4, 6, 6, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0], [0, 3, 1, 4, 2, 6, 6, 2, 4, 1, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 3, 1, 4, 2, 6, 6, 2, 4, 1, 3, 0, 0, 0, 0, 1, 3, 3, 3, 3, 3, 3, 1, 0, 0], [0, 3, 1, 1, 2, 6, 6, 2, 1, 1, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[8, 8, 8, 0, 8, 8, 8],\n [0, 8, 8, 8, 8, 8, 0],\n [8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 0, 0, 0, 0, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 0, 0, 8, 8]]}, "2072aba6": {"instruction": "1. Double the size of the input grid in both dimensions, so that each input cell maps to a 2x2 block in the output grid. This creates a grid with dimensions 6x6.\n2. For each cell in the input grid:\n    a. If the cell contains the value 5, fill the corresponding 2x2 block in the output as follows:\n        - Top-left of the block: 1\n        - Top-right of the block: 2\n        - Bottom-left of the block: 2\n        - Bottom-right of the block: 1\n    b. If the cell contains any other value (such as 0), fill the entire corresponding 2x2 block with 0s.\n3. Assemble all the 2x2 blocks in order, so that the output grid represents the \"expanded\" input following the block-mapping rules above.", "test_input": [[0, 0, 0], [0, 5, 0], [5, 5, 5]], "predicted_output": "[[0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0],\n [0, 0, 1, 2, 0, 0],\n [0, 0, 2, 1, 0, 0],\n [1, 2, 1, 2, 1, 2],\n [2, 1, 2, 1, 2, 1]]", "expected_output": [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 0], [0, 0, 2, 1, 0, 0], [1, 2, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1]]}, "20818e16": {"instruction": "1. Identify the smallest rectangle in the input grid that contains all **non-background** colors (i.e., all values except the predominant border color, which is 1 in this case). For this grid, the non-background colors are 2, 3, 6, and 8.\n2. Extract this minimal rectangle (region of interest) that includes all rows and columns containing any non-background color.\n3. Within the selected rectangle, look for 'blocks' that appear in the same positions as in the earlier example outputs: a bottom block, a right block, and a top-left block, each corresponding to the groups of colors found (here, 6, 8, 3, 2).\n4. Rearrange the extracted rectangle as follows:\n    a. Move the bottom-most color block (in this case, the block with values 8) to the top-left corner of the output grid, maintaining its original dimensions.\n    b. Place the next 'block' (3s) directly below the 8s, aligned to the left, again preserving its original size.\n    c. Place the next color group (the 2s) below the 3s, left-aligned, with their original dimensions.\n    d. Place the previously right-placed 'block' (6s) to the right of the first three groups, stacked vertically so their tops align, and preserving their sizes.\n5. The final output grid should contain only this compact block arrangement, cropped to omit all background (1) regions.", "test_input": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1], [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "predicted_output": "[[8, 8, 8],\n [8, 8, 8],\n [3, 3, 3, 3],\n [3, 3, 3, 3],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [6, 6]]", "expected_output": [[6, 6, 8, 3, 2, 2, 2, 2, 2, 2], [8, 8, 8, 3, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]}, "20981f0e": {"instruction": "1. Identify each horizontal band in the grid that is separated by rows containing only zeros and/or rows with only the repeating structure of 2s and zeros (e.g., rows that only contain decorative borders or are completely empty).\n2. For each band that contains any non-zero elements other than the border structure (2s), further identify any sub-bands separated by empty rows within that band.\n3. For each sub-band, examine all rows that contain the color 1:\n    a. If a row has color-1 cells in the same columns as another row within the sub-band, merge them into a single block by left-shifting the group of contiguous 1s in each row so that:\n        - All 1s in that sub-block are as far to the left as possible within that band, and adjacent horizontal lines of 1s \"stack\" at their leftmost possible columns.\n    b. Remove any row where, after step 3a, all elements are zeros.\n4. Repeat step 3 for all such bands/sub-bands.\n5. Leave all rows whose contents consist only of zeros, or only of the repeating border structure (2s and zeros), unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],\n [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2],\n [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2]]}, "20fb2937": {"instruction": "1. Locate all contiguous 3x3x3 rectangular blocks of non-7 numbers at the top left, top center, and top right of the input grid. Extract these blocks. In this grid, extract the following 3x3 blocks:\n   - Top left (columns 0-2, rows 0-2, value: 2)\n   - Top center (columns 4-6, rows 0-2, value: 1)\n   - Top right (columns 8-10, rows 0-2, value: 5)\n2. Shift the center block (1s) downward by 3 rows, keeping it in its original columns (columns 4-6), so that rows 0-2 become rows 3-5. All other blocks remain unchanged so far.\n3. Place the right block (5s) in the leftmost columns (columns 0-2), immediately below the end of the top-left block (rows 3-5), so the first occurrence of 5s is now in the lower left area below the initial 2s block.\n4. Place the left block (2s) immediately to the right of the newly placed 5s block, using the same pattern, now in columns 3-5, rows 3-5.\n5. For the next 3x3 block down the grid (rows 6-8), repeat the shifting and placement for the pattern found at the bottom of the grid:\n   - The 6s block, originally at rows 6-8, columns 0-8, also appears as a 3x3 pattern. Move it to columns 6-8, rows 6-8.\n6. Once all shifted, fill any remaining regions of 3x3 blocks in columns 0-2, 3-5, and 6-8 below row 8 with rotated versions of the blocks above: for each corresponding block, move it 3 rows downward and 3 columns to the right, mimicking the structure above.\n7. For all rows and columns not occupied by a non-7 block after placement, fill with 7.\n8. Remove any rows at the bottom of the grid that are all 7s to match the height of the output grid.", "test_input": [[2, 2, 2, 7, 1, 1, 1, 7, 5, 5, 5], [2, 2, 2, 7, 1, 1, 1, 7, 5, 5, 5], [2, 2, 2, 7, 1, 1, 1, 7, 5, 5, 5], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 8, 7, 7, 7, 6, 7, 7, 7, 9, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 6, 7, 7, 7, 9, 7], [7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 8, 7, 7, 7, 7, 8, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 9, 7, 7, 8, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[2, 2, 2, 7, 1, 1, 1, 7, 5, 5, 5],\n [2, 2, 2, 7, 1, 1, 1, 7, 5, 5, 5],\n [2, 2, 2, 7, 1, 1, 1, 7, 5, 5, 5],\n [5, 5, 5, 2, 2, 2, 1, 1, 1, 7, 7],\n [5, 5, 5, 2, 2, 2, 1, 1, 1, 7, 7],\n [5, 5, 5, 2, 2, 2, 1, 1, 1, 7, 7],\n [7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7],\n [7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7],\n [7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7]]", "expected_output": [[7, 7, 7, 7, 1, 1, 1, 7, 5, 5, 5], [7, 5, 5, 5, 1, 1, 1, 7, 5, 5, 5], [7, 5, 5, 5, 1, 1, 1, 7, 5, 5, 5], [7, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7], [7, 2, 2, 2, 7, 7, 2, 2, 2, 7, 7], [7, 2, 2, 2, 7, 7, 2, 2, 2, 7, 7], [7, 2, 2, 2, 7, 7, 2, 2, 2, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 5, 5, 5, 2, 2, 2, 7, 7, 7, 7], [7, 5, 5, 5, 2, 2, 2, 7, 5, 5, 5], [7, 5, 5, 5, 2, 2, 2, 7, 5, 5, 5], [7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "212895b5": {"instruction": "1. For each vertical and horizontal chain of adjacent 5's (length \u2265 1), surround them with a border of 4's, except where such a 4 would overwrite an existing nonzero cell or extend outside the grid.\n2. For each 5 that is not already bordered by a chain and is not adjacent (orthogonally) to another 5 or 8, place a 2 in the next available diagonal cell outward (up-left, up-right, down-left, or down-right), moving clockwise, unless that cell already contains a nonzero value or is outside the grid.\n3. Preserve all 8's in their position and do not place any 2's or 4's such that they touch an 8 cell (orthogonally or diagonally).\n4. Do not overwrite any existing nonzero grid cells\u2014borders (4's) and diagonals (2's) are only placed in empty cells (0's).\n5. Leave all other cells unchanged.", "test_input": [[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 5, 5], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [5, 0, 0, 0, 5, 0, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 0, 0, 0, 0, 5], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 5, 0], [5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 4, 4, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [4, 4, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 5, 4, 0, 4, 5, 4, 0, 0, 0, 0, 4, 4, 5, 5, 4, 0, 0, 0, 0, 0, 5],\n [4, 0, 4, 5, 4, 0, 4, 0, 0, 4, 5, 5, 0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 5, 5, 4, 0, 0, 4, 5, 5],\n [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 5, 4, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 5, 4, 0, 0, 0, 0, 0, 4, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 4, 0, 2, 5, 0, 4, 5, 0],\n [0, 0, 5, 0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 5, 4, 0, 5, 0],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 0, 5, 4, 0, 0, 0, 0, 0, 0, 4, 0],\n [0, 0, 5, 4, 5, 5, 0, 0, 5, 4, 0, 4, 0, 4, 0, 0, 0, 0, 5, 5, 4, 5, 2],\n [0, 0, 0, 0, 4, 0, 0, 0, 0, 5, 2, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0],\n [4, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 5, 0, 0, 4],\n [5, 4, 0, 0, 5, 0, 5, 5, 4, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0],\n [0, 0, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 4, 0, 0, 0, 5],\n [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 5, 0],\n [5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],\n [0, 0, 0, 0, 0, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 4, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0]]", "expected_output": [[0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 2, 0, 0, 5, 0, 0, 4, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 5], [0, 0, 4, 5, 2, 0, 0, 4, 4, 4, 5, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 2, 0, 4, 0, 2, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 5, 5], [0, 0, 0, 0, 4, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0], [0, 0, 0, 0, 4, 4, 8, 8, 8, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 4, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 4, 0, 2, 4, 4, 4, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0], [0, 0, 5, 0, 5, 4, 4, 4, 0, 0, 2, 0, 4, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 5, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0], [5, 0, 0, 0, 5, 0, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 5, 0, 0, 0, 0, 5], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 5, 0], [5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0]]}, "21f83797": {"instruction": "1. Identify all positions in the input grid containing the value 2. Let these positions be called \"marker positions\".\n2. Draw a vertical line (using 2s) in each column where a marker position exists, creating a continuous line of 2s from the top row to the bottom row at those columns.\n3. Draw a horizontal line (using 2s) in each row where a marker position exists, creating a continuous line of 2s from the leftmost column to the rightmost column at those rows.\n4. At the intersection row(s) of marker positions (i.e., the same row as each \"marker position\"), fill a rectangle between the columns containing marker positions with value 1, excluding the columns themselves (so, only between them) and only for the rows between the top and bottom marker-row (exclusive of those rows).\n5. At the intersection columns of marker positions (i.e., the same columns as each \"marker position\"), make sure the vertical lines of 2s continue uninterrupted from top to bottom.\n6. The two marker columns and two marker rows thus form a rectangular frame of 2s, and inside the inner area (not including the border), fill with 1s in the rows between the two marker rows.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0]]", "expected_output": [[0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0]]}, "2204b7a8": {"instruction": "1. For each cell in the grid, locate any cell with the value 3 that is **not** in the first or last column.\n2. For each such cell, check which nonzero value (if any) appears most frequently in the same row or column at the grid's border (edges). Typically, this value will be in the first or last column (or first/last row if relevant).\n3. Replace the value 3 with the corresponding border value from its row if the border in that row contains a nonzero value (otherwise, use the value from the column).\n4. Leave all other cells unchanged.", "test_input": [[5, 3, 0, 0, 0, 0, 0, 0, 0, 4], [5, 0, 0, 0, 0, 3, 0, 0, 3, 4], [5, 0, 0, 0, 0, 0, 0, 0, 0, 4], [5, 0, 0, 3, 0, 0, 0, 0, 0, 4], [5, 0, 0, 0, 0, 0, 3, 0, 0, 4], [5, 0, 0, 3, 0, 0, 0, 0, 0, 4], [5, 0, 0, 0, 0, 0, 0, 0, 0, 4], [5, 0, 0, 0, 3, 0, 0, 0, 0, 4], [5, 0, 3, 0, 0, 0, 3, 0, 0, 4], [5, 0, 0, 0, 0, 0, 0, 0, 0, 4]], "predicted_output": "[[5, 3, 0, 0, 0, 0, 0, 0, 0, 4],\n [5, 0, 0, 0, 0, 5, 0, 0, 3, 4],\n [5, 0, 0, 0, 0, 0, 0, 0, 0, 4],\n [5, 0, 0, 5, 0, 0, 0, 0, 0, 4],\n [5, 0, 0, 0, 0, 0, 4, 0, 0, 4],\n [5, 0, 0, 5, 0, 0, 0, 0, 0, 4],\n [5, 0, 0, 0, 0, 0, 0, 0, 0, 4],\n [5, 0, 0, 0, 4, 0, 0, 0, 0, 4],\n [5, 0, 5, 0, 0, 0, 4, 0, 0, 4],\n [5, 0, 0, 0, 0, 0, 0, 0, 0, 4]]", "expected_output": [[5, 5, 0, 0, 0, 0, 0, 0, 0, 4], [5, 0, 0, 0, 0, 4, 0, 0, 4, 4], [5, 0, 0, 0, 0, 0, 0, 0, 0, 4], [5, 0, 0, 5, 0, 0, 0, 0, 0, 4], [5, 0, 0, 0, 0, 0, 4, 0, 0, 4], [5, 0, 0, 5, 0, 0, 0, 0, 0, 4], [5, 0, 0, 0, 0, 0, 0, 0, 0, 4], [5, 0, 0, 0, 5, 0, 0, 0, 0, 4], [5, 0, 5, 0, 0, 0, 4, 0, 0, 4], [5, 0, 0, 0, 0, 0, 0, 0, 0, 4]]}, "22168020": {"instruction": "1. For each unique nonzero color in the grid, process all groups of contiguous cells of that color separately.\n2. For each group, expand each diagonal line of that color (i.e., lines where single pixels or non-adjacent clusters form a diagonal \"staircase\") into a solid, filled triangle or parallelogram shape by left-justifying the group onto the occupied bounding box area for that color:\n    a. For each row spanned by the group, find the leftmost and rightmost columns occupied by that color in that row within the bounding box.\n    b. Fill all cells between these columns (inclusive) in that row with the color, thus making the region solid in that area.\n3. Repeat step 2 for all distinct, disconnected groups of that color.\n4. Leave all other cells (those with only zeros in the input) unchanged as zeros.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 7, 0, 0, 0, 0, 7], [0, 4, 4, 0, 0, 7, 0, 0, 7, 0], [0, 0, 0, 0, 0, 0, 7, 7, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 0, 0], [0, 3, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 3, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [4, 4, 4, 4, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 7, 7, 0, 0, 0, 7],\n [0, 4, 4, 0, 0, 7, 7, 0, 7, 7],\n [0, 0, 0, 0, 0, 0, 7, 7, 0, 0],\n [0, 0, 0, 0, 0, 0, 7, 7, 0, 0],\n [0, 3, 3, 0, 0, 3, 3, 0, 0, 0],\n [0, 0, 3, 3, 3, 3, 0, 0, 0, 0],\n [0, 0, 0, 3, 3, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 3, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 7, 7, 7, 7, 7, 7], [0, 4, 4, 0, 0, 7, 7, 7, 7, 0], [0, 0, 0, 0, 0, 0, 7, 7, 0, 0], [0, 0, 0, 0, 0, 0, 7, 7, 0, 0], [0, 3, 3, 3, 3, 3, 3, 0, 0, 0], [0, 0, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0]]}, "22208ba4": {"instruction": "1. Replace every cell in the grid with the value 7.\n2. Identify each corner region in the original grid that was filled with a unique color (i.e., where a color block appears distinctly in the corners without being interrupted by 7s). For each such corner region, place a corresponding block of that color, but shifted inward away from the grid edge, so that:\n   - The top-left block moves to the left and down such that it is no longer at the outermost edge but is instead embedded within the grid, positioned after a border of 7s.\n   - The top-right block moves to the right and down, similarly embedded after a border of 7s.\n   - The bottom-left and bottom-right blocks (if present) are similarly moved inward.\n   The block\u2019s size and shape may be adjusted (typically shrunk) compared to the original to fit the new, inner position.\n3. For any solid color blocks present along the left or right edge in the original grid (but not at the very top or bottom), create a corresponding horizontal (or vertical) block of that color toward the center of the grid, again separated from the edge by surrounding 7s. The new block should maintain the general dimensions/proportion of the original but moved toward the central area or an inward offset of at least one cell from the edge.\n4. Repeat the procedure for color blocks present along the bottom or top edge.\n5. Leave all other cells (not part of an \"inset\" color block as described above) as 7.", "test_input": [[6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1], [6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3], [1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7, 7],\n [7, 7, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7],\n [7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7]]", "expected_output": [[6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7], [7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7], [7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3]]}, "22233c11": {"instruction": "1. Identify all contiguous regions (blocks) of nonzero cells (specifically color 3) in the input grid. For each block, find its bounding rectangle (minimum and maximum rows and columns that contain color 3).\n2. For each identified block, create a new block of color 8 with the same shape and size as the color 3 block, and place it symmetrically on the opposite side of the grid. To do this, reflect the position of the block across the center of the grid (horizontally and vertically), so that the new (reflected) block does not overlap the original and is in a corresponding empty space.\n3. Leave the original color 3 blocks unchanged. Populate the calculated reflected areas with color 8 according to the mapped positions.\n4. All other cells remain their original color (typically zero).", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 8, 8, 8, 0, 0, 0, 0],\n [0, 0, 0, 8, 8, 8, 0, 0, 0, 0],\n [0, 0, 0, 8, 8, 8, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 3, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 3, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8]]}, "22425bda": {"instruction": "1. Identify the unique column that is filled with a distinct non-background color (in this example, column 6 with value 4) that is not the common background value (here, 7).\n2. For each row in the grid, collect the value in this unique column if and only if it matches the non-background color; otherwise, skip.\n3. Identify any additional rows in the grid that are filled with a different non-background color and collect the value from the unique column of those rows.\n4. At the bottommost or special rows (usually a block of a single color), collect the distinct non-background values appearing in that block, if not already collected.\n5. Arrange the collected values in the order they first appear from bottommost to topmost for rows/blocks, and in left-to-right order for the unique column.\n6. Output the collected and ordered values as a single row vector (1-row grid).", "test_input": [[7, 7, 7, 7, 7, 7, 4, 1, 7, 5, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 4, 7, 1, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 4, 5, 7, 1, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 1, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 7, 1, 7, 7, 7, 7], [0, 7, 7, 7, 5, 7, 4, 7, 7, 7, 7, 7, 1, 7, 7, 7], [7, 0, 7, 5, 7, 7, 4, 7, 7, 7, 7, 7, 7, 1, 7, 3], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 3, 9], [7, 5, 7, 0, 7, 7, 4, 7, 7, 7, 7, 7, 7, 3, 7, 1], [5, 7, 7, 7, 0, 7, 4, 7, 7, 7, 7, 7, 3, 7, 7, 7], [7, 7, 7, 7, 7, 0, 4, 7, 7, 7, 7, 3, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 3, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 4, 0, 7, 3, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 4, 7, 3, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 4, 3, 7, 0, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 3, 7, 7, 7, 0, 7, 7, 7, 7, 7]], "predicted_output": "[[9, 0, 3, 1, 4]]", "expected_output": [[5, 4, 0, 9, 1, 3]]}, "22806e14": {"instruction": "1. Identify all non-background (not 7) cells in the input grid.\n2. For every 3x1 vertical group of contiguous non-background cells that completely fills with the same value and is surrounded by background (7), replace the middle cell in that group with the non-background value that appears in the same row but at a far right column (the unique rightmost non-background value in the row). If there is no rightmost non-background value in the row, skip this step for that group.\n3. For any isolated non-background value surrounded by background (7), replace it with the background (7) unless it is at the edge.\n4. Leave all other values unchanged.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 7, 7, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7], [7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7], [7, 7, 4, 4, 4, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 8, 8, 8, 7, 7, 7], [7, 7, 7, 7, 7, 8, 7, 8, 8, 7, 8, 8, 8, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 7],\n [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 7, 7, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7],\n [7, 7, 4, 4, 4, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 8, 8, 8, 7, 7, 7],\n [7, 7, 7, 7, 7, 8, 7, 8, 8, 7, 8, 8, 8, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 4, 7], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 4, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 4, 8], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 4, 7, 7, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7], [7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7], [7, 7, 4, 4, 4, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 8, 4, 8, 7, 7, 7], [7, 7, 7, 7, 7, 4, 7, 8, 8, 7, 8, 8, 8, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8]]}, "2281f1f4": {"instruction": "1. Identify all rows in the grid that contain at least one nonzero colored value (any color except 0). Mark these rows as \"original rows.\"\n2. For each \"original row,\" leave it unchanged in the output grid.\n3. For every row that consists entirely of zeros, check if the row immediately below it exists and contains at least one nonzero colored value. If so, transform the all-zero row directly above such a row as follows:\n    a. For each column, if there is a nonzero value (any color except 0) in that column in the next \"original row\" below, change the corresponding cell in the current row from 0 to color 2.\n    b. If the corresponding cell in the next row below is zero, leave the current cell as 0.\n    c. If the next row below has a nonzero color in that position, and that is not the first occurrence of that color in its row (i.e., it is a repeat of a previously seen nonzero color in the same row), still set the cell above to 2.\n    d. For any columns where the next original row below has 5, but the cell in the zero row is not the last in its row (not an edge), still set it to 2.\n4. Leave all other rows unchanged.", "test_input": [[5, 0, 5, 5, 0, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5]], "predicted_output": "[[5, 0, 5, 5, 0, 0, 5, 0, 5, 0],\n [2, 0, 2, 2, 0, 0, 2, 0, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 5],\n [2, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [2, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [2, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 5]]", "expected_output": [[5, 0, 5, 5, 0, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 2, 0, 2, 5], [2, 0, 2, 2, 0, 0, 2, 0, 2, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 2, 0, 2, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 2, 0, 2, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 2, 0, 2, 5]]}, "228f6490": {"instruction": "1. Identify each 2x2 subgrid of nonzero values adjacent to the right or left side of a continuous vertical stack of 5s (that is, blocks that are directly right or left of vertical columns of 5s) and not on the edge of the main grid. Mark these as \"special colored blocks.\"\n2. For each \"special colored block\" identified, move the entire block (its color/pattern) to the opposite section of the grid that originally had a similar block in past input/output pairs, while replacing its former cells with 0. The migration prioritizes swapping the colored block(s) with the main vertical/horizontal position that had the primary color in the lower half or side of the grid.\n3. In places where colored (non-5, non-0) blocks were in the original grid (top left, bottom right, etc.), set those positions to 0 except where a block was swapped to in step 2.\n4. All vertical or horizontal lines of 5s remain fixed in their structure and position.\n5. Retain all other colored values (besides 5 and 0) only in their new swapped positions per the rules above; clear any other colored block outside the 2x2 regions specified above.", "test_input": [[0, 0, 5, 5, 5, 5, 5, 0, 0, 2], [2, 0, 5, 0, 0, 0, 5, 0, 0, 0], [0, 0, 5, 5, 0, 5, 5, 4, 4, 4], [0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 0, 0, 2], [7, 7, 7, 0, 0, 2, 0, 2, 0, 0], [0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5], [0, 2, 0, 5, 0, 0, 0, 5, 5, 5], [2, 0, 0, 5, 5, 5, 5, 5, 5, 5]], "predicted_output": "[[0, 0, 5, 5, 5, 5, 5, 0, 0, 0],\n [0, 0, 5, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 5, 5, 0, 5, 5, 0, 0, 0],\n [0, 0, 5, 5, 5, 5, 5, 0, 0, 0],\n [0, 0, 5, 5, 5, 5, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 0, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 7, 7, 5, 5, 5, 5, 5, 5, 5],\n [0, 0, 0, 5, 0, 0, 0, 5, 5, 5],\n [0, 0, 0, 5, 5, 5, 5, 5, 5, 5]]", "expected_output": [[0, 0, 5, 5, 5, 5, 5, 0, 0, 2], [2, 0, 5, 7, 7, 7, 5, 0, 0, 0], [0, 0, 5, 5, 7, 5, 5, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 0, 0, 2], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5], [0, 2, 0, 5, 4, 4, 4, 5, 5, 5], [2, 0, 0, 5, 5, 5, 5, 5, 5, 5]]}, "22a4bbc2": {"instruction": "1. For each row in the grid, check if all nonzero entries in the row are the value 1. If so, replace every such 1 in that row with 2. Leave all other values (including 8 and 0) unchanged.\n2. For all other rows (i.e., any row containing the number 8 or with no 1s at all, or where not all nonzero entries are 1), leave the row unchanged.", "test_input": [[8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [1, 1, 1, 1], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 8, 8, 0], [0, 8, 8, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [1, 1, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [8, 8, 8, 8], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 1, 1, 1], [0, 1, 1, 1]], "predicted_output": "[[8, 8, 8, 0],\n [0, 2, 2, 2],\n [0, 8, 8, 0],\n [2, 2, 2, 2],\n [8, 8, 8, 0],\n [8, 8, 8, 0],\n [0, 2, 2, 2],\n [0, 8, 8, 0],\n [0, 8, 8, 0],\n [2, 2, 2, 2],\n [2, 2, 2, 2],\n [8, 8, 8, 8],\n [2, 2, 0, 0],\n [0, 8, 8, 8],\n [2, 2, 2, 0],\n [8, 8, 8, 8],\n [0, 2, 2, 0],\n [0, 2, 2, 0],\n [8, 8, 8, 8],\n [8, 8, 8, 8],\n [0, 2, 2, 2],\n [0, 2, 2, 2]]", "expected_output": [[2, 2, 2, 0], [0, 1, 1, 1], [0, 8, 8, 0], [2, 2, 2, 2], [8, 8, 8, 0], [8, 8, 8, 0], [0, 1, 1, 1], [0, 2, 2, 0], [0, 2, 2, 0], [1, 1, 1, 1], [1, 1, 1, 1], [8, 8, 8, 8], [2, 2, 0, 0], [0, 8, 8, 8], [1, 1, 1, 0], [2, 2, 2, 2], [0, 1, 1, 0], [0, 1, 1, 0], [8, 8, 8, 8], [8, 8, 8, 8], [0, 2, 2, 2], [0, 2, 2, 2]]}, "22eb0ac0": {"instruction": "1. For each row in the grid, check if the elements at the first and last columns of the row (i.e., the row's first and last cell) are both nonzero and equal to each other.\n2. If the nonzero numbers at the first and last cell are identical, change every element in that row to that number (i.e., fill the entire row with that number).\n3. If they are not equal or are zero, leave the row unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0, 0, 0, 0, 4]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [2, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [9, 0, 0, 0, 0, 0, 0, 0, 0, 4]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 0, 0, 0, 0, 0, 0, 0, 0, 4]]}, "230f2e48": {"instruction": "1. Identify the \"anchor row\" in the grid, defined as the row that contains a continuous horizontal segment of: [5, 2, 2, 0, 2, 2]. This row typically features special numbers (such as 5 and 0) flanked by two or more 2s.\n2. Replace all values in this anchor row to the right of the '0' in that segment (inclusive) with 7, except for columns occupied by the anchor sequence itself.\n3. For each cell containing a 2 in the anchor row and to the left of the '5', propagate a vertical line of 2s downward from this cell until another 2 or a non-7 cell is encountered (excluding the anchor row itself).\n4. For each cell containing a 2 in the anchor row and to the right of the '0', propagate a vertical line of 2s downward from this cell until another 2 or a non-7 cell is encountered (excluding the anchor row itself).\n5. For each column containing a 2 that was present in the anchor row, set all cells above the anchor row in that column to 7 (erase any 2s or 0s from those positions).\n6. For each 2 that is part of a vertical line described in steps 3 and 4, if it reaches a cell containing a 0 at the bottom end, keep the 0. Otherwise, set the bottom of the propagated line to 0 if it matches the anchor pattern.\n7. Erase all non-anchor 2s, 0s, and 5s from elsewhere in the grid (replace with 7), except those that were propagated vertically or originally part of the anchor row.\n8. Preserve all 5s in their original anchor row columns, but erase (set to 7) any elsewhere.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7], [7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7], [7, 2, 7, 7, 5, 2, 2, 0, 2, 2, 7, 7, 7, 0, 7, 7], [7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7], [7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7], [7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 2, 7, 2, 7, 7, 7, 5, 0, 2, 7, 7, 7], [7, 2, 7, 7, 2, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 2, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 2, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 5, 7, 7, 5, 7, 5, 7, 7, 7, 7, 7, 7, 2, 0, 5]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7],\n [7, 2, 7, 7, 5, 2, 2, 0, 2, 2, 7, 7, 7, 0, 7, 7],\n [7, 2, 7, 7, 7, 2, 2, 7, 2, 2, 7, 7, 7, 2, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7], [7, 7, 7, 7, 5, 2, 2, 0, 7, 7, 7, 2, 2, 0, 7, 7], [7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 2, 2, 2, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 0, 2, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7], [7, 2, 7, 7, 2, 7, 7, 7, 7, 7, 5, 0, 7, 7, 7, 7], [7, 2, 7, 7, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 2, 7, 0, 2, 2, 7, 7, 7, 7, 7, 7, 7], [7, 2, 7, 7, 2, 7, 2, 7, 7, 7, 7, 7, 7, 7, 2, 7], [7, 5, 7, 7, 5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 0, 5]]}, "234bbc79": {"instruction": "1. Remove the last three columns from each row of the input grid, reducing the width of the grid by three.\n2. Shift all nonzero values in each row to the left, filling from left to right, and padding the remaining columns on the right with zeros as needed.\n3. In the new shortened grid, fill any zeros between nonzero blocks in a row with the value of the nearest nonzero block to their left.", "test_input": [[0, 5, 0, 5, 1, 0, 0, 5, 0, 5, 8], [2, 2, 0, 0, 1, 0, 5, 3, 0, 0, 8], [0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[5, 5, 1, 5, 5, 0, 0, 0],\n [2, 2, 1, 5, 3, 0, 0, 0],\n [5, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 2, 1, 1, 0, 0, 0, 0], [2, 2, 0, 1, 0, 3, 8, 8], [0, 0, 0, 1, 3, 3, 0, 8]]}, "23581191": {"instruction": "1. Locate the only cell containing an 8 (the \"vertical seed\") and the only cell containing a 7 (the \"vertical seed\") in the input grid. Note their positions: let the 8 be at (r8, c8) and the 7 be at (r7, c7).\n2. For all rows, set the value at column c8 to 8, except for the row where the 7 seed is (row r7); in that row, do not overwrite any preexisting nonzero values.\n3. For all rows, set the value at column c7 to 7, except for the row where the 8 seed is (row r8); in that row, do not overwrite any preexisting nonzero values.\n4. Identify the rectangle formed by rows min(r8,r7) to max(r8,r7) and columns min(c8,c7) to max(c8,c7). In this rectangle, set every cell at (r8, j) for all columns j between c8 and c7 to 8, and every cell at (r7, j) for all columns j between c8 and c7 to 7, except where a \u20182\u2019 will be placed in the next step.\n5. Place a 2 at the intersection of row r8 and column c7, and at the intersection of row r7 and column c8.\n6. Fill all cells between (r8, c8) and (r8, c7) with 8.\n7. Fill all cells between (r7, c8) and (r7, c7) with 7.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 8, 7, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 2, 7, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0],\n [0, 7, 0, 0, 2, 7, 0, 0, 0],\n [0, 7, 0, 0, 8, 0, 0, 0, 0],\n [0, 7, 0, 0, 8, 0, 0, 0, 0]]", "expected_output": [[0, 7, 0, 0, 8, 0, 0, 0, 0], [8, 2, 8, 8, 8, 8, 8, 8, 8], [0, 7, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 8, 0, 0, 0, 0], [7, 7, 7, 7, 2, 7, 7, 7, 7], [0, 7, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 8, 0, 0, 0, 0]]}, "239be575": {"instruction": "1. Count the total number of 8s in the input grid.\n2. If the count of 8s is greater than or equal to the count of 2s, output [[8]].\n3. Otherwise, output [[0]].", "test_input": [[0, 8, 0, 0, 0, 0], [0, 0, 0, 8, 2, 2], [0, 8, 8, 8, 2, 2], [0, 8, 0, 0, 0, 8], [0, 0, 0, 8, 0, 0], [8, 2, 2, 0, 0, 8], [0, 2, 2, 0, 0, 0], [0, 8, 0, 8, 8, 0]], "predicted_output": "[[8]]", "expected_output": [[0]]}, "23b5c85d": {"instruction": "1. Scan the input grid to find the largest rectangle composed entirely of nonzero (non-background) values, where this rectangle is fully surrounded by background (0) cells or the borders of the grid.\n2. Within this rectangle, identify all color segments. Select the segment that is comprised of a single color (ignoring lines of other colors, and the outer region if the rectangle has a border).\n3. Output only the minimal bounding rectangle that contains all the cells of this largest solid color block (that is not 0 and not mixed with other colors)\u2014remove any borders or extra regions.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 3, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[6, 6, 6], [6, 6, 6], [6, 6, 6]]}, "25094a63": {"instruction": "1. For each row in the grid, scan for contiguous blocks of 8s that are at least 6 cells wide.\n2. For each such contiguous horizontal block of 8s, replace ALL 8s in this block with the number 4.\n3. Only apply this procedure to blocks that are not interrupted by any other number (the block must be pure 8s for at least length 6).\n4. All other elements of the grid remain unchanged.", "test_input": [[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 6, 8], [6, 1, 3, 1, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 1, 6, 1, 1, 1, 1, 1, 6, 2, 8, 3], [3, 3, 3, 3, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 3, 1, 1, 6, 2, 8, 8, 8, 8, 8, 8, 1, 3], [3, 3, 1, 3, 2, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 3, 2, 6, 3, 2, 1, 8, 8, 8, 2, 8], [1, 8, 3, 2, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 8, 8, 8, 2, 8, 3, 1, 3, 3, 6, 1, 3, 1], [8, 1, 2, 3, 1, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 6, 6, 1, 3, 8, 3, 3, 2, 8, 8, 8, 1], [3, 3, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 1, 8, 1, 8, 6, 2, 8, 1, 1, 1, 6, 3], [6, 1, 1, 2, 1, 6, 8, 3, 2, 2, 8, 1, 6, 3, 8, 2, 6, 3, 2, 1, 3, 3, 6, 1, 2, 8, 6, 2, 2, 2], [1, 3, 2, 8, 1, 2, 8, 8, 1, 3, 2, 2, 2, 2, 3, 3, 3, 8, 3, 2, 1, 1, 6, 6, 3, 8, 3, 3, 1, 6], [8, 1, 2, 6, 3, 1, 3, 2, 8, 1, 3, 3, 8, 1, 8, 3, 6, 6, 8, 3, 1, 8, 1, 3, 3, 2, 3, 3, 6, 3], [8, 8, 1, 3, 2, 8, 1, 1, 2, 1, 2, 1, 8, 1, 1, 3, 3, 3, 8, 8, 8, 3, 3, 3, 1, 8, 6, 1, 1, 3], [6, 8, 3, 2, 8, 1, 3, 1, 1, 3, 1, 1, 8, 3, 8, 8, 3, 3, 3, 6, 3, 3, 3, 1, 3, 6, 3, 2, 8, 6], [3, 8, 1, 1, 8, 2, 3, 3, 2, 8, 1, 6, 1, 6, 6, 8, 6, 3, 1, 8, 3, 8, 8, 8, 1, 1, 6, 3, 3, 1], [8, 8, 1, 2, 3, 6, 3, 3, 1, 8, 8, 3, 3, 6, 8, 1, 8, 1, 2, 2, 3, 8, 3, 8, 8, 2, 6, 8, 6, 1], [3, 1, 8, 2, 3, 3, 6, 3, 3, 6, 3, 1, 1, 3, 1, 1, 8, 1, 3, 1, 8, 2, 8, 1, 1, 2, 1, 3, 3, 8], [8, 8, 8, 1, 2, 8, 8, 3, 1, 1, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 1, 3, 8, 2, 8, 8, 1, 2, 8], [6, 8, 3, 8, 1, 2, 8, 3, 8, 3, 1, 8, 3, 3, 1, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 3, 3, 1, 1], [8, 1, 6, 3, 1, 2, 8, 8, 1, 1, 3, 8, 2, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 1, 3, 1], [2, 1, 2, 2, 1, 8, 6, 3, 1, 3, 8, 8, 8, 2, 2, 3, 3, 3, 3, 3, 3, 8, 8, 1, 3, 1, 1, 3, 2, 6], [1, 1, 3, 6, 6, 3, 2, 2, 8, 2, 6, 3, 8, 6, 2, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 8, 3, 3, 3], [1, 3, 6, 1, 8, 3, 2, 1, 3, 3, 1, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 8, 1, 2], [8, 8, 3, 8, 8, 2, 2, 2, 2, 8, 8, 6, 8, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 6, 1, 8, 6, 8, 6], [3, 3, 1, 1, 1, 8, 8, 3, 3, 3, 2, 8, 2, 3, 3, 3, 3, 3, 6, 8, 8, 2, 2, 8, 1, 1, 2, 1, 8, 8], [6, 6, 3, 3, 3, 6, 3, 3, 8, 8, 8, 8, 1, 3, 6, 8, 3, 3, 8, 1, 1, 1, 6, 1, 2, 6, 2, 6, 3, 8], [1, 2, 8, 3, 2, 1, 3, 3, 3, 3, 1, 3, 8, 6, 6, 1, 8, 1, 6, 2, 1, 6, 3, 3, 3, 8, 3, 8, 1, 8], [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 3, 3, 8]], "predicted_output": "[[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6],\n [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2],\n [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 8, 3, 6],\n [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 6, 3],\n [8, 1, 2, 3, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 4, 1, 1, 1, 1, 1, 1, 1, 4, 3, 6, 8],\n [6, 1, 3, 1, 4, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 3, 1, 6, 1, 1, 1, 1, 1, 6, 2, 8, 3],\n [3, 3, 3, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 1, 1, 6, 2, 8, 8, 8, 8, 8, 8, 1, 3],\n [3, 3, 1, 3, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 3, 2, 6, 3, 2, 1, 8, 8, 8, 2, 8],\n [1, 4, 3, 2, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 2, 8, 3, 1, 3, 3, 6, 1, 3, 1],\n [4, 1, 2, 3, 1, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 6, 6, 1, 3, 8, 3, 3, 2, 8, 8, 8, 1],\n [3, 3, 1, 1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 1, 4, 1, 8, 6, 2, 8, 1, 1, 1, 6, 3],\n [6, 1, 1, 2, 1, 6, 8, 3, 2, 2, 8, 1, 6, 3, 8, 2, 6, 3, 2, 1, 3, 3, 6, 1, 2, 8, 6, 2, 2, 2],\n [1, 3, 2, 8, 1, 2, 8, 8, 1, 3, 2, 2, 2, 2, 3, 3, 3, 8, 3, 2, 1, 1, 6, 6, 3, 8, 3, 3, 1, 6],\n [8, 1, 2, 6, 3, 1, 3, 2, 8, 1, 3, 3, 8, 1, 8, 3, 6, 6, 8, 3, 1, 8, 1, 3, 3, 2, 3, 3, 6, 3],\n [8, 8, 1, 3, 2, 8, 1, 1, 2, 1, 2, 1, 8, 1, 1, 3, 3, 3, 4, 4, 4, 3, 3, 3, 1, 8, 6, 1, 1, 3],\n [6, 8, 3, 2, 8, 1, 3, 1, 1, 3, 1, 1, 8, 3, 4, 4, 3, 3, 3, 6, 3, 3, 3, 1, 3, 6, 3, 2, 8, 6],\n [3, 8, 1, 1, 8, 2, 3, 3, 2, 8, 1, 6, 1, 6, 6, 8, 6, 3, 1, 8, 3, 8, 8, 8, 1, 1, 6, 3, 3, 1],\n [8, 8, 1, 2, 3, 6, 3, 3, 1, 8, 8, 3, 3, 6, 8, 1, 8, 1, 2, 2, 3, 8, 3, 8, 8, 2, 6, 8, 6, 1],\n [3, 1, 8, 2, 3, 3, 6, 3, 3, 6, 3, 1, 1, 3, 1, 1, 8, 1, 3, 1, 8, 2, 8, 1, 1, 2, 1, 3, 3, 8],\n [8, 8, 8, 1, 2, 8, 8, 3, 1, 1, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 1, 3, 8, 2, 8, 8, 1, 2, 8],\n [6, 8, 3, 8, 1, 2, 8, 3, 8, 3, 1, 8, 3, 3, 1, 3, 3, 3, 3, 3, 3, 8, 2, 8, 8, 8, 3, 3, 1, 1],\n [8, 1, 6, 3, 1, 2, 8, 8, 1, 1, 3, 8, 2, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 1, 3, 1],\n [2, 1, 2, 2, 1, 8, 6, 3, 1, 3, 8, 8, 8, 2, 2, 3, 3, 3, 3, 3, 3, 8, 8, 1, 3, 1, 1, 3, 2, 6],\n [1, 1, 3, 6, 6, 3, 2, 2, 8, 2, 6, 3, 8, 6, 2, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 8, 3, 3, 3],\n [1, 3, 6, 1, 8, 3, 2, 1, 3, 3, 1, 3, 8, 3, 8, 3, 3, 3, 3, 3, 3, 3, 8, 3, 8, 3, 3, 8, 1, 2],\n [8, 8, 3, 8, 8, 2, 2, 2, 2, 8, 8, 6, 8, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 6, 1, 8, 6, 8, 6],\n [3, 3, 1, 1, 1, 8, 8, 3, 3, 3, 2, 8, 2, 3, 3, 3, 3, 3, 6, 8, 8, 2, 2, 8, 1, 1, 2, 1, 8, 8],\n [6, 6, 3, 3, 3, 6, 3, 3, 8, 8, 8, 8, 1, 3, 6, 8, 3, 3, 8, 1, 1, 1, 6, 1, 2, 6, 2, 6, 3, 8],\n [1, 2, 8, 3, 2, 1, 3, 3, 3, 3, 1, 3, 8, 6, 6, 1, 8, 1, 6, 2, 1, 6, 3, 3, 3, 8, 3, 8, 1, 8],\n [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 3, 3, 8]]", "expected_output": [[6, 8, 3, 3, 3, 8, 1, 8, 3, 8, 8, 1, 6, 3, 1, 2, 3, 1, 1, 1, 3, 1, 2, 2, 6, 8, 2, 3, 8, 6], [1, 6, 6, 8, 8, 1, 3, 3, 6, 3, 8, 8, 2, 1, 1, 3, 6, 8, 8, 3, 1, 2, 1, 8, 2, 3, 8, 8, 8, 2], [8, 8, 3, 6, 3, 1, 6, 8, 3, 8, 6, 3, 1, 2, 8, 1, 8, 2, 1, 3, 2, 4, 4, 4, 4, 4, 1, 8, 3, 6], [1, 3, 1, 2, 8, 1, 8, 2, 2, 2, 1, 3, 1, 8, 3, 6, 3, 1, 1, 3, 1, 4, 4, 4, 4, 4, 1, 2, 6, 3], [8, 1, 2, 3, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 8, 1, 1, 4, 4, 4, 4, 4, 8, 3, 6, 8], [6, 1, 3, 1, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 3, 1, 6, 4, 4, 4, 4, 4, 6, 2, 8, 3], [3, 3, 3, 3, 8, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 1, 1, 6, 2, 8, 8, 8, 8, 8, 8, 1, 3], [3, 3, 1, 3, 2, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 1, 1, 3, 2, 6, 3, 2, 1, 8, 8, 8, 2, 8], [1, 8, 3, 2, 8, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 8, 8, 8, 2, 8, 3, 1, 3, 3, 6, 1, 3, 1], [8, 1, 2, 3, 1, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 8, 6, 6, 1, 3, 8, 3, 3, 2, 8, 8, 8, 1], [3, 3, 1, 1, 2, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 8, 1, 8, 1, 8, 6, 2, 8, 1, 1, 1, 6, 3], [6, 1, 1, 2, 1, 6, 8, 3, 2, 2, 8, 1, 6, 3, 8, 2, 6, 3, 2, 1, 3, 3, 6, 1, 2, 8, 6, 2, 2, 2], [1, 3, 2, 8, 1, 2, 8, 8, 1, 3, 2, 2, 2, 2, 3, 3, 3, 8, 3, 2, 1, 1, 6, 6, 3, 8, 3, 3, 1, 6], [8, 1, 2, 6, 3, 1, 3, 2, 8, 1, 3, 3, 8, 1, 8, 3, 6, 6, 8, 3, 1, 8, 1, 3, 3, 2, 3, 3, 6, 3], [8, 8, 1, 3, 2, 8, 1, 1, 2, 1, 2, 1, 8, 1, 1, 3, 3, 3, 8, 8, 8, 3, 3, 3, 1, 8, 6, 1, 1, 3], [6, 8, 3, 2, 8, 1, 3, 1, 1, 3, 1, 1, 8, 3, 8, 8, 3, 3, 3, 6, 3, 3, 3, 1, 3, 6, 3, 2, 8, 6], [3, 8, 1, 1, 8, 2, 3, 3, 2, 8, 1, 6, 1, 6, 6, 8, 6, 3, 1, 8, 3, 8, 8, 8, 1, 1, 6, 3, 3, 1], [8, 8, 1, 2, 3, 6, 3, 3, 1, 8, 8, 3, 3, 6, 8, 1, 8, 1, 2, 2, 3, 8, 3, 8, 8, 2, 6, 8, 6, 1], [3, 1, 8, 2, 3, 3, 6, 3, 3, 6, 3, 1, 1, 3, 1, 1, 8, 1, 3, 1, 8, 2, 8, 1, 1, 2, 1, 3, 3, 8], [8, 8, 8, 1, 2, 8, 8, 3, 1, 1, 3, 3, 3, 3, 6, 4, 4, 4, 4, 4, 4, 1, 3, 8, 2, 8, 8, 1, 2, 8], [6, 8, 3, 8, 1, 2, 8, 3, 8, 3, 1, 8, 3, 3, 1, 4, 4, 4, 4, 4, 4, 8, 2, 8, 8, 8, 3, 3, 1, 1], [8, 1, 6, 3, 1, 2, 8, 8, 1, 1, 3, 8, 2, 3, 8, 4, 4, 4, 4, 4, 4, 3, 8, 3, 8, 3, 3, 1, 3, 1], [2, 1, 2, 2, 1, 8, 6, 3, 1, 3, 8, 8, 8, 2, 2, 4, 4, 4, 4, 4, 4, 8, 8, 1, 3, 1, 1, 3, 2, 6], [1, 1, 3, 6, 6, 3, 2, 2, 8, 2, 6, 3, 8, 6, 2, 4, 4, 4, 4, 4, 4, 3, 1, 1, 3, 3, 8, 3, 3, 3], [1, 3, 6, 1, 8, 3, 2, 1, 3, 3, 1, 3, 8, 3, 8, 4, 4, 4, 4, 4, 4, 3, 8, 3, 8, 3, 3, 8, 1, 2], [8, 8, 3, 8, 8, 2, 2, 2, 2, 8, 8, 6, 8, 3, 3, 4, 4, 4, 4, 4, 4, 2, 2, 1, 6, 1, 8, 6, 8, 6], [3, 3, 1, 1, 1, 8, 8, 3, 3, 3, 2, 8, 2, 3, 3, 3, 3, 3, 6, 8, 8, 2, 2, 8, 1, 1, 2, 1, 8, 8], [6, 6, 3, 3, 3, 6, 3, 3, 8, 8, 8, 8, 1, 3, 6, 8, 3, 3, 8, 1, 1, 1, 6, 1, 2, 6, 2, 6, 3, 8], [1, 2, 8, 3, 2, 1, 3, 3, 3, 3, 1, 3, 8, 6, 6, 1, 8, 1, 6, 2, 1, 6, 3, 3, 3, 8, 3, 8, 1, 8], [8, 6, 2, 6, 3, 8, 2, 8, 8, 3, 1, 1, 6, 1, 1, 2, 1, 8, 1, 2, 1, 3, 1, 8, 3, 6, 3, 3, 3, 8]]}, "252143c9": {"instruction": "1. Identify all cells that do not contain the background value (the most common value in the grid, which is 7). Mark these as \"non-background\" cells.\n2. For each non-background cell, determine its value and location.\n3. Remove (replace) all non-background cells with the background value (7), except for those that form a distinct diagonal pattern starting from the bottom-left and moving toward the upper-right. These diagonals represent a \"staircase\" pattern, where each subsequent non-background value appears one cell to the right and one cell above the previous one.\n4. For each such staircase/diagonal:\n    a. Preserve only the lowest diagonal of unique non-background values in the grid. All other cells, regardless of value, become background (7).\n    b. The preserved cells will form a single staircase that extends from the lower left toward the upper right, using the original non-background cell values that lay upon this diagonal.\n5. All other cells, including those in the same row or column as the preserved diagonals but not lying upon them, are changed to the background value (7).", "test_input": [[8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7], [7, 7, 8, 7, 8, 7, 7, 7, 6, 6, 7, 7, 6], [7, 8, 7, 8, 7, 8, 7, 7, 7, 6, 7, 7, 7], [7, 7, 7, 8, 7, 7, 7, 7, 6, 7, 6, 6, 7], [8, 7, 8, 7, 8, 7, 7, 6, 7, 6, 7, 7, 6], [7, 8, 7, 7, 7, 8, 7, 6, 6, 6, 7, 6, 7], [7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7], [7, 4, 4, 7, 4, 7, 7, 7, 2, 7, 7, 2, 7], [4, 7, 7, 7, 7, 7, 7, 7, 7, 2, 2, 7, 7], [7, 4, 7, 4, 4, 7, 7, 7, 2, 7, 7, 7, 7], [7, 7, 4, 4, 4, 7, 7, 2, 7, 2, 2, 2, 7], [7, 4, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 2], [7, 7, 7, 7, 4, 7, 7, 2, 7, 7, 2, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7, 7],\n [7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 2, 7, 7],\n [7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 2],\n [4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "253bf280": {"instruction": "1. For each row in the grid, identify all pairs of cells containing the value 8 in that row. If there are two or more 8s in a row, fill all cells strictly between them in that same row with the value 3 (replace zeros or other values, if any, with 3).\n2. For each column in the grid, identify all pairs of cells containing the value 8 in that column. If there are two or more 8s in a column, fill all cells strictly between them in that same column with the value 3 (replace zeros or other values, if any, with 3).\n3. Leave all cells which originally contain 8, or cells outside the described regions, unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 3, 3, 3, 3, 3, 3, 3, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 3, 3, 3, 3, 3, 3, 3, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "2546ccf6": {"instruction": "1. Identify each vertical strip in the grid separated by \"8\" (the special column value). Strips are contiguous vertical regions bordered by columns of \"8\".\n2. For each such strip:\n    a. Scan every row within the strip to see if any nonzero value (other than 0 or 8) occurs in the corresponding strip in any row above the current one.\n    b. In each row, for every nonzero cell (other than 0 or 8), check each corresponding cell in all other strips that lie between columns of \"8\". If the value at that position exists in another strip within the same \"row block\" (region between horizontal lines of \"8\"), ensure both are set to the value from the uppermost row in which this value occurs within that region.\n3. For every \"row block\" (the rows between full horizontal \"8\" lines), if a pattern appears in one vertical strip in that block, propagate it to all matching strip-locations within that block, so that all such strips in the block have an identical pattern.\n4. All columns and rows made entirely of 0s or \"8\"s (the barriers) remain unchanged.", "test_input": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 2, 2, 2, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 2, 8, 0, 0, 0, 0, 0, 8, 0, 0, 2, 2, 2, 8, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0],\n [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 4, 4, 4, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 4, 4, 4, 0, 0, 8, 0, 0, 4, 4, 4, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 2, 0, 8, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 8, 2, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 1, 8, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 1, 1, 0, 8, 0, 1, 1, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 4, 0, 8, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]]}, "256b0a75": {"instruction": "1. Find the smallest rectangular bounding box that encloses all nonzero cells in the input grid.\n2. Expand this bounding box by extending it leftward and upward as much as possible until you reach either the bordering zeros or the grid boundary, so that every row/column that contains a nonzero value is included and possibly up to one row/column of surrounding zeros.\n3. For every cell in this bounding box, do the following:\n    a. If the cell contains a nonzero value from the input grid in its original position, retain it.\n    b. If the cell is zero in the input grid, determine if it lies inside the minimal rectangle that contains any contiguous block of nonzero values (horizontal or vertical, as seen in the output patterns), and if so, fill it with the background color used for that rectangle in the output (for example, 1, 3, or 7 as contextually assigned from the training samples).\n4. Identify subregions in the bounding box that correspond to rectangles/blocks of a single color in the output (such as regions fully filled with 1, 3, or 7). Fill those regions with their color, overwriting zeros, but leave original nonzero values in place unless the output examples show otherwise.\n5. For any prominent blocks of color (such as horizontal or vertical strips found by scanning for contiguous nonzero areas seen in outputs), extend their color as in the examples, filling the enclosing rectangle(s) inside the overall region.\n6. For special nonzero numbers that are not part of large colored rectangles (e.g., isolated digits like 9, 5, etc.), make sure they remain in their respective places as per their location in the input.\n7. Any cells outside of the expanded bounding box should be set to 0.", "test_input": [[7, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[7, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[7, 0, 0, 0, 0, 0, 2, 6, 9, 6, 7, 6, 4, 6, 6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 7, 6, 4, 6, 6, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 7, 6, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 2, 6, 6, 6, 7, 6, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 7, 6, 4, 6, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 7, 6, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 7, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 7, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 7, 6, 6, 6, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9], [3, 3, 3, 3, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 6, 6, 6, 4, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 6, 4, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 6, 4, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 6, 4, 6, 6, 6, 6, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 6, 5, 6, 4, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 5, 6, 4, 6, 6, 6, 6, 6, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 5, 6, 4, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 5, 6, 4, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 5, 6, 4, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "25c199f5": {"instruction": "1. Locate the inner rectangle area bordered by the columns containing the vertical stripes of the color 6 (which form a consistent separator between each area of interest). Specifically, these stripes appear at regular intervals (always at columns 5 and 11 in the input grids).\n2. Extract the 5x5 grid defined by rows 0\u20134 and columns 6\u201310, but shifted so that the first column of the 5x5 grid is at index 6, and the last at index 10.\n3. Rearrange the contents of the extracted 5x5 grid so that each row of the output grid is constructed from a specific row in the input grid:\n    - The first output row corresponds to the fourth row (index 3) of the extracted block.\n    - The second output row corresponds to the fifth row (index 4) of the extracted block.\n    - The third output row corresponds to the third row (index 2) of the extracted block.\n    - The fourth output row corresponds to the first row (index 0) of the extracted block.\n    - The fifth output row corresponds to the second row (index 1) of the extracted block.\n4. Fill in the rearranged rows into a new 5x5 grid, preserving cell values.", "test_input": [[7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 6, 7, 7, 5, 5, 7, 6, 7, 7, 7, 7, 7], [7, 1, 1, 7, 7, 6, 7, 7, 5, 5, 7, 6, 7, 7, 7, 1, 7], [7, 1, 1, 7, 7, 6, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 5, 5, 7],\n [7, 7, 7, 7, 7],\n [7, 7, 5, 5, 7],\n [7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 1, 7], [7, 7, 5, 5, 7], [7, 7, 5, 5, 7], [7, 1, 1, 7, 7], [7, 1, 1, 7, 7]]}, "25d487eb": {"instruction": "1. Identify the central \"pyramid\" or triangle shape in the input grid, which consists of a block colored with a nonzero value (here, color 4), possibly with a special center (here, color 8).\n2. Locate the row that contains the special center value (color 8).\n3. Starting from the cell directly above the special center and moving upward in the same column, replace each cell in that column with the center\u2019s color (color 8) until you reach the top of the pyramid or the first row containing a nonzero value in that column (which is part of the pyramid\u2019s vertical axis).\n4. Retain all other cells\u2019 original values.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0],\n [0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0],\n [0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 4, 4, 4, 8, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "25d8a9c8": {"instruction": "1. For each row in the input grid, check if all values in the row are identical (i.e., every element in the row is the same).\n2. If the row contains all identical values, replace every element in that row with the value 5 in the output grid.\n3. If the row does not contain all identical values, replace every element in that row with 0 in the output grid.", "test_input": [[4, 4, 4], [3, 2, 3], [8, 8, 8]], "predicted_output": "[[5, 5, 5],\n [0, 0, 0],\n [5, 5, 5]]", "expected_output": [[5, 5, 5], [0, 0, 0], [5, 5, 5]]}, "25e02866": {"instruction": "1. Identify the smallest rectangle in the input grid that encompasses all non-background elements (i.e., all cells that are not the border/background color \u2013 in this case, '4').\n2. Crop this rectangle from the input grid to create a subgrid.\n3. Within this cropped subgrid, further identify all distinct non-background regions. If the cropped subgrid contains separable distinct areas (distinct colored shapes or blocks), process each separately:\n    a. For each region, crop a minimal bounding rectangle that contains all of its non-background cells.\n4. For each minimal bounding box found in step 3:\n    a. If more than one uniquely colored shape exists, select the one which contains the largest non-background area or that contains the unique internal feature (e.g., a unique number or central region). This is the main object of focus.\n5. Extract this main object as a new grid.\n6. Output this extracted grid as the final result.", "test_input": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4], [4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4], [4, 3, 3, 2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4], [4, 3, 2, 2, 3, 3, 3, 4, 3, 5, 5, 3, 3, 3, 4, 4, 4, 4], [4, 3, 3, 3, 3, 3, 3, 4, 3, 5, 5, 3, 3, 3, 4, 4, 4, 4], [4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4], [4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4], [4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 1, 3, 4, 4], [4, 4, 3, 3, 3, 8, 8, 3, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4], [4, 4, 3, 3, 3, 8, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4], [4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3],\n [3, 3, 2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3],\n [3, 2, 2, 3, 3, 3, 4, 3, 5, 5, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 4, 3, 5, 5, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4],\n [3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 1],\n [3, 3, 3, 8, 8, 3, 3, 4, 4, 3, 3, 3, 3],\n [3, 3, 3, 8, 3, 3, 3, 4, 4, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3],\n [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3]]", "expected_output": [[3, 3, 3, 3, 3, 3], [3, 3, 2, 3, 1, 3], [3, 2, 2, 3, 3, 3], [3, 5, 5, 8, 8, 3], [3, 5, 5, 8, 3, 3], [3, 3, 3, 3, 3, 3]]}, "25ff71a9": {"instruction": "1. Shift all rows of the grid down by one position. The bottom row wraps around to become the new top row.\n2. Fill the top row (which was previously the bottom row) with zeros.", "test_input": [[0, 0, 0], [0, 1, 0], [0, 0, 0]], "predicted_output": "[[0, 0, 0],\n [0, 0, 0],\n [0, 1, 0]]", "expected_output": [[0, 0, 0], [0, 0, 0], [0, 1, 0]]}, "2601afb7": {"instruction": "1. Identify the leftmost vertical stripe consisting of repeated non-7 values within a column (other than the border 7s). Move this stripe horizontally rightward, so that the stripe is centered within the input region that originally contained non-7 values, replacing the original column with 7s.\n2. All values to the left of the original vertical stripe (within the inner non-7 region) are shifted to the right, following the movement of the stripe; new leftmost cells are filled by the values that were in the far right of the non-7 inner region.\n3. Any distinct columns of non-7 values on the bottom rows that were not part of the original vertical stripe are moved to the new rightmost positions within the non-7 region, maintaining their values and left-right order.\n4. Any other colored values (not part of the moved stripe or the relocated columns) are shifted to maintain the relative row and column positions they had inside the original non-7 region, but now aligned according to the new locations of the moved columns.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 7, 7, 7, 7, 7, 7, 7, 6, 7], [7, 0, 7, 7, 7, 8, 7, 9, 7, 6, 7], [7, 0, 7, 7, 7, 8, 7, 9, 7, 6, 7], [7, 0, 7, 7, 7, 8, 7, 9, 7, 6, 7], [7, 0, 7, 2, 7, 8, 7, 9, 7, 6, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7],\n [7, 8, 9, 0, 7, 7, 6, 7, 7, 7, 7],\n [7, 8, 9, 0, 7, 7, 6, 7, 7, 7, 7],\n [7, 8, 9, 0, 7, 7, 6, 7, 7, 7, 7],\n [7, 8, 9, 0, 7, 7, 6, 7, 7, 7, 7],\n [7, 8, 9, 0, 7, 2, 6, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7], [7, 7, 7, 7, 7, 7, 7, 8, 7, 9, 7], [7, 7, 7, 0, 7, 2, 7, 8, 7, 9, 7], [7, 7, 7, 0, 7, 2, 7, 8, 7, 9, 7], [7, 7, 7, 0, 7, 2, 7, 8, 7, 9, 7], [7, 6, 7, 0, 7, 2, 7, 8, 7, 9, 7]]}, "264363fd": {"instruction": "1. Identify every contiguous rectangular region (horizontal or vertical, of arbitrary size) of cells containing the same non-background color inside the grid. The background color is the value that forms the outer \"frame\" of the grid (in this example, 4).\n2. For every such contiguous colored region, change its color as follows, depending on its position and function:\n    a. For vertical or horizontal \"rectangles\" (thick bars/blocks) of color 1, surrounded by background color 4, change all their values from 1 to 2 **if** they overlap a cell that was 2 in the input (i.e., if part of the region is already a 2 in the input).\n    b. For any special \"corner\" blocks that had a single 2 in the input, convert any corresponding neighboring 1s in the same row or column to 2, forming an L-shape, and keep 2 as 2.\n3. For other \"rectangles\" or blocks of 1 not overlapping or adjacent to a 2, leave them as is (keep them 1).\n4. All regions of color 3 and 8, if present in the input, preserve their color and location in the output.\n5. All background cells (value 4) remain unchanged in the output.", "test_input": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 8, 8, 2, 8, 8, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 8, 8, 2, 8, 8, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]}, "2685904e": {"instruction": "1. Identify the first row from the bottom (excluding any all-zero rows) that contains nonzero values; call this the \"pattern row.\" In the provided grid, this is row 8 (zero-indexed).\n2. Starting above the always-present row of 5s, fill a block of consecutive rows (number of rows = number of nonzero, non-unique values in the pattern row) immediately above row 6. If there are no duplicate nonzero values in the pattern row, use just the unique nonzero values as block size. If there are some values appearing more than once, fill a rectangle of height (number of appearances of the most common nonzero value) using the logic below, and repeat their pattern in consecutive rows (see the given examples for how this subdivision is handled).\n3. In each such added row:\n    a. For each column, if the element in the pattern row is unique, copy it (except for zeros).\n    b. If the element is not unique (appears multiple times), copy only at positions matching the original pattern row.\n    c. Any repeated nonzero entry in the pattern row is placed at each corresponding position in the block of rows (unless the pattern builds a rectangle, as in some provided examples\u2014then, fill the rectangle according to this pattern).\n    d. All other entries are set to zero.\n4. All other rows and values outside these inserted rows remain unchanged from the input.", "test_input": [[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[8, 8, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [2, 3, 6, 4, 6, 2, 4, 4, 3, 9],\n [2, 3, 6, 4, 6, 2, 4, 4, 3, 9],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [2, 3, 6, 4, 6, 2, 4, 4, 3, 9]]", "expected_output": [[8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 0, 6, 2, 0, 0, 3, 0], [2, 3, 6, 0, 6, 2, 0, 0, 3, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 3, 6, 4, 6, 2, 4, 4, 3, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "2697da3f": {"instruction": "1. Identify the bounding box of all nonzero (i.e., colored) cells in the input grid.  \n2. Extract this subgrid from the input and call it the \"core pattern.\"  \n3. Create a new output grid which is a 2x enlargement of the input grid in both dimensions, minus 1 (i.e., for an HxW input, make an output of size (2H-1)x(2W-1)).  \n4. Place four copies of the \"core pattern\" into the output grid so that:  \n   - The upper-left copy is in the top-left corner,  \n   - The upper-right copy is in the top-right corner,  \n   - The lower-left copy is in the bottom-left corner,  \n   - The lower-right copy is in the bottom-right corner,  \n   - There is a single row and column of space (zeros) between each pair of adjacent copies.\n5. Draw a cross pattern (a \"+\" shape) in the clear central strip between the four patterns, so the center column and center row are filled with the \"stem\" segments of the original pattern, if present. Specifically, mirror the vertical and horizontal segments from the center of the core pattern into the center row and center column of the output grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 4, 4, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 0, 0, 0], [0, 4, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 0, 0, 0], [0, 0, 4, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 4, 0, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 0],\n [0, 0, 4, 4, 0, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0],\n [0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0],\n [0, 0, 4, 4, 0, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0],\n [0, 0, 4, 0, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 4, 0, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 0],\n [0, 0, 4, 4, 0, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0],\n [0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0],\n [0, 0, 4, 4, 0, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0],\n [0, 0, 4, 0, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 0], [0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0], [4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4], [0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0], [0, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0]]}, "272f95fa": {"instruction": "1. Identify all horizontal lines in the grid that consist entirely of the value 8. These lines act as \"dividers\" separating the grid into distinct horizontal sections.\n2. For each section between the dividers (including the sections above the first divider and below the last divider), assign a unique color to be used for filling within that section:\n    - The first section above the top 8-divider: use color 2.\n    - The first section below the top 8-divider: use color 4 for columns before the first 8, color 6 for columns between the two 8s, and color 3 for columns after the second 8.\n    - Alternate sections below each divider: repeat colors as above, cycling through (2, then 4/6/3, then 1, etc.), with 1 for sections beneath subsequent dividers after the first group, as observed in the examples.\n3. Within each section (between and not including the 8-divider rows), scan every row:\n    a. For each row, identify columns that have a single 8 in the row, typically forming a vertical pair (\"pillars\" or \"bars\").\n    b. For each non-8/non-divider cell within that section, fill as follows:\n        - Fill cells between the first and second 8 in the row with the primary color assigned to that section (see the color assignment in step 2).\n        - For rows/columns before the first 8, fill with the secondary color for that section if present (e.g., 4 in output); after the second 8, fill with another secondary color if present (e.g., 3 in output).\n4. Leave all cells that were originally 8 unchanged.\n5. Leave all cells that are outside these colored regions (originally 0 and not to be colored per step 3) as 0 in the output.", "test_input": [[0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2],\n [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3],\n [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3],\n [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3],\n [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3],\n [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2]]", "expected_output": [[0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3], [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3], [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3], [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3], [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3], [4, 4, 4, 8, 6, 6, 6, 6, 8, 3, 3, 3, 3, 3, 3], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 0]]}, "2753e76c": {"instruction": "1. Identify all distinct colored blocks in the input grid, where a \"block\" is a contiguous group of nonzero cells of the same value, separated from others by zeros or the grid boundary.\n2. For each distinct colored block, extract its minimal bounding box (the smallest rectangle containing all its nonzero cells).\n3. Discard any rows and columns that are entirely zero within each bounding box, so each extracted subgrid only contains nonzero values and minimal necessary surrounding zeros.\n4. Collect all such extracted subgrids. Maintain their original order of first appearance in the grid when scanning from top-left to bottom-right.\n5. Assemble a new grid using the following layout: place each extracted subgrid as a row in the output grid, arranging them from top to bottom in the order discovered. \n   - For each subgrid, place it so that its top edge is aligned with the corresponding row in the output, separated below by exactly enough empty (zero) rows to fit the next subgrid.\n   - All subgrids should be right-aligned in the output grid; pad with zero columns on the left if needed for alignment.\n   - Ensure the output grid is just large enough to fit all subgrids stacked vertically, with width matching the widest extracted subgrid.", "test_input": [[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 8], [0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 4, 4, 4, 0, 3, 3, 3, 3, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 4, 4, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 8, 8],\n [3, 3, 3, 8, 8],\n [3, 3, 3, 0, 0],\n [3, 3, 3, 0, 0],\n [0, 0, 0, 0, 0],\n [4, 4, 4, 0, 0],\n [4, 4, 4, 0, 0],\n [4, 4, 4, 4, 4],\n [0, 0, 0, 4, 4],\n [0, 3, 3, 3, 3],\n [0, 3, 3, 3, 3],\n [4, 4, 0, 0, 0],\n [4, 4, 0, 0, 0]]", "expected_output": [[3, 3, 3, 3, 3], [0, 4, 4, 4, 4], [0, 0, 0, 8, 8]]}, "278e5215": {"instruction": "1. Identify the distinct, non-overlapping colored block region in the upper right quadrant of the input grid (in this example, columns 8 to 17 and rows 0 to 2). Extract this as the \"pattern region\".\n2. For the remainder of the output grid, build a new grid by repeatedly sampling and rearranging the small unique patterns (such as 2x2 or 3x3 arrangements) found within the extracted pattern region. When creating the output grid, allow for overlap and repetition. Ensure that the size of the output grid is approximately square and matches the dimensions apparent in the training outputs for similar patterns (e.g., 8 rows x 10 columns).\n3. When constructing each output row:\n    a. For each new row, select a 2x2 or 3x3 sub-pattern from the extracted region (scan either row-wise or column-wise) and paste it into the output grid, making sure to reuse blocks as needed and shuffle their order to create a collage.\n    b. Continue this process for each subsequent row, shifting which blocks you copy to allow for tiling, overlapping, and variation. \n    c. If there are any dominant horizontal or vertical bands or borders in the pattern region, preserve their structural character (e.g., keep lines of the same color together as sources for the output's local areas).\n4. Continue copying, overlapping, and tiling subpatterns from the pattern region to fill the output grid until the target output size is reached.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 4, 8, 8, 3, 3, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 4, 8, 8, 3, 3, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 0, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 5, 5, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 5, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 4, 4, 8, 8, 3, 3, 6, 6, 2],\n [4, 4, 4, 8, 8, 3, 3, 6, 6, 4],\n [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n [2, 4, 4, 8, 8, 3, 3, 6, 6, 2],\n [4, 4, 4, 8, 8, 3, 3, 6, 6, 4],\n [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n [2, 4, 4, 8, 8, 3, 3, 6, 6, 2],\n [4, 4, 4, 8, 8, 3, 3, 6, 6, 4]]", "expected_output": [[9, 4, 4, 9, 9, 8, 9, 3, 6, 6], [2, 4, 4, 4, 8, 8, 3, 3, 6, 6], [9, 9, 4, 9, 8, 8, 9, 9, 6, 6], [2, 4, 4, 4, 8, 9, 9, 9, 6, 9], [9, 4, 9, 9, 8, 9, 9, 3, 6, 9], [9, 4, 4, 4, 8, 8, 3, 3, 6, 6], [9, 9, 4, 4, 9, 9, 9, 9, 6, 6]]}, "27a28665": {"instruction": "1. Count the number of nonzero cells in the input grid.\n2. Output a single-cell grid containing this count.", "test_input": [[7, 7, 0], [7, 0, 7], [0, 7, 0]], "predicted_output": "[[6]]", "expected_output": [[1]]}, "27a77e38": {"instruction": "1. Identify the last row in the grid where all the elements are identical and nonzero. This is the reference row.\n2. Find the first nonzero value in the row immediately above the bottommost row (or, more generally, in the row immediately above the bottom region of zero-rows).\n3. In the very last row, set the element in the same column as the identified nonzero value (from step 2) to that value. Leave all other elements in the last row unchanged.\n4. Leave the rest of the grid unchanged.", "test_input": [[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[9, 1, 2, 8, 4, 9, 8, 2, 1],\n [4, 4, 3, 1, 2, 7, 6, 7, 9],\n [2, 1, 6, 9, 7, 8, 4, 3, 6],\n [9, 8, 6, 3, 4, 2, 9, 1, 7],\n [5, 5, 5, 5, 5, 5, 5, 5, 5],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[9, 1, 2, 8, 4, 9, 8, 2, 1], [4, 4, 3, 1, 2, 7, 6, 7, 9], [2, 1, 6, 9, 7, 8, 4, 3, 6], [9, 8, 6, 3, 4, 2, 9, 1, 7], [5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0, 0]]}, "27f8ce4f": {"instruction": "1. Let N be the size of the input grid (N x N).\n2. Create a new grid of size (3N) x (3N), initialized with zeros.\n3. Place copies of the original input grid into three specific locations in the new grid:\n   a. Top-left corner: Place the input grid at position (0, 0).\n   b. Top-center: Place the input grid at position (0, N).\n   c. Middle-left: Place the input grid at position (N, 0).\n4. Place a single copy of the input grid, offset down and right by N: at position (N, N).\n5. Place single copies of the input grid at:\n   a. Bottom-left: position (2N, 0).\n   b. Bottom-center: position (2N, N).\n   c. Bottom-right: position (2N, 2N).\n   d. Middle-right: position (N, 2N).\n   e. Top-right: position (0, 2N).\n6. Fill the remaining empty cells in the 3N x 3N grid with zeros (if not already zero).", "test_input": [[9, 6, 7], [8, 7, 7], [2, 8, 7]], "predicted_output": "[[9, 6, 7, 9, 6, 7, 9, 6, 7],\n [8, 7, 7, 8, 7, 7, 8, 7, 7],\n [2, 8, 7, 2, 8, 7, 2, 8, 7],\n [9, 6, 7, 9, 6, 7, 0, 0, 0],\n [8, 7, 7, 8, 7, 7, 0, 0, 0],\n [2, 8, 7, 2, 8, 7, 0, 0, 0],\n [9, 6, 7, 9, 6, 7, 9, 6, 7],\n [8, 7, 7, 8, 7, 7, 8, 7, 7],\n [2, 8, 7, 2, 8, 7, 2, 8, 7]]", "expected_output": [[0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7], [0, 0, 0, 9, 6, 7, 9, 6, 7], [0, 0, 0, 8, 7, 7, 8, 7, 7], [0, 0, 0, 2, 8, 7, 2, 8, 7], [0, 0, 0, 0, 0, 0, 9, 6, 7], [0, 0, 0, 0, 0, 0, 8, 7, 7], [0, 0, 0, 0, 0, 0, 2, 8, 7]]}, "281123b4": {"instruction": "1. Divide the input grid into 4 contiguous vertical sections of equal width, each section containing a set of columns.\n2. For each section, extract the column at index 2, 5, 10, and 15 from the left (i.e., the 3rd, 6th, 11th, and 16th columns, counting from 0), forming a new 4x4 grid where each output column comes from the corresponding section in the input.\n3. For each cell in the extracted columns, retain the value at the corresponding row, resulting in a 4x4 grid.\n4. Output this new 4x4 grid as the result.", "test_input": [[8, 8, 8, 0, 3, 5, 0, 5, 5, 3, 9, 0, 0, 0, 3, 0, 0, 0, 0], [8, 0, 8, 8, 3, 5, 5, 5, 5, 3, 0, 0, 9, 9, 3, 4, 4, 0, 4], [8, 0, 0, 8, 3, 5, 0, 5, 5, 3, 0, 0, 0, 9, 3, 0, 4, 0, 4], [0, 0, 8, 8, 3, 0, 0, 5, 5, 3, 9, 9, 9, 0, 3, 0, 4, 4, 0]], "predicted_output": "[[8, 5, 0, 0],\n [8, 5, 0, 4],\n [0, 5, 0, 0],\n [8, 5, 9, 0]]", "expected_output": [[9, 8, 8, 5], [4, 4, 9, 9], [8, 4, 5, 9], [9, 9, 9, 8]]}, "28bf18c6": {"instruction": "1. Identify the smallest bounding rectangle that contains all nonzero (colored) cells in the input grid.\n2. Extract this subgrid (cropping out any all-zero rows and columns from the top, bottom, left, or right).\n3. Rotate the extracted subgrid 90 degrees counterclockwise.\n4. Place the rotated subgrid as the new output grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0], [0, 3, 3, 3, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 3, 0, 0],\n [3, 3, 3, 0],\n [0, 3, 0, 0]]", "expected_output": [[0, 0, 3, 0, 0, 3], [3, 3, 3, 3, 3, 3], [3, 0, 0, 3, 0, 0]]}, "28e73c20": {"instruction": "1. Fill the entire top row and the entire bottom row of the grid with the value 3.\n2. Fill the entire leftmost column and the entire rightmost column of the grid with the value 3.\n3. For each row between the second and the penultimate (i.e., all rows except the first and last), fill the last cell of that row (rightmost column) with 3, except if otherwise overwritten in the following steps.\n4. For each row from the third to the penultimate-1 (i.e., skipping the first two and last two rows), starting from the third column and ending two columns from the right, fill in the following SNAKE-like path with 3 and 0, repeating the observed blocky snake pattern from the examples:\n    a. Starting from the third row, third column, alternate horizontal and vertical blocks, with the \"body\" of the snake following the pattern:\n        - Horizontal lines of 3s, ending before the rightmost boundary, with a 0 to the right.\n        - Vertical lines of 3s, descending on the rightmost available columns, mimicking the pattern from the examples.\n    b. At each horizontal segment, fill with 3s until one or two columns before the rightmost boundary, then leave a 0, place a 3 at the edge, and have the vertical segment of the snake drop immediately below that position.\n    c. The body of the snake gets narrower or wider according to the distance from the boundary, but always keeps the \"corridor\" of 0s adjacent to segments of 3s, matching the curves and corners visible in the output examples.\n5. In all internal rows and columns not covered by the above path, leave the cells as 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3],\n [3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3],\n [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3],\n [3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3],\n [3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 3],\n [3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 3],\n [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 3, 0, 3],\n [3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 3],\n [3, 0, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 3],\n [3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 3, 0, 3],\n [3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 3],\n [3, 0, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 3],\n [3, 0, 3, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 3, 0, 3],\n [3, 0, 3, 3, 0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 3],\n [3, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]", "expected_output": [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3], [3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3], [3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3], [3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3], [3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3], [3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]}, "292dd178": {"instruction": "1. Identify all contiguous non-background (color 1) regions in the grid. Treat separated clusters of color 1 as separate regions.\n2. For each region, inspect the internal (non-edge) area that is entirely surrounded by color 1. \n3. Fill these internal, surrounded positions with color 2, such that color 2 cells form a rectangular block within color 1, but do not overwrite any color 1 at the region's boundary.\n4. If there are multiple distinct enclosed regions within a larger shape, fill each one according to the rule above.\n5. Leave all background and other non-affected colors unchanged.", "test_input": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4], [4, 1, 4, 4, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4], [4, 1, 4, 4, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4],\n [4, 1, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4],\n [4, 1, 4, 4, 1, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4],\n [4, 1, 4, 4, 1, 4, 4, 4, 2, 2, 2, 1, 4, 4, 4],\n [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 1, 4, 1, 1, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 2, 1, 1, 4, 4, 4, 1, 2, 2, 2, 2, 2, 2], [4, 1, 2, 2, 1, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4], [4, 1, 2, 2, 1, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4], [4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 2, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 2, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4]]}, "29623171": {"instruction": "1. For each horizontal band of 3 rows between the full rows of 5's (i.e., rows bordered by rows of all 5's), do the following:\n    a. Identify the non-background color present in those 3 rows (the color other than 0 and 5. In the test input, this will be 4).\n    b. In columns 0 through 2 in this 3-row band, set these leftmost positions to that non-background color (4), for all three rows in the band.\n    c. In columns 8 through 10 in this 3-row band, set these rightmost positions to that non-background color (4), for all three rows in the band.\n    d. Set all other cells in the band (except for cells containing 5) to 0.\n2. For all rows not part of a 3-row band (i.e., rows that are entirely 5's or not in a band), leave them unchanged.", "test_input": [[4, 4, 0, 5, 0, 0, 0, 5, 0, 0, 0], [0, 4, 0, 5, 0, 0, 4, 5, 4, 4, 0], [4, 0, 0, 5, 0, 0, 0, 5, 0, 4, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 0, 0, 0, 5, 0, 4, 0], [4, 0, 0, 5, 0, 4, 0, 5, 4, 0, 4], [0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 0, 4, 0, 5, 0, 0, 4], [4, 0, 0, 5, 0, 0, 4, 5, 0, 4, 0], [0, 0, 0, 5, 4, 4, 0, 5, 0, 0, 0]], "predicted_output": "[[4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4],\n [4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4],\n [4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4],\n [4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4],\n [4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4],\n [4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4],\n [4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4]]", "expected_output": [[4, 4, 4, 5, 0, 0, 0, 5, 0, 0, 0], [4, 4, 4, 5, 0, 0, 0, 5, 0, 0, 0], [4, 4, 4, 5, 0, 0, 0, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 5, 4, 4, 4, 5, 0, 0, 0], [0, 0, 0, 5, 4, 4, 4, 5, 0, 0, 0], [0, 0, 0, 5, 4, 4, 4, 5, 0, 0, 0]]}, "29700607": {"instruction": "1. Identify all the nonzero segments or groupings in the grid. In this pattern, each group appears in a row or column with unique nonzero values (e.g., the top row segment, the left column segment, and the rightmost column segment).\n2. Starting from the topmost nonzero segment (the first nonzero row from the top), replicate this entire row downwards into every row below it until reaching the row just before another nonzero segment starts or until the bottom of the group corresponding to this segment.\n3. When you reach another nonzero segment from the left or right edge (the first nonzero column or the last nonzero column), expand this segment horizontally across each row from the start of the segment to all other positions matching the length of that group, but only in a contiguous direction until another group's area begins or the edge of the grid is reached.\n4. Repeat this filling horizontally and vertically for each unique nonzero segment (top row, leftmost column, rightmost column, etc.), making sure each group fills its area orthogonally (downwards or rightwards/leftwards) until it meets another group or the grid's edge, without overlapping previously assigned nonzero areas.\n5. Leave all other cells zero.", "test_input": [[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]]", "expected_output": [[0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 4, 8, 5, 0, 0, 0, 0, 0], [4, 4, 4, 4, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]]}, "29c11459": {"instruction": "1. For each row in the grid, check if there are exactly two nonzero values, one at the leftmost nonzero column and one at the rightmost nonzero column.\n2. For each such row, fill all cells between (and including) the leftmost and rightmost nonzero positions with nonzero values as follows:\n    a. Fill all cells from the leftmost nonzero cell up to, but not including, the center position with the value of the leftmost nonzero cell.\n    b. Fill all cells from the rightmost nonzero cell down to, but not including, the center position with the value of the rightmost nonzero cell.\n    c. In the center cell (the cell equidistant from both ends, rounding down if the number between is odd), place the value 5.\n3. Leave all other rows and cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [4, 4, 4, 4, 4, 5, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [6, 6, 6, 6, 6, 5, 9, 9, 9, 9, 9]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 5, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 6, 6, 6, 5, 9, 9, 9, 9, 9]]}, "2a28add5": {"instruction": "1. Replace all non-7 values in the input grid with the number 8, but only if they form a contiguous horizontal or vertical segment of three or more non-7 cells.\n2. Each such segment, when replaced, must be filled entirely with the value 8, and should be isolated from any other segment \u2014 do not connect separate regions with the value 8.\n3. All other cells (including single non-7s, pairs, and 7s) remain unchanged or are set to 7 if not part of a qualifying segment.", "test_input": [[0, 5, 7, 4, 7, 5, 1, 3, 7, 7], [7, 7, 7, 4, 4, 6, 5, 2, 7, 7], [4, 6, 2, 8, 7, 7, 8, 7, 0, 3], [1, 7, 7, 5, 3, 7, 6, 3, 7, 7], [0, 9, 7, 7, 7, 3, 7, 7, 7, 7], [7, 9, 3, 0, 7, 0, 5, 5, 3, 7], [7, 1, 7, 1, 7, 5, 5, 8, 7, 6], [7, 7, 7, 3, 3, 2, 7, 0, 9, 2], [7, 7, 0, 7, 6, 0, 7, 7, 1, 7], [1, 7, 4, 7, 1, 2, 7, 7, 1, 7]], "predicted_output": "[[0, 5, 7, 4, 7, 5, 1, 3, 7, 7],\n [7, 7, 7, 4, 4, 6, 5, 2, 7, 7],\n [4, 6, 2, 8, 7, 7, 8, 7, 0, 3],\n [1, 7, 7, 5, 3, 7, 6, 3, 7, 7],\n [0, 9, 7, 7, 7, 3, 7, 7, 7, 7],\n [7, 9, 3, 0, 7, 0, 5, 5, 3, 7],\n [7, 1, 7, 1, 7, 5, 5, 8, 7, 6],\n [7, 7, 7, 3, 3, 2, 7, 0, 9, 2],\n [7, 7, 0, 7, 6, 0, 7, 7, 1, 7],\n [1, 7, 4, 7, 1, 2, 7, 7, 1, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 8, 8, 8, 8, 8, 7, 7], [8, 8, 8, 8, 8, 8, 8, 7, 7, 7], [7, 7, 7, 8, 8, 8, 8, 8, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 8, 8, 8, 8, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "2a5f8217": {"instruction": "1. Identify all contiguous regions (connected groups) of nonzero cells, where each color (number >0) forms its own set of regions. \n2. For each distinct color region, locate the smallest bounding rectangle that contains all of its cells.\n3. For each color region, replace every cell in the bounding rectangle that had the original region's color with the color of the next region's color, in the following cyclic order based on their first occurrence from top to bottom, left to right:\n   - The first region's cells are replaced with the color of the second region.\n   - The second region's cells are replaced with the color of the third region.\n   - Continue until all regions are replaced.\n   - The last region's cells are replaced with the color of the first region.\n4. All cells outside these regions remain unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 8, 8, 8, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 8, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 6, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 6, 6], [8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\n [0, 0, 6, 0, 0, 1, 1, 1, 0, 6, 6, 0, 0],\n [0, 6, 6, 6, 0, 0, 1, 0, 6, 6, 6, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],\n [0, 8, 8, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 2, 2],\n [4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 8, 8, 8, 0, 8, 8, 0, 0], [0, 2, 2, 2, 0, 0, 8, 0, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 6, 0, 0, 0, 0, 2, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 6, 0], [0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 6, 6, 6], [8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "2b01abd0": {"instruction": "1. Identify the vertical column that consists entirely of the value 1. This column serves as the axis of symmetry.\n2. For each row, extract the segment to the left of the axis (excluding the axis column itself).\n3. Reverse this left segment and place it to the right of the axis, mirroring it across the axis. Replace the segment to the right of the axis (excluding the axis column) with this reversed (and transformed) left segment.\n4. If the axis column contains nonzero values, they remain unchanged.\n5. For each nonzero value in the original left segment that is not 0 or 1, transform it as follows in the mirrored segment:\n    a. If the original value is 2, convert it to 8.\n    b. If the original value is 8, convert it to 2.\n    c. All other values remain unchanged.\n6. All grid values outside the mirrored area (e.g., rows above or below the patterned block, the axis column, or columns of zeros) remain unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 0],\n [0, 0, 0, 8, 8, 8, 8, 0, 1, 0, 8, 8, 8, 8, 0, 0],\n [0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 0],\n [0, 0, 8, 8, 8, 0, 0, 0, 1, 0, 0, 0, 8, 2, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 8, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 2, 2, 2, 2, 0, 1, 0, 8, 8, 8, 8, 0, 0], [0, 0, 0, 8, 0, 0, 8, 0, 1, 0, 2, 0, 0, 2, 0, 0], [0, 0, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]]}, "2b9ef948": {"instruction": "1. Identify the unique nonzero color (other than 4) present in the lower left quadrant of the nonzero figure in the input grid. In this case, the nonzero color is 1.\n2. Replace every cell in the grid with this color (e.g., 1), except where specified in step 3.\n3. For every cell that had a 4 in the input grid, set that cell to 4 in the output grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 4, 1, 4, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]", "expected_output": [[1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 1], [1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 4], [1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1]]}, "2dee498d": {"instruction": "1. Identify the smallest repeating block that tiles the input grid both horizontally and vertically. This block is determined by finding the smallest width such that the grid is made up of that width repeated across its length, and the same for height (but in these examples, height is the full grid).\n2. Extract the first occurrence of this block, i.e., take the top-left subgrid whose width and height match the size of the repeating block.\n3. Output this top-left subgrid as the output grid.", "test_input": [[0, 2, 0, 4, 4, 0, 2, 0, 4, 4, 0, 2, 0, 4, 4], [2, 2, 0, 4, 4, 2, 2, 0, 4, 4, 2, 2, 0, 4, 4], [0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0], [1, 1, 0, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 2, 2], [1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0]], "predicted_output": "[[0, 2, 0, 4, 4],\n [2, 2, 0, 4, 4],\n [0, 2, 2, 2, 0],\n [1, 1, 0, 2, 2],\n [1, 1, 0, 2, 0]]", "expected_output": [[0, 2, 0, 4, 4], [2, 2, 0, 4, 4], [0, 2, 2, 2, 0], [1, 1, 0, 2, 2], [1, 1, 0, 2, 0]]}, "2e65ae53": {"instruction": "1. Identify all contiguous blocks of nonzero numbers (other than 0) that are surrounded by 8s (the border color for this test) in the input grid. For each such block, note its color and shape.\n2. Replace the color and shape of each such block by using a mapping from the observed color in the corresponding region in the sample grids. Specifically:\n   - For blocks colored 4 (and originally surrounded by 8 in a rectangular region), replace them with 2 in the output grid in the same location and shape.\n   - For blocks colored 3 (and surrounded by 8), replace them with 1 in the output grid in the same location and shape.\n3. For every region in the grid where a block of the same shape as a previously recognized pattern appears (from the training pairs), fill that region with the mapped output color, even if in the input grid, that region's color differs (e.g. 3 to 1, 4 to 2 as above).\n4. All other 8s and 0s remain unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 4, 4, 8, 0, 8, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 4, 4, 8, 0, 8, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 8, 0, 0, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 8, 0, 0, 8, 0, 8, 0, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 8, 0, 8, 0], [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0], [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 8, 2, 2, 8, 0, 8, 0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 8, 2, 2, 8, 0, 8, 0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 8, 0, 0, 8, 8, 8, 8, 8, 0],\n [0, 8, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 0, 0, 0, 8, 2, 2, 8, 0, 0, 8, 0, 8, 0, 8, 0],\n [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 0],\n [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 0, 8, 0, 8, 0],\n [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 8, 8, 8, 8, 8, 0],\n [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0],\n [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 8, 0, 0, 0, 8, 1, 1, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 0],\n [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 8, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 4, 4, 8, 1, 8, 0, 0, 0, 8, 3, 3, 3, 3, 8, 2, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 8, 4, 4, 8, 1, 8, 0, 0, 0, 8, 3, 3, 3, 3, 8, 2, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 8, 3, 3, 3, 3, 8, 2, 2, 2, 2, 2, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 4, 4, 8, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 4, 4, 4, 4, 8, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 2, 2, 8, 0, 8, 4, 4, 4, 4, 8, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 2, 2, 8, 0, 8, 4, 4, 4, 4, 8, 1, 1, 1, 1, 1, 8, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 2, 2, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 2, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 2, 2, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 3, 3, 3, 8, 2, 2, 8, 0, 0, 8, 3, 3, 3, 3, 8, 2, 2, 8, 0, 0, 8, 8, 8, 8, 8, 0], [0, 8, 3, 3, 3, 8, 2, 2, 8, 0, 0, 8, 3, 3, 3, 3, 8, 2, 2, 8, 0, 0, 8, 3, 8, 2, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 8, 8, 8, 8, 8, 0], [0, 8, 4, 4, 4, 8, 1, 1, 8, 0, 0, 8, 4, 4, 4, 4, 8, 1, 1, 8, 0, 0, 8, 4, 8, 1, 8, 0], [0, 8, 4, 4, 4, 8, 1, 1, 8, 0, 0, 8, 4, 4, 4, 4, 8, 1, 1, 8, 0, 0, 8, 8, 8, 8, 8, 0], [0, 8, 4, 4, 4, 8, 1, 1, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 4, 4, 4, 8, 1, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 4, 4, 4, 8, 1, 1, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 4, 4, 4, 8, 1, 1, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 2, 2, 2, 2, 2, 2, 8, 0], [0, 8, 4, 4, 4, 8, 1, 1, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 8, 4, 4, 4, 8, 1, 1, 8, 0, 0, 0, 0, 8, 4, 4, 4, 4, 4, 8, 1, 1, 1, 1, 1, 1, 8, 0], [0, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "2f0c5170": {"instruction": "1. Identify all non-background regions in the grid. The background is represented by the value 8. Find the largest contiguous non-background (non-8) rectangle present in the grid\u2014this is the region to extract. \n2. Crop this rectangle, removing all surrounding rows and columns that consist entirely of 8s, so that the topmost, leftmost, rightmost, and bottommost non-8 cells define the boundaries of the cropped region.\n3. In the extracted rectangle, replace all cells that were 8 in the original grid (if any remain within the rectangle) with 0.\n4. The resulting rectangle is your output grid.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 4, 4, 0, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 4, 2, 4, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 4, 4, 4, 4, 4, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 4, 0, 4, 4, 0, 0, 0],\n [0, 0, 4, 2, 4, 0, 0, 0, 0],\n [0, 4, 4, 4, 4, 4, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 4, 4, 0, 0, 0], [0, 0, 4, 2, 4, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 0, 0, 0]]}, "2f767503": {"instruction": "1. For each row in the grid, identify the leftmost contiguous group of non-background cells (where \"background\" is the most common value, in this case 7).\n2. Replace all cells in that row, to the right of this group, that are not part of a preserved special structure (see step 3), with the background value (7).\n3. Preserve any non-background contiguous groups that contain the values 5 or 9, starting from the left edge of such a group up to and including the rightmost 5 or 9 in that row \u2014 do not overwrite these with background, even if they appear to the right of earlier non-background groups.\n4. All other non-background cells, to the right of the initial group described in step 1 and not protected as in step 3, are replaced with background.", "test_input": [[7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7], [4, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7], [4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 5, 7, 7, 7, 4, 7, 7, 4], [4, 7, 9, 5, 7, 4, 4, 7, 7, 4, 4], [4, 7, 7, 5, 4, 7, 4, 4, 7, 7, 7], [7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 4, 7, 4, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 4]], "predicted_output": "[[7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7],\n [4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7],\n [4, 7, 9, 5, 7, 7, 7, 7, 7, 7, 7],\n [4, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7]]", "expected_output": [[7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7], [4, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7], [4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 5, 7, 7, 7, 4, 7, 7, 7], [4, 7, 9, 5, 7, 7, 7, 7, 7, 7, 7], [4, 7, 7, 5, 4, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 4, 7, 4, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 4]]}, "2faf500b": {"instruction": "1. For each cell in the input grid, identify all nonzero shapes (collections of connected nonzero cells).\n2. For each shape, replace all occurrences of the color '6' within the shape with background color (0).\n3. For each remaining contiguous region of color '9' in each shape:\n   a. If the region (or sub-shape) still forms a contiguous nonzero group, realign and compact it toward the top-left corner of its original bounding rectangle, preserving its internal relative arrangement.\n   b. Remove any empty columns and/or rows within the bounding box (where all values are 0), so the '9's are as far up and to the left in place as possible.\n4. Restore each compacted '9' shape to its original overall position within the grid so that shapes are shifted only within their local nonzero bounding box (not globally across the grid), preserving the relative spacing of all shapes.\n5. Output the resulting grid.", "test_input": [[0, 0, 0, 9, 6, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 9, 9, 6, 9, 0, 0, 0, 9, 9, 6, 9, 9, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 6, 9, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 6, 9, 9, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 6], [0, 0, 9, 6, 9, 6, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 6, 9], [0, 0, 6, 9, 6, 9, 6, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9], [0, 0, 9, 9, 9, 9, 9, 0, 6, 9, 6, 9, 6, 9, 0, 0, 0, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 9, 6, 9, 6, 9, 6, 0, 0, 0, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9], [0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 6, 9], [0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 6], [0, 0, 9, 9, 6, 9, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9], [0, 0, 9, 6, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 9, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 9, 9, 9, 9, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0],\n [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9],\n [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9],\n [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9],\n [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9],\n [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0],\n [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0],\n [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0],\n [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9],\n [0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9],\n [0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9],\n [0, 0, 9, 9, 9, 9, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9],\n [0, 0, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 9, 0, 0, 0, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 9, 0, 0, 0, 9, 0, 9, 9, 0, 0, 0, 9, 9, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 9, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0, 9, 9, 9, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 0], [0, 0, 9, 0, 9, 0, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 9, 0, 9, 0, 0, 0, 0, 9], [0, 0, 0, 9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9], [0, 0, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 9, 9, 9, 9, 9, 0, 9, 0, 9, 0, 9, 0, 0, 0, 0, 9, 9], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 9], [0, 0, 9, 9, 9, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0], [0, 9, 9, 0, 0, 0, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 0], [0, 9, 0, 0, 0, 9, 9, 0, 9, 9, 9, 9, 9, 9, 0, 0, 0, 9, 9]]}, "305b1341": {"instruction": "1. Identify the smallest rectangle in the input grid that tightly contains all of the nonzero elements. This forms your \"content block\".\n2. Shift the content block to the right so that its leftmost nonzero pixel aligns with column index 6 in the output grid (that is, content starts at column 6).\n3. Replace the background (all zeros outside this region) with zeros in the output grid.\n4. For all rows within the content block:\n    - If a row in the content block matches the horizontal stripe pattern (alternating value and zeros), transform this region as follows:\n        - For rows in odd-indexed horizontal pairs in the content (i.e., stripe rows), fill the block from columns 6\u201313 with alternating 8 and 7 (starting with 8 at index 6), repeat as necessary for the width.\n        - For even-indexed rows (between/around the stripes), fill with 8s only from columns 6\u201313.\n5. At the vertical position(s) where an alternating pattern of single-value, zero, single-value, zero... occurs in the content block in the right half, replicate that pattern in columns 7, 9, 11, etc., as in the examples.\n6. For each row that, in the input, contains a horizontal sequence with alternating two numbers (e.g., two different numbers alternating with zeros), create a new pattern in the output:\n    - The odd-indexed columns (7, 9, \u2026) within the region get the first number, the even-indexed columns (8, 10, \u2026) get the second number, matching the stripes in the examples.\n7. Where there are vertical series in the rightmost part of the block (like the lower \"mini rectangle\" in the input), construct a 5-cell-tall block using the same coloring logic as prior examples (e.g., repeat pattern using numbers from content, but surrounded by 3, or similar border color if present in previous outputs).\n8. If present, include the decorative horizontal 3-stripes at the bottom right region, aligning vertically with the region just filled above.\n9. Ensure all other positions are zero.", "test_input": [[8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 8, 0, 8, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 5, 0, 5, 0, 5, 0, 8, 0, 8, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 8, 0, 8, 0, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 5, 0, 8, 0, 8, 0, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 5, 1, 5, 1, 5, 1, 5, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 1, 5, 1, 5, 1, 5, 4, 8, 4, 8, 4, 8, 4, 0], [9, 9, 9, 9, 9, 0, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 0], [9, 4, 9, 4, 9, 0, 1, 5, 1, 5, 1, 5, 4, 8, 4, 8, 4, 8, 4, 0], [9, 9, 9, 9, 9, 0, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 0], [9, 4, 9, 4, 9, 0, 0, 0, 0, 0, 0, 0, 4, 8, 4, 8, 4, 8, 4, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0], [9, 4, 9, 4, 9, 0, 0, 0, 0, 0, 0, 0, 4, 8, 4, 8, 4, 8, 4, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0], [9, 4, 9, 4, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "30f42897": {"instruction": "1. Identify the non-background color (not 8) segments in any row. In this case, locate the segment of contiguous 5s in row 2 (0-based indexing).  \n2. For every such segment, copy it to the same columns in the first and last rows of the grid, replacing the background color with the segment\u2019s value.  \n3. If a copied segment overlaps any non-background color, preserve the non-background color. Otherwise, overwrite with the segment value.  \n4. Leave all other cells unchanged.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 8, 8, 8]]", "expected_output": [[5, 5, 5, 8, 8, 8, 5, 5, 5, 8, 8, 8, 5, 5], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5], [8, 8, 5, 5, 5, 8, 8, 8, 5, 5, 5, 8, 8, 8]]}, "310f3251": {"instruction": "1. For each cell in the input grid, create a 3x3 block in the output grid that corresponds to it. The block is placed such that for input cell (i, j), its top-left corner in the output grid is at (i*3, j*3).\n2. For cells in the input grid that contain a nonzero value, set the center cell of the corresponding 3x3 output block to this same value, and set the center cell of all horizontally repeated versions of this block. (For example, input value at (i,j) sets output at (i*3+1, j*3+1), (i*3+1, (j+1)*3+1), etc.)\n3. For cells of the input grid that are zeros, set the center cell of the corresponding 3x3 output block to 2, and for all horizontally repeated versions.\n4. For all other cells in the output grid (outside the center cells of each 3x3 repeated block), fill them with 0.\n5. Repeat the above 3x3 block for each position in the input grid, such that the overall output grid is a 3x3 tiling of the expanded input grid along both rows and columns.", "test_input": [[0, 0, 0, 0], [0, 0, 4, 0], [0, 0, 0, 0], [4, 0, 0, 0]], "predicted_output": "[[2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0],\n [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2],\n [2, 0, 0, 2, 0, 4, 2, 0, 0, 2, 0, 4],\n [0, 2, 0, 0, 4, 0, 0, 2, 0, 0, 4, 0],\n [0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2],\n [2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0],\n [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2],\n [4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0],\n [0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0],\n [0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 4]]", "expected_output": [[0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2], [4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2], [4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], [0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2], [4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0]]}, "3194b014": {"instruction": "1. Identify the largest contiguous rectangular block in the grid that is filled entirely with the same non-background color. The background color is 0; ignore all 0s and look for the largest solid rectangle of a single, non-zero color.\n2. Extract that block, preserving only its color. Ignore any other elements or decorations around the block.\n3. Output a new 3x3 grid where every cell is set to the color of the extracted block.", "test_input": [[0, 9, 9, 7, 0, 0, 9, 7, 7, 7, 0, 7, 0, 0, 7, 0, 9, 0, 0, 0], [0, 0, 7, 3, 3, 3, 3, 0, 7, 7, 0, 0, 0, 0, 6, 6, 6, 6, 0, 9], [0, 7, 9, 3, 3, 3, 3, 3, 3, 0, 9, 9, 7, 0, 6, 6, 6, 6, 0, 7], [0, 9, 0, 3, 3, 3, 3, 3, 3, 3, 7, 0, 7, 6, 6, 6, 6, 6, 0, 0], [9, 0, 0, 7, 0, 9, 7, 7, 0, 7, 7, 0, 0, 0, 9, 6, 6, 6, 7, 7], [0, 0, 9, 7, 0, 9, 9, 0, 0, 7, 0, 0, 9, 0, 0, 6, 6, 6, 0, 7], [0, 9, 0, 9, 0, 0, 7, 0, 0, 9, 0, 0, 0, 0, 0, 9, 9, 0, 0, 0], [0, 9, 0, 0, 9, 7, 0, 0, 0, 9, 7, 0, 9, 9, 0, 7, 0, 0, 0, 0], [0, 7, 8, 8, 8, 8, 9, 9, 0, 7, 0, 0, 9, 7, 7, 0, 0, 9, 7, 7], [9, 0, 9, 8, 8, 8, 7, 7, 0, 7, 0, 0, 9, 0, 0, 9, 0, 7, 0, 0], [0, 0, 9, 8, 8, 8, 0, 9, 0, 9, 0, 0, 7, 5, 5, 0, 0, 9, 0, 9], [0, 0, 9, 8, 8, 8, 9, 0, 0, 0, 0, 9, 5, 5, 5, 7, 0, 0, 0, 9], [9, 0, 0, 8, 8, 8, 0, 7, 9, 9, 7, 0, 5, 5, 5, 5, 0, 0, 0, 7], [9, 9, 9, 7, 9, 8, 8, 0, 9, 7, 0, 5, 5, 5, 5, 5, 9, 0, 7, 0], [0, 0, 7, 7, 0, 7, 8, 0, 0, 0, 7, 5, 5, 5, 5, 5, 5, 9, 0, 9], [9, 7, 7, 0, 9, 0, 7, 9, 7, 0, 9, 5, 5, 5, 5, 5, 5, 0, 0, 9], [0, 7, 7, 0, 0, 7, 9, 0, 7, 0, 9, 7, 5, 5, 5, 5, 5, 9, 7, 9], [0, 0, 7, 7, 7, 0, 0, 9, 0, 9, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 7, 9, 0, 0, 0, 9, 9, 5, 5, 5, 0, 9, 0, 9, 0], [0, 0, 9, 0, 7, 0, 0, 9, 7, 0, 0, 7, 0, 0, 7, 9, 0, 0, 0, 0]], "predicted_output": "[[5, 5, 5],\n [5, 5, 5],\n [5, 5, 5]]", "expected_output": [[5, 5, 5], [5, 5, 5], [5, 5, 5]]}, "319f2597": {"instruction": "1. Identify the two vertically aligned columns in the center of the grid (the 13th and 14th columns, counting from 1; or columns indexed 12 and 13 in zero-based indexing).\n2. Replace every value in these two columns with 0, except for the rows where these two columns are already both 0 (if any). In those rows, keep the zeros unchanged.\n3. For rows where both columns 12 and 13 should be set to zero (according to the task rule, even if the original had zeroes), set both to 0.\n4. Leave all other columns and values in the grid unchanged.", "test_input": [[4, 5, 7, 5, 9, 2, 3, 1, 7, 8, 6, 9, 4, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 2, 7, 1, 9, 1, 7, 4, 8, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 7, 6, 9, 5, 5, 5, 8, 1, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 8, 2, 7, 7, 9, 6, 1, 4, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 3, 1, 1, 3, 4, 6, 3, 5, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 1, 1, 1, 6, 7, 3, 9, 5, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 6, 9, 1, 5, 5, 8, 5, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 4, 8, 2, 7, 8, 2, 5, 7, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 2, 1, 3, 2, 4, 5, 8, 3, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 9, 5, 2, 1, 6, 8, 1, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 5, 2, 3, 9, 3, 2, 7, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 5, 9, 2, 3, 2, 4, 6, 7, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 2, 1, 4, 9, 6, 9, 4, 9, 7, 7, 1, 5, 9, 3], [3, 7, 7, 5, 9, 8, 7, 4, 2, 2, 9, 5, 0, 0, 8, 6, 7, 6, 6, 7], [6, 9, 5, 6, 3, 7, 5, 7, 9, 8, 9, 5, 0, 0, 4, 2, 3, 3, 2, 6], [2, 8, 5, 3, 5, 6, 7, 1, 4, 7, 4, 4, 9, 5, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 7, 8, 7, 4, 6, 8, 5, 3, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 5, 7, 9, 8, 5, 8, 8, 6, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 5, 4, 1, 7, 4, 7, 8, 6, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 9, 9, 6, 4, 5, 8, 7, 5, 4, 3, 6, 3, 9, 5]], "predicted_output": "[[4, 5, 7, 5, 9, 2, 3, 1, 7, 8, 6, 9, 0, 0, 4, 2, 5, 1, 2, 7],\n [9, 1, 7, 5, 5, 1, 2, 7, 1, 9, 1, 7, 0, 0, 4, 7, 2, 9, 5, 8],\n [9, 1, 8, 6, 9, 4, 7, 6, 9, 5, 5, 5, 0, 0, 4, 8, 4, 7, 8, 5],\n [4, 2, 9, 5, 5, 2, 8, 2, 7, 7, 9, 6, 0, 0, 9, 8, 3, 3, 9, 2],\n [1, 9, 2, 3, 8, 4, 3, 1, 1, 3, 4, 6, 0, 0, 1, 1, 2, 6, 4, 6],\n [1, 4, 3, 5, 6, 1, 1, 1, 1, 6, 7, 3, 0, 0, 8, 3, 5, 6, 2, 9],\n [7, 7, 1, 9, 2, 4, 6, 9, 1, 5, 5, 8, 0, 0, 2, 2, 4, 2, 1, 2],\n [2, 9, 6, 1, 2, 9, 4, 8, 2, 7, 8, 2, 0, 0, 3, 2, 2, 4, 7, 7],\n [4, 2, 6, 6, 8, 9, 2, 1, 3, 2, 4, 5, 0, 0, 7, 4, 8, 5, 2, 1],\n [3, 2, 4, 8, 9, 8, 9, 5, 2, 1, 6, 8, 0, 0, 5, 7, 9, 1, 8, 5],\n [1, 3, 7, 2, 7, 3, 5, 2, 3, 9, 3, 2, 0, 0, 1, 7, 9, 8, 5, 7],\n [1, 6, 4, 6, 6, 5, 5, 9, 2, 3, 2, 4, 0, 0, 3, 9, 9, 9, 6, 6],\n [8, 6, 5, 2, 2, 3, 2, 1, 4, 9, 6, 9, 0, 0, 7, 7, 1, 5, 9, 3],\n [3, 7, 7, 5, 9, 8, 7, 4, 2, 2, 9, 5, 0, 0, 8, 6, 7, 6, 6, 7],\n [6, 9, 5, 6, 3, 7, 5, 7, 9, 8, 9, 5, 0, 0, 4, 2, 3, 3, 2, 6],\n [2, 8, 5, 3, 5, 6, 7, 1, 4, 7, 4, 4, 0, 0, 1, 3, 4, 4, 4, 7],\n [7, 8, 4, 7, 9, 5, 7, 8, 7, 4, 6, 8, 0, 0, 3, 1, 4, 1, 9, 7],\n [4, 5, 9, 9, 4, 5, 5, 7, 9, 8, 5, 8, 0, 0, 2, 8, 3, 7, 2, 4],\n [1, 6, 1, 4, 3, 6, 5, 4, 1, 7, 4, 7, 0, 0, 5, 9, 5, 4, 9, 9],\n [2, 9, 2, 6, 7, 8, 9, 9, 6, 4, 5, 8, 0, 0, 4, 3, 6, 3, 9, 5]]", "expected_output": [[4, 5, 7, 5, 9, 2, 3, 1, 7, 8, 6, 9, 0, 2, 4, 2, 5, 1, 2, 7], [9, 1, 7, 5, 5, 1, 2, 7, 1, 9, 1, 7, 0, 0, 4, 7, 2, 9, 5, 8], [9, 1, 8, 6, 9, 4, 7, 6, 9, 5, 5, 5, 0, 0, 4, 8, 4, 7, 8, 5], [4, 2, 9, 5, 5, 2, 8, 2, 7, 7, 9, 6, 0, 0, 9, 8, 3, 3, 9, 2], [1, 9, 2, 3, 8, 4, 3, 1, 1, 3, 4, 6, 0, 0, 1, 1, 2, 6, 4, 6], [1, 4, 3, 5, 6, 1, 1, 1, 1, 6, 7, 3, 0, 0, 8, 3, 5, 6, 2, 9], [7, 7, 1, 9, 2, 4, 6, 9, 1, 5, 5, 8, 0, 2, 2, 2, 4, 2, 1, 2], [2, 9, 6, 1, 2, 9, 4, 8, 2, 7, 8, 2, 0, 0, 3, 2, 2, 4, 7, 7], [4, 2, 6, 6, 8, 9, 2, 1, 3, 2, 4, 5, 0, 0, 7, 4, 8, 5, 2, 1], [3, 2, 4, 8, 9, 8, 9, 5, 2, 1, 6, 8, 0, 2, 5, 7, 9, 1, 8, 5], [1, 3, 7, 2, 7, 3, 5, 2, 3, 9, 3, 2, 0, 2, 1, 7, 9, 8, 5, 7], [1, 6, 4, 6, 6, 5, 5, 9, 2, 3, 2, 4, 0, 0, 3, 9, 9, 9, 6, 6], [8, 6, 5, 2, 2, 3, 2, 1, 4, 9, 6, 9, 0, 0, 7, 7, 1, 5, 9, 3], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0], [2, 8, 5, 3, 5, 6, 7, 1, 4, 7, 4, 4, 0, 0, 1, 3, 4, 4, 4, 7], [7, 8, 4, 7, 9, 5, 7, 8, 7, 4, 6, 8, 0, 0, 3, 1, 4, 1, 9, 7], [4, 5, 9, 9, 4, 5, 5, 7, 9, 8, 5, 8, 0, 0, 2, 8, 3, 7, 2, 4], [1, 6, 1, 4, 3, 6, 5, 4, 1, 7, 4, 7, 0, 0, 5, 9, 5, 4, 9, 9], [2, 9, 2, 6, 7, 8, 9, 9, 6, 4, 5, 8, 0, 0, 4, 3, 6, 3, 9, 5]]}, "31aa019c": {"instruction": "1. Identify the smallest axis-aligned 3x3 square in the input grid that contains at least one nonzero value. If there are multiple, select the topmost, then leftmost.\n2. For that 3x3 square, copy its values to the output grid, but replace all nonzero values except the center value with the number 2.\n3. In the output grid, fill all cells outside of this 3x3 square with 0.\n4. The position of the 3x3 square in the output grid should be the same as in the input grid (same coordinates).", "test_input": [[0, 0, 0, 0, 2, 5, 7, 0, 0, 0], [0, 0, 0, 5, 6, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 8, 0, 3, 0, 0, 0, 0, 8], [7, 4, 7, 7, 4, 0, 0, 0, 0, 4], [0, 0, 0, 8, 0, 0, 7, 0, 0, 0], [0, 0, 0, 0, 0, 9, 0, 4, 0, 0], [5, 5, 0, 3, 0, 0, 6, 7, 0, 7], [0, 0, 3, 0, 0, 0, 0, 0, 0, 2], [1, 0, 1, 0, 0, 0, 0, 0, 6, 7]], "predicted_output": "[[0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 2, 2, 0, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 2, 9, 2, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "31adaf00": {"instruction": "1. For each row in the grid, identify every contiguous sequence of two or more consecutive zeros (0s).\n2. In each identified sequence, replace every zero (0) in the sequence with a one (1), except for the first and last zeros of the sequence (if the sequence is only two zeros long, both remain unchanged).\n3. Leave all other cells (including 5s and isolated zeros) unchanged.", "test_input": [[5, 0, 0, 0, 5, 0, 5, 0, 5, 0], [5, 0, 0, 5, 0, 5, 5, 0, 0, 0], [5, 5, 0, 5, 5, 0, 0, 5, 5, 0], [5, 0, 0, 0, 0, 0, 0, 5, 0, 0], [5, 0, 0, 0, 5, 5, 0, 0, 0, 5], [0, 0, 0, 0, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 5, 5, 0, 0], [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]], "predicted_output": "[[5, 0, 0, 0, 5, 0, 5, 0, 5, 0],\n [5, 0, 0, 5, 0, 5, 5, 0, 0, 0],\n [5, 5, 0, 5, 5, 0, 0, 5, 5, 0],\n [5, 1, 1, 0, 0, 0, 0, 5, 0, 0],\n [5, 0, 0, 1, 5, 5, 0, 0, 0, 5],\n [0, 1, 1, 1, 1, 0, 5, 5, 0, 0],\n [0, 0, 5, 5, 0, 0, 5, 5, 0, 0],\n [5, 0, 5, 0, 5, 0, 5, 0, 0, 5],\n [0, 5, 5, 0, 5, 0, 0, 5, 5, 5],\n [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]", "expected_output": [[5, 1, 1, 0, 5, 0, 5, 0, 5, 0], [5, 1, 1, 5, 0, 5, 5, 0, 0, 0], [5, 5, 0, 5, 5, 1, 1, 5, 5, 0], [5, 1, 1, 1, 0, 1, 1, 5, 0, 0], [5, 1, 1, 1, 5, 5, 0, 0, 0, 5], [0, 1, 1, 1, 1, 1, 5, 5, 1, 1], [0, 0, 5, 5, 1, 1, 5, 5, 1, 1], [5, 0, 5, 0, 5, 0, 5, 0, 0, 5], [0, 5, 5, 0, 5, 0, 0, 5, 5, 5], [0, 0, 0, 5, 5, 5, 0, 0, 0, 0]]}, "31d5ba1a": {"instruction": "1. Divide the input grid into two sections: the upper half (top 3 rows) and the lower half (bottom 3 rows).\n2. Focus on the upper half. In this area, identify all cells containing the value 9.\n3. For each 9 found in the upper half, copy its position and location in an output grid of the same shape (3 rows, 5 columns). Set the value at these positions to 6 in the output grid.\n4. Set all other cells in the output grid to 0.", "test_input": [[0, 0, 9, 0, 9], [0, 9, 0, 0, 0], [9, 0, 9, 0, 0], [4, 0, 4, 4, 4], [0, 4, 4, 0, 4], [4, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 6, 0, 6],\n [0, 6, 0, 0, 0],\n [6, 0, 6, 0, 0]]", "expected_output": [[6, 0, 0, 6, 0], [0, 0, 6, 0, 6], [0, 0, 6, 0, 0]]}, "320afe60": {"instruction": "1. Identify all contiguous non-background regions in the grid composed of the color 1 (where background is 4).\n2. For each such region in the left half of the grid (i.e., regions whose leftmost 1 is in the left half of the grid), replace all 1s in the region with 2.\n3. For each such region in the right half of the grid (i.e., regions whose leftmost 1 is in the right half of the grid), replace all 1s in the region with 3.\n4. Leave all other cells unchanged.", "test_input": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 2, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]}, "321b1fc6": {"instruction": "1. Identify all nonzero connected components of identical values in the input grid (these are colored regions).\n2. Separate each collection of such colored regions by their row bands, where bands are separated by at least one fully empty (all-zero) row.\n3. For each band, erase all colored regions except for the bottommost two consecutive nonzero rows within that band. All colored regions above these two bottommost rows are set to zero.\n4. For each retained region (bottommost two nonzero rows of each band), shift it downward so that its bottom row aligns with the last nonzero row of that band in the original grid.\n5. In these bottommost two rows, retain the coloring and shapes as they appear in the original rows, including their respective left-to-right order within the row.\n6. Set all other cells in the grid to zero.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 8, 8, 0, 0], [8, 8, 8, 8, 0, 8, 8, 8, 8, 0], [0, 0, 8, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 0], [3, 4, 3, 3, 0, 0, 8, 8, 0, 0], [0, 0, 3, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 8, 0, 0],\n [8, 8, 8, 8, 0, 8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 3, 0, 0, 8, 8, 8, 8, 0],\n [3, 4, 3, 3, 0, 0, 8, 8, 0, 0],\n [0, 4, 4, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 0, 0, 4, 4, 0, 0], [3, 4, 3, 3, 0, 3, 4, 3, 3, 0], [0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 0, 3, 4, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "32597951": {"instruction": "1. Scan each row and column to locate contiguous regions formed by '8'.\n2. For each contiguous horizontal or vertical region of '8', check if they are adjacent (either directly to the left/right or above/below) to a group of three or more '1's aligned in the same row or column. \n3. If such a region is found, replace every '1' in those adjacent aligned groups (located immediately next to the '8' or sandwiched between regions of '8') with '3'. Only apply this to the group whose alignment and adjacency to '8's matches the patterns seen in the input/output examples.\n4. Leave all other regions unchanged.", "test_input": [[1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 8, 1, 8, 8, 1, 8, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 8, 8, 1, 8, 8, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 8, 8, 1, 8, 8, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 8, 1, 8, 8, 1, 8, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]], "predicted_output": "[[1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\n [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\n [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\n [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n [0, 0, 1, 0, 0, 1, 0, 8, 3, 8, 8, 3, 8, 0, 1, 0, 0],\n [1, 0, 0, 1, 0, 0, 1, 8, 8, 3, 8, 8, 3, 0, 0, 1, 0],\n [0, 1, 0, 0, 1, 0, 0, 1, 8, 8, 3, 8, 8, 3, 0, 0, 1],\n [0, 0, 1, 0, 0, 1, 0, 8, 3, 8, 8, 3, 8, 0, 1, 0, 0],\n [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],\n [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]]", "expected_output": [[1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 8, 3, 8, 8, 3, 8, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 8, 8, 3, 8, 8, 3, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 3, 8, 8, 3, 8, 8, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 8, 3, 8, 8, 3, 8, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]]}, "32e9702f": {"instruction": "1. Identify all non-zero cells in the grid. Record each distinct color value (excluding zero); in these examples, only one non-zero color is present in each grid.\n2. Replace every 0 (zero) in the grid with 5.\n3. For each non-zero color region, determine its minimum bounding rectangle (the smallest rectangle that encloses all contiguous cells of the same color).\n4. Move the entire colored region to the top-leftmost location possible within its original bounding rectangle, such that the uppermost and leftmost colored cell is aligned to the top and left edge of its rectangle. All other positions inside the rectangle that do not contain the color are left as 5.\n5. Paste this aligned colored region (with 5s in the gaps within the bounding rectangle) back into the overall grid, replacing the previously non-colored (now-5) area inside the rectangle.\n6. The rest of the grid remains filled with 5s.", "test_input": [[0, 0, 6, 6, 6, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 6, 6, 6, 6, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[5, 5, 6, 6, 6, 6, 6, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 6, 6, 5, 5],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 6, 6, 6, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 6, 6, 6, 6, 6, 6],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]", "expected_output": [[5, 6, 6, 6, 6, 6, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 6, 6, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 6, 6, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 6, 6, 6, 6, 6, 6, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]}, "33067df9": {"instruction": "1. Identify all nonzero numbers in the input grid (these are the colored cells embedded in an otherwise zero grid, each spaced in a regular grid).\n2. For each nonzero number, note its position (row, column) and its value.\n3. For each such detected nonzero position, create a new rectangular block corresponding to that value, with these properties:\n   - The block has a fixed height and width (from examples, height = 8, width = 6).\n   - Fill the entire block with the detected nonzero value.\n4. Place each new block in the output grid such that:\n   - The output blocks are arranged in the output grid in the same relative order as their source positions in the input grid (from left to right, and top to bottom).\n   - Each block is padded on all sides by 2 rows and 2 columns of zeros (i.e., a 2-row zero border on top and bottom, and a 2-column zero border on left and right).\n   - Blocks are aligned horizontally if from the same input row, with 2 zero columns separating different groups; blocks from input rows below are placed lower in the output with a 2-row gap of zeros between rows of blocks.\n5. If multiple nonzero cells are in the same input row, their blocks are arranged in a row in the output grid, left-to-right, with 2 columns of zeros separating each.\n6. Combine all such block rows into the output grid, preserving row order from the input, with two rows of zeros between rows of blocks.\n7. Fill the remaining spaces of the output grid (not assigned to any colored block or its border) with zeros to make the full rectangle.", "test_input": [[0, 0, 0, 0, 0, 0, 0], [0, 6, 0, 3, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 1, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 7, 0, 7, 0], [0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0], [0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "332202d5": {"instruction": "1. For each horizontal row in the grid, check if it contains a distinct color block different from the surrounding rows of 7s and 8s. These are the key \"replacement\" rows.\n2. For every such detected row, as well as the row immediately above and below it (if they are rows of 7s and 8s, not already detected as blocks):\n   a. Replace both the detected row and its immediately adjacent \"background\" rows (above and below) with the detected row's pattern, except:\n   b. In the detected row, swap every 8 with 1, and every 1 with 8.\n   c. In the adjacent rows, copy the detected row's main color (the number that replaces 7s) instead of 7, and copy the detected row's central value (usually 1 or 8) in the corresponding column.\n3. If you reach another block of a different color, repeat the procedure from Step 2 for that block and its adjacent rows.\n4. If a row contains only 7s and a single 8 (i.e., a plain \u201cbackground\u201d row), and it is between two replaced regions, then determine the color(s) to propagate from neighboring block rows as above and replace accordingly.\n5. Any row that does not fall under these rules (i.e., a background row not adjacent to a color block) remains unchanged.", "test_input": [[7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n [9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n [9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n [6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]", "expected_output": [[9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]]}, "332efdb3": {"instruction": "1. For every cell in the grid, set its value to 1.\n2. For every row with an odd index (i.e., 1, 3, 5, etc.), set the value of every cell in that row with an even column index (i.e., 0, 2, 4, etc.) to 1, and set the value of every cell with an odd column index (i.e., 1, 3, 5, etc.) to 0.\n3. For every row with an even index (including row 0), leave all cells as 1.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]", "expected_output": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}, "3345333e": {"instruction": "1. Identify all nonzero non-background regions in the input grid. For each unique nonzero color (besides background 0), find the contiguous region(s) of that color.\n2. For each such region, check if it is completely enclosed or overlapped by another nonzero colored region. If so, remove (set to 0) all cells of the inner (enclosed) region.\n3. Specifically, for each region: if it does not form the outermost colored group at its positions (i.e., is surrounded on all sides in its bounding box by another nonzero color, or is only reachable by passing through another nonzero region), set those cells to 0.\n4. Repeat the check for every nonzero color present in the grid.\n5. The result should show only the outermost (top-most) regions of color, with any \u201cinner\u201d colored groups erased to background 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 5, 5, 5, 0, 5, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 5, 5, 5, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 5, 5, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 0, 5, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 5, 5, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 0, 5, 0, 5, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "337b420f": {"instruction": "1. Divide the input grid into three vertical sections using the columns containing only the value 0 as separators. Each row is thus split into four segments. Only keep the **third segment** (the segment between the second and third columns of zeros) from each row.\n2. Stack these extracted segments vertically, preserving their row order, to form a new grid of the same number of rows, but only the columns from the third segment.\n3. The resulting grid may have segments that extend further to the right than others; do not trim or pad\u2014preserve the extracted widths for each row.", "test_input": [[6, 6, 6, 8, 8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 4, 4], [8, 6, 8, 8, 8, 0, 1, 8, 1, 8, 8, 0, 8, 8, 8, 4, 4], [8, 8, 8, 8, 8, 0, 1, 1, 1, 8, 8, 0, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 0, 4, 4, 4, 4, 4], [8, 8, 8, 6, 6, 0, 8, 1, 8, 8, 8, 0, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8],\n [8, 8, 8],\n [8, 8, 8],\n [4, 4, 4, 4],\n [8, 8, 8]]", "expected_output": [[6, 6, 6, 8, 8], [1, 6, 1, 8, 8], [1, 1, 1, 8, 8], [4, 4, 4, 4, 4], [8, 8, 8, 8, 8]]}, "3391f8c0": {"instruction": "1. Identify all regions in the input grid filled with color A (the first nonzero color found in the upper section of the grid; in the test case, 5).\n2. Identify all regions in the input grid filled with color B (the other nonzero color found in the lower section of the grid; in the test case, 6).\n3. For every cell in the grid:\n    a. If a cell has color A (5), change it to color B (6).\n    b. If a cell has color B (6), change it to color A (5).\n4. Leave all other cells (including zeroes) unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 5, 0, 5, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 5, 0, 5, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 0, 6, 0, 0, 6, 0, 6, 0, 0, 0, 0],\n [0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 5, 5, 5, 0, 0, 6, 0, 6, 0, 0, 0, 0],\n [0, 0, 5, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 6, 0, 6, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 6, 6, 6, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "33b52de3": {"instruction": "1. Identify the \"palette\" row set at the bottom of the grid (in this case, the last 3 non-empty rows). Each row contains a set of colors (numbers) in specific positions, which will serve as the color keys for later replacement.\n2. For the main pattern in the grid (the region full of 5s in a repetitive motif), locate each group or block previously colored with 5. Each such block occupies a fixed position in a repeated tile-like pattern.\n3. Replace each 5 in block n (tracking from left to right across the motif) with the color from column n in the relevant palette row. That is, use the color found in the same palette row/column for each respective block to determine the replacement color for each 5 in that block. For example, use the colors from columns 1, 2, 4, 5, etc. in the palette rows.\n4. For any position in the main patterned area where there was a 0 or another color, retain the value as-is (do not change unless it was a 5).\n5. All other non-pattern grid areas (e.g., empty space at the bottom, left, or right) should remain unchanged.\n6. Remove the palette rows at the bottom of the grid, leaving only the transformed main part of the grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0], [0, 2, 1, 2, 2, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 8, 1, 4, 4, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 3, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 1, 3, 1, 0, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0], [0, 8, 1, 1, 1, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 8, 1, 2, 0, 3, 1, 4, 0, 2, 1, 2, 0, 8, 1, 2, 0],\n [0, 2, 1, 2, 2, 0, 0, 8, 0, 1, 0, 2, 0, 8, 0, 1, 0, 3, 0, 4, 0, 2, 0],\n [0, 8, 1, 4, 4, 0, 0, 2, 0, 3, 0, 4, 0, 1, 0, 2, 0, 8, 0, 1, 0, 3, 0],\n [0, 3, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 1, 3, 1, 0, 0, 8, 1, 2, 0, 3, 1, 4, 0, 2, 1, 2, 0, 8, 1, 2, 0],\n [0, 8, 1, 1, 1, 0, 0, 8, 0, 1, 0, 2, 0, 8, 0, 1, 0, 3, 0, 4, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 4, 0, 1, 0, 2, 0, 8, 0, 1, 0, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 8, 1, 2, 0, 3, 1, 4, 0, 2, 1, 2, 0, 8, 1, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 2, 0, 8, 0, 1, 0, 3, 0, 4, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 4, 0, 1, 0, 2, 0, 8, 0, 1, 0, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 8, 1, 2, 0, 3, 1, 4, 0, 2, 1, 2, 0, 8, 1, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 8, 0, 1, 0, 2, 0, 8, 0, 1, 0, 3, 0, 4, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 4, 0, 1, 0, 2, 0, 8, 0, 1, 0, 3, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 1, 1, 1, 0, 2, 2, 2, 0, 2, 2, 2, 0], [0, 2, 1, 2, 2, 0, 0, 2, 0, 2, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 8, 1, 4, 4, 0, 0, 2, 0, 2, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0], [0, 3, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 1, 3, 1, 0, 0, 8, 8, 8, 0, 1, 1, 1, 0, 4, 4, 4, 0, 4, 4, 4, 0], [0, 8, 1, 1, 1, 0, 0, 8, 0, 8, 0, 1, 0, 1, 0, 4, 0, 4, 0, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 1, 0, 1, 0, 4, 0, 4, 0, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 1, 1, 1, 0, 4, 4, 4, 0, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 1, 0, 1, 0, 4, 0, 4, 0, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 1, 0, 1, 0, 4, 0, 4, 0, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 1, 1, 1, 0, 3, 3, 3, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 1, 0, 1, 0, 3, 0, 3, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 1, 0, 1, 0, 3, 0, 3, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "3428a4f5": {"instruction": "1. Find the row in which all entries are the value 4. This row acts as a horizontal delimiter; separate the input grid into two sections: the section above the delimiter, and the section below (ignore the delimiter row itself).\n2. Take the section below the delimiter; this will become the output grid.\n3. In this section, replace every instance of the value 2 with the value 3.\n4. Leave all other values unchanged (0 stays 0).", "test_input": [[2, 0, 2, 0, 2], [2, 0, 2, 0, 2], [0, 0, 0, 2, 0], [0, 2, 2, 2, 0], [2, 0, 2, 2, 0], [2, 2, 2, 0, 2], [4, 4, 4, 4, 4], [2, 2, 0, 0, 0], [0, 2, 2, 2, 2], [0, 0, 2, 2, 0], [0, 2, 0, 0, 0], [0, 2, 2, 0, 2], [2, 0, 0, 0, 0]], "predicted_output": "[[3, 3, 0, 0, 0],\n [0, 3, 3, 3, 3],\n [0, 0, 3, 3, 0],\n [0, 3, 0, 0, 0],\n [0, 3, 3, 0, 3],\n [3, 0, 0, 0, 0]]", "expected_output": [[0, 3, 3, 0, 3], [3, 3, 0, 3, 0], [0, 0, 3, 0, 0], [0, 0, 3, 3, 0], [3, 3, 0, 3, 3], [0, 3, 3, 0, 3]]}, "342ae2ed": {"instruction": "1. For each pair of adjacent regions composed of the same distinct non-background color (that is not 7), locate the pair of regions within the grid. Treat vertical and horizontal adjacent regions as independent.\n2. For each such pair, starting from their shared edge, create a diagonal path connecting them by alternately moving one cell along the row and one cell along the column, replacing the background value (7) along that path with the value of the connecting region.\n   - The path should begin at the end of one region's edge and diagonally \"walk\" towards the other region, filling previously background cells until it touches the neighboring region.\n3. Ensure that these diagonal connections do not overwrite any non-background cell or disrupt existing colored regions.\n4. Repeat for all applicable pairs of regions, ensuring each appropriate region connection is established via a diagonal path of their own color.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7], [7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 1, 1, 7, 7, 7, 7], [7, 7, 6, 6, 7, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 6, 6, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 1, 1], [7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 7, 1, 1], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 7], [7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7, 7, 3, 3, 7], [7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7, 7, 7, 7, 7], [7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 8, 8, 8, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 7], [7, 8, 8, 8, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 4, 4, 7, 7, 1, 1, 1, 7, 7, 7, 7],\n [7, 7, 6, 6, 7, 4, 4, 7, 1, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 6, 6, 1, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7],\n [7, 7, 1, 7, 8, 7, 7, 8, 8, 8, 7, 7, 7, 7, 1, 1],\n [7, 1, 7, 7, 8, 8, 7, 8, 8, 8, 7, 7, 7, 1, 1, 7],\n [1, 7, 7, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 3, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 7, 3, 3, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 7, 3, 3, 7, 7, 7],\n [7, 8, 8, 8, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 7],\n [7, 8, 8, 8, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 7],\n [7, 8, 8, 8, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 1, 1, 7, 7, 7, 7], [7, 7, 7, 7, 7, 4, 4, 7, 7, 7, 1, 1, 7, 7, 7, 7], [7, 7, 6, 6, 7, 4, 4, 7, 7, 7, 7, 7, 1, 7, 7, 7], [7, 7, 6, 6, 7, 7, 7, 7, 8, 8, 8, 7, 7, 1, 7, 7], [7, 7, 7, 7, 6, 7, 7, 7, 8, 8, 8, 7, 7, 7, 1, 1], [7, 7, 7, 7, 7, 6, 7, 7, 8, 8, 8, 7, 7, 7, 1, 1], [7, 7, 7, 7, 7, 7, 6, 8, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 8, 6, 7, 7, 7, 7, 7, 3, 3, 7], [7, 7, 7, 7, 7, 8, 7, 7, 6, 6, 7, 7, 7, 3, 3, 7], [7, 7, 7, 7, 8, 7, 7, 7, 6, 6, 7, 7, 3, 7, 7, 7], [7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 3, 7, 7, 7, 7], [7, 8, 8, 8, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 7], [7, 8, 8, 8, 7, 7, 7, 7, 7, 3, 3, 7, 7, 7, 7, 7]]}, "342dd610": {"instruction": "1. For each non-background cell (any value other than the main background, here assumed to be 8), shift that cell to the same column but one row earlier, i.e., move it up by 2 rows.\n2. Replace the original position of the moved cell with the background value (8).\n3. If moving a cell up by 2 rows would place it above the top of the grid, do not place it (i.e., ignore such cells).", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8], [8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8], [8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8],\n [8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 2, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8], [2, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]}, "3490cc26": {"instruction": "1. For each vertical pair of horizontally-aligned colored regions (blocks of 2s and 8s), identify the axis-aligned bounding box that contains both regions in the same row, separated by one or more zeros.\n2. Between every such detected pair, if the left region is colored with 2s and the right with 8s (with any number of zeros in between), fill all the cells in the row between (and including) the original colored regions with 7s. The resulting filled region should have the length equal to the sum of the length of both blocks plus any zeros in between.\n3. Repeat this operation for all rows in the grid where such patterns exist. The original colors at the ends should remain (2 or 8), while zeros between are replaced by 7.\n4. Apply the same operation to any other similar horizontally-aligned pairs elsewhere in the grid.\n5. Leave all other elements in the grid unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0],\n [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 2, 2, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "34b99a2b": {"instruction": "1. For each row in the input grid, identify the columns that contain the number 4; in every given input, there is exactly one column (the 4th column, index 4) where all values are 4 across rows.\n2. For each row, extract the three columns to the left of the column containing the 4, i.e., columns with indices 1, 2, and 3.\n3. For each value in the three extracted columns (per row), if the value is 8, replace it with 2; otherwise, replace it with 0.\n4. Add a fourth column to the right of these three columns in each row. The value of this fourth column is 2 if there is a 5 in any position in that row *after* the column with the 4 (i.e., in columns 5 through 8, inclusive). Otherwise, the value is 0.\n5. The output grid consists of the transformed rows constructed as above, keeping the original row order.", "test_input": [[0, 8, 0, 0, 4, 5, 0, 0, 0], [0, 8, 0, 8, 4, 5, 5, 0, 5], [8, 8, 0, 8, 4, 0, 0, 5, 5], [8, 8, 8, 8, 4, 5, 0, 5, 5], [0, 0, 8, 8, 4, 5, 0, 5, 0]], "predicted_output": "[[2, 0, 0, 0],\n [2, 0, 2, 2],\n [2, 0, 2, 2],\n [2, 2, 2, 2],\n [0, 2, 2, 2]]", "expected_output": [[2, 2, 0, 0], [2, 0, 0, 0], [2, 2, 2, 0], [0, 2, 0, 0], [2, 0, 0, 2]]}, "34cfa167": {"instruction": "1. Identify the area of the input grid that contains all the nonzero cells. This is the bounding box of the figure(s).\n2. Create four copies of this bounding box/figure (including all colors and shapes inside the area).\n3. Arrange the four copies into a square \"quadrant\" layout: top-left, top-right, bottom-left, bottom-right, with each figure placed in one quadrant.\n4. In the \"quadrant\" layout, touching figures should share an edge with the other, but not overlap. Insert one row/column of background cells (value 0) between adjacent quadrants if needed to prevent overlap, maintaining the quadrant grid shape.\n5. Place the original (unmodified) figure in the top-left quadrant.\n6. Place a horizontally reflected (mirrored left-to-right) copy of the figure in the top-right quadrant.\n7. Place a vertically reflected (mirrored top-to-bottom) copy of the figure in the bottom-left quadrant.\n8. Place a copy of the figure that is both horizontally and vertically reflected (mirrored about both axes) in the bottom-right quadrant.\n9. Fill the rest of the output grid with background color (0), ensuring the overall dimensions at least match the original input grid, expanding if necessary to fit the new arrangement.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 1, 2, 0, 8, 0, 0, 0, 0, 0, 8, 0, 2, 1, 0, 0],\n [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 2, 0, 8, 0, 0, 0, 0, 0, 8, 0, 2, 1, 0, 0],\n [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 1, 2, 0, 8, 0, 2, 0, 8, 0, 2, 1, 0, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0], [0, 0, 1, 2, 0, 8, 0, 2, 0, 8, 0, 2, 1, 0, 0, 0], [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "351d6448": {"instruction": "1. Identify all the rows above the first occurrence of a full row of 5s. Retain only the first three such rows, preserving their original order.\n2. For the retained rows, reconstruct each row by combining the nonzero elements from the corresponding positions of all original input blocks (i.e., all segments between the \"5\" separator rows). For each column, use the nonzero value from the bottommost corresponding row (from any block), if any; otherwise, use zero.\n3. Discard all other rows (separator and repeated blocks) and keep only the reconstructed three rows as the output grid.", "test_input": [[0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 3, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 3, 0, 2, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2]], "predicted_output": "[[0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0],\n [0, 3, 3, 3, 0, 2, 2, 2, 0, 2, 2, 2, 0],\n [3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2]]", "expected_output": [[0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 3, 3, 3, 0, 3, 2, 2, 0, 2, 2, 2, 0], [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2]]}, "358ba94e": {"instruction": "1. Identify all non-background (nonzero) connected shapes in the input grid.  \n2. From the connected shapes, select the largest one. (If shapes are the same size, choose the one that appears first scanning top-to-bottom, left-to-right.)  \n3. Extract the tightest bounding rectangle that encompasses all cells of the selected shape.  \n4. Crop this rectangle from the grid.  \n5. Remove outer rows and columns consisting only of background (zero) values from the cropped rectangle until at least one nonzero (foreground) cell is present in every row and column.  \n6. Output the resulting grid as the final output.", "test_input": [[0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 1, 1, 1],\n [1, 1, 1, 0, 1],\n [1, 1, 1, 1, 1],\n [1, 0, 1, 0, 1],\n [1, 1, 1, 1, 1],\n [1, 1, 1, 0, 1],\n [1, 1, 1, 1, 1]]", "expected_output": [[1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]]}, "3618c87e": {"instruction": "1. Identify the penultimate row (second from bottom), which contains some nonzero numbers (in these examples, 1 and 5) with 0s elsewhere and is above a bottom row of all 5s.\n2. Replace all nonzero entries (such as 1s) in the penultimate row with 0.\n3. In the bottom row, replace the 5 immediately below each nonzero (now-removed) element in the penultimate row with that element's original value (typically 1).\n4. Leave all other entries unchanged.", "test_input": [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 1], [0, 0, 5, 0, 5], [5, 5, 5, 5, 5]], "predicted_output": "[[0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 0, 1, 0, 1],\n [0, 0, 0, 0, 0],\n [5, 5, 1, 5, 1]]", "expected_output": [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 5, 0, 5], [5, 5, 1, 5, 1]]}, "363442ee": {"instruction": "1. Identify the first three nonzero columns (columns 0-2) in the input grid. These columns form a 3x3 block in the top-left, with potentially repeating blocks every three rows, aligned with the rows that do not start with all zeros.\n2. For each occurrence of this 3-column block in the block rows (rows 0-2), copy this 3x3 block and paste it immediately to the right of its original location, starting at column 4. Repeat this paste again starting at column 8. Thus, each such row in the output (for the first three rows) consists of: original block (columns 0-2), separator column (3, typically a \"5\"), copied block at columns 4-6, then potentially another copied block at columns 8-10 or further right, separated by zero columns.\n3. For all other rows, identify the column containing the separator value (the 5, typically at column 3). For each group of three rows corresponding to the block rows, copy the 3x1 vertical block to the right of this 5 (starting from columns 4-6), and paste it wherever a \"1\" appeared in the corresponding input row group. Repeat the block insertion according to the horizontal block repetition determined in step 2.\n4. If a row in the input grid is a separator row or a zero row (other than columns holding the separator value \"5\"), simply copy its contents to the output, preserving the locations of the \"5\".", "test_input": [[3, 3, 9, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 4, 4, 5, 0, 0, 0, 0, 1, 0, 0, 1, 0], [8, 9, 8, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[3, 3, 9, 5, 3, 3, 9, 0, 3, 3, 9, 0, 0],\n [8, 4, 4, 5, 8, 4, 4, 0, 8, 4, 4, 0, 0],\n [8, 9, 8, 5, 8, 9, 8, 0, 8, 9, 8, 0, 0],\n [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 5, 0, 1, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 5, 0, 1, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[3, 3, 9, 5, 0, 0, 0, 3, 3, 9, 3, 3, 9], [8, 4, 4, 5, 0, 0, 0, 8, 4, 4, 8, 4, 4], [8, 9, 8, 5, 0, 0, 0, 8, 9, 8, 8, 9, 8], [0, 0, 0, 5, 3, 3, 9, 0, 0, 0, 3, 3, 9], [0, 0, 0, 5, 8, 4, 4, 0, 0, 0, 8, 4, 4], [0, 0, 0, 5, 8, 9, 8, 0, 0, 0, 8, 9, 8], [0, 0, 0, 5, 3, 3, 9, 3, 3, 9, 0, 0, 0], [0, 0, 0, 5, 8, 4, 4, 8, 4, 4, 0, 0, 0], [0, 0, 0, 5, 8, 9, 8, 8, 9, 8, 0, 0, 0]]}}