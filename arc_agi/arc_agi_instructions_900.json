{"e681b708": {"instruction": "1. For every row in the grid, identify all locations that contain the value 1 **except** for the main rectangular \"frame\" rows, i.e., those with mostly nonzero entries (these rows and their columns should be left unchanged except as affected by later steps).\n2. For each such 1, check the row above it:\n    - If the cell directly above it (same column, previous row) contains a 1, replace the current 1 with 2.\n    - Otherwise, check the row below:\n        - If the cell directly below it (same column, next row) contains a 1, replace the current 1 with 2.\n3. For each such 1 not changed in the previous step, check the column to the left:\n    - If the cell directly left (same row, previous column) contains a 1, replace the current 1 with 3.\n    - Otherwise, check the column to the right:\n        - If the cell directly right (same row, next column) contains a 1, replace the current 1 with 3.\n4. For any 1 that is now flanked **diagonally** (top-left, top-right, bottom-left, or bottom-right) by a 1 (and hasn\u2019t already been changed), replace it with 8.\n5. All other 1s remain unchanged.\n6. Leave all other values (0, 2, 3, 4, 8, etc.) as they are.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 8], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 4], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [3, 1, 1, 1, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 4], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 1],\n [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 8],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 4],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],\n [3, 1, 1, 1, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 4],\n [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 1, 0],\n [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 0, 0, 0, 8], [0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 8], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 3, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 3, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 4], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 0, 4, 0, 0], [3, 1, 1, 1, 1, 1, 1, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 4], [3, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0]]}, "e69241bd": {"instruction": "1. For each row, identify the non-background, non-border segments (segments of consecutive non-zero cells not including 5s) that appear between the 5s (the borders) or between the edge of the grid and a 5.\n2. In each such segment, replace all non-zero, non-5 cells with the value of the first such cell in that segment (leftmost non-zero, non-5 value), by scanning left-to-right.\n3. For any zeros inside these segments, fill them with the value used in the previous step, so each segment becomes a horizontal band of the same color, matching the leftmost non-zero, non-5 value, until the next 5 or the row edge is reached.\n4. Repeat this process for all rows, ensuring that 5s remain unchanged and non-horizontal, diagonal, or isolated patches are not affected.\n5. Do not alter positions that originally contain 5s, nor any zeros or colored cells that are outside these horizontal segments.", "test_input": [[0, 0, 0, 5, 0, 3, 0, 5, 0], [5, 5, 5, 0, 0, 0, 5, 5, 0], [0, 8, 5, 5, 0, 5, 0, 5, 0], [0, 0, 5, 0, 5, 0, 0, 5, 5], [5, 0, 5, 0, 0, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0, 5, 0, 0], [5, 5, 0, 5, 0, 5, 0, 0, 5], [0, 5, 0, 0, 5, 0, 5, 5, 0], [0, 0, 5, 5, 0, 6, 0, 0, 5]], "predicted_output": "[[0, 0, 0, 5, 0, 3, 0, 5, 0],\n [5, 5, 5, 0, 0, 0, 5, 5, 0],\n [0, 8, 5, 5, 0, 5, 0, 5, 0],\n [0, 0, 5, 0, 5, 0, 0, 5, 5],\n [5, 0, 5, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 5, 0, 0, 5, 0, 0],\n [5, 5, 0, 5, 0, 5, 0, 0, 5],\n [0, 5, 0, 0, 5, 0, 5, 5, 0],\n [0, 0, 5, 5, 0, 6, 0, 0, 5]]", "expected_output": [[0, 0, 0, 5, 3, 3, 3, 5, 0], [5, 5, 5, 3, 3, 3, 5, 5, 0], [8, 8, 5, 5, 3, 5, 0, 5, 0], [8, 8, 5, 0, 5, 0, 0, 5, 5], [5, 8, 5, 0, 0, 5, 0, 0, 0], [8, 8, 8, 5, 0, 0, 5, 0, 0], [5, 5, 8, 5, 0, 5, 0, 0, 5], [0, 5, 8, 8, 5, 6, 5, 5, 0], [0, 0, 5, 5, 6, 6, 6, 6, 5]]}, "e6de6e8f": {"instruction": "1. Divide the input grid into groups of two columns each, from left to right. Each group corresponds to a step in a path.\n2. Identify the column groups that have at least one '2' value in either of the two rows. Ignore all column groups that contain only zeros.\n3. For each selected group, record its order and the positions of the '2's (row 0 or row 1) within the group.\n4. For each group (step in the path), map it to a position in a new grid of size 8 (rows) by 7 (columns) as follows:\n    a. The first group maps to the top/left of the new grid, each subsequent group is shifted diagonally downward and rightward.\n    b. If there are two '2's in the group (one in each row), represent them as two stacked '2's in a 2-row \"step\" in the new grid. If only one '2', represent it as a single '2' at the appropriate row.\n5. Fill the new grid such that each group corresponds to a \"step\", represented by one or two vertically stacked '2's, following a staircase pattern from top-left to bottom-right, with each group occupying its own column in the output grid.\n6. Replace the topmost left cell of the staircase with a '3'.\n7. Fill all other positions in the output grid with '0'.", "test_input": [[2, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 2], [2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2]], "predicted_output": "[[3, 0, 0, 0, 0, 0, 0],\n [2, 2, 0, 0, 0, 0, 0],\n [0, 2, 2, 0, 0, 0, 0],\n [0, 0, 2, 2, 0, 0, 0],\n [0, 0, 0, 2, 2, 0, 0],\n [0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 0, 2, 2],\n [0, 0, 0, 0, 0, 0, 2]]", "expected_output": [[0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 2, 0, 0]]}, "e729b7be": {"instruction": "1. Identify the column containing the central vertical sequence of 4s. This column serves as the axis of symmetry for the transformation.\n2. For each row that contains a 4 in this column (excluding potential corner cases where the 4 is uniquely located, i.e., the outermost frame), treat the segment of the row to the left of the 4 as the \"pattern\" region for that row.\n3. For each row, reflect the \"pattern\" region immediately to the right side of the column with 4, resulting in a mirrored pattern along the axis of 4s.\n    - For example, if the pattern region to the left consists of N cells, then the next N cells to the right of the 4 become their mirror image from left to right.\n    - If input grid boundaries or frame prevent a full mirroring (not enough cells after the 4), only fill in as many as possible.\n4. Fill any remaining cells to the right of the mirrored pattern in each row with the background value (7), except in the positions already occupied by other features (such as frame numbers or preserved output features).\n5. For rows without a mirroring region (e.g., all background or only the central axis), preserve their values as is.\n6. Preserve any special corners or frame numbers (such as 8 in corners) present in the input grid.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 3, 3, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 3, 3, 3, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 3, 0, 0, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 3, 3, 0, 0, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 3, 3, 2, 2, 2, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 3, 3, 2, 2, 2, 2, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 3, 2, 2, 2, 2, 2, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 7, 3, 5, 5, 5, 5, 5, 9, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8], [7, 7, 3, 5, 5, 5, 5, 5, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 3, 1, 1, 1, 1, 1, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 3, 1, 1, 1, 1, 1, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 3, 3, 1, 1, 1, 1, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 3, 3, 6, 6, 6, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 3, 3, 3, 7, 9, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 3, 3, 3, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 3, 3, 4, 3, 3, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 3, 3, 3, 9, 4, 9, 3, 3, 3, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 3, 0, 0, 9, 4, 9, 0, 0, 3, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 3, 3, 0, 0, 9, 4, 9, 0, 0, 3, 3, 7, 7, 7, 7],\n [7, 7, 7, 3, 3, 2, 2, 2, 9, 4, 9, 2, 2, 2, 3, 3, 7, 7, 7],\n [7, 7, 3, 3, 2, 2, 2, 2, 9, 4, 9, 2, 2, 2, 2, 3, 3, 7, 7],\n [7, 7, 3, 2, 2, 2, 2, 2, 9, 4, 9, 2, 2, 2, 2, 2, 3, 7, 7],\n [8, 7, 3, 5, 5, 5, 5, 5, 9, 8, 9, 5, 5, 5, 5, 5, 3, 7, 8],\n [7, 7, 3, 5, 5, 5, 5, 5, 9, 4, 9, 5, 5, 5, 5, 5, 3, 7, 7],\n [7, 7, 3, 1, 1, 1, 1, 1, 9, 4, 9, 1, 1, 1, 1, 1, 3, 7, 7],\n [7, 7, 3, 1, 1, 1, 1, 1, 9, 4, 9, 1, 1, 1, 1, 1, 3, 7, 7],\n [7, 7, 3, 3, 1, 1, 1, 1, 9, 4, 9, 1, 1, 1, 1, 3, 3, 7, 7],\n [7, 7, 7, 3, 3, 6, 6, 6, 9, 4, 9, 6, 6, 6, 3, 3, 7, 7, 7],\n [7, 7, 7, 7, 3, 3, 3, 7, 9, 4, 9, 7, 3, 3, 3, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 3, 3, 3, 4, 3, 3, 3, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 3, 3, 4, 3, 3, 3, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 3, 3, 3, 9, 4, 9, 7, 3, 3, 3, 7, 7, 7, 7], [7, 7, 7, 7, 7, 3, 0, 0, 9, 4, 9, 6, 6, 6, 3, 3, 7, 7, 7], [7, 7, 7, 7, 3, 3, 0, 0, 9, 4, 9, 1, 1, 1, 1, 3, 3, 7, 7], [7, 7, 7, 3, 3, 2, 2, 2, 9, 4, 9, 1, 1, 1, 1, 1, 3, 7, 7], [7, 7, 3, 3, 2, 2, 2, 2, 9, 4, 9, 1, 1, 1, 1, 1, 3, 7, 7], [7, 7, 3, 2, 2, 2, 2, 2, 9, 4, 9, 5, 5, 5, 5, 5, 3, 7, 7], [8, 7, 3, 5, 5, 5, 5, 5, 9, 8, 9, 5, 5, 5, 5, 5, 3, 7, 8], [7, 7, 3, 5, 5, 5, 5, 5, 9, 4, 9, 2, 2, 2, 2, 2, 3, 7, 7], [7, 7, 3, 1, 1, 1, 1, 1, 9, 4, 9, 2, 2, 2, 2, 3, 3, 7, 7], [7, 7, 3, 1, 1, 1, 1, 1, 9, 4, 9, 2, 2, 2, 3, 3, 7, 7, 7], [7, 7, 3, 3, 1, 1, 1, 1, 9, 4, 9, 0, 0, 3, 3, 7, 7, 7, 7], [7, 7, 7, 3, 3, 6, 6, 6, 9, 4, 9, 0, 0, 3, 7, 7, 7, 7, 7], [7, 7, 7, 7, 3, 3, 3, 7, 9, 4, 9, 3, 3, 3, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 3, 3, 3, 4, 3, 3, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "e73095fd": {"instruction": "1. Identify the central vertical region in the grid where there is a contiguous block of color 5 surrounded on its left and right by color 0. This block forms a \"column\" and may have a consistent width across multiple rows.\n2. In this identified vertical block, except for rows where the entire segment is already color 5, replace all color 0 cells that are horizontally between two color 5 cells (i.e., inside the \"boxed\" area of 5s) with color 4. Only perform this replacement for the internal segment of the block, not for its border cells (i.e., keep the edges as 5; change only the enclosed zeros along the row).\n3. For any row that already contains color 4 according to the rule above, ensure this replacement extends horizontally to all 0s that are strictly between two non-zero (specifically, two 5s) cells within that block.\n4. Keep all other regions of the grid unchanged, including edge regions and singular vertical or horizontal 5s that do not form part of the \"box\" structures described above.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0], [5, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 5, 5], [0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0], [0, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 4, 4, 0, 0, 0, 5, 5, 5, 5, 0],\n [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 0, 0, 5, 0],\n [5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 0, 0, 5, 5],\n [0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0],\n [0, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0],\n [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 4, 4, 5, 0], [5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 4, 4, 5, 5], [0, 5, 0, 0, 0, 5, 4, 4, 4, 5, 0, 0, 0, 5, 4, 4, 5, 0], [0, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0], [0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 4, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "e734a0e8": {"instruction": "1. Identify all vertical bands of contiguous nonzero values (not '0') in the grid that are separated by columns of zeros. Treat each group of rows separated by a row of all zeros as a separate block for the purpose of this transformation.\n2. In each block, look for any contiguous column(s) of a unique non-background color (i.e., colors other than the 'main' color, which is '7' in these examples) that form a vertical segment within that block (e.g., the vertical band of '4's in the example).\n3. Within each block, for every vertical band of non-background color (such as the '4's), identify the columns it occupies.\n4. Propagate (copy) the non-background (e.g., '4's) values vertically so that all cells in the same columns, between the topmost and bottommost non-background cell in the band, are filled with the non-background color. In other words, extend the non-background color vertically to form a solid band within each segmented block.\n5. Leave all other values unchanged. Background rows of zeros and other block structure are preserved. The main background color (such as '7's) and zeros remain as in the input except where overwritten by the propagation.", "test_input": [[7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 4, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 4, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 4, 7, 4, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 4, 7, 7, 7, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 0, 7, 7, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7], [7, 7, 0, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 0, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 4, 7, 7],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 0, 7, 7, 0, 7, 7, 0, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7],\n [7, 7, 0, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 0, 7, 7],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 4, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 4, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 4, 7, 4, 7], [7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 4, 7, 7, 7, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 0, 7, 7, 4, 7, 7, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 7, 7, 4, 7, 7, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 7, 4, 7, 4, 7, 0, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 4, 7, 7, 7, 4, 0, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 4, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 4, 7, 7], [4, 4, 4, 4, 4, 0, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4], [7, 7, 4, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 4, 7, 7], [7, 4, 7, 4, 7, 0, 7, 7, 7, 7, 7, 0, 7, 4, 7, 4, 7], [4, 7, 7, 7, 4, 0, 7, 7, 7, 7, 7, 0, 4, 7, 7, 7, 4]]}, "e74e1818": {"instruction": "1. For each nonzero block (continuous group of nonzero numbers representing a region or shape), identify if it occurs in more than one row in the input grid.\n2. For each such block (color/number), cyclically shift the rows that form the block upwards by one position within the bounds of the rows that contain the block, so that the top row of the block becomes the second row, the second row becomes the third, and so on, and the previous bottom row becomes the top row (inside the bounding rectangle/rows containing that color).\n3. Apply this operation independently for each block (distinct nonzero number). All areas outside these bounding rectangles remain unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0],\n [0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0],\n [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 0], [0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], [0, 0, 0, 0, 4, 4, 4, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 0, 0], [0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0], [0, 0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "e760a62e": {"instruction": "1. Divide the grid into horizontal bands separated by rows consisting entirely of the value 8 (these are separator rows).\n2. For each band (the rows between the 8-only separator rows), further partition each row at every occurrence of an 8, forming vertical bands (blocks) from the columns between 8s (or borders).\n3. For each vertical block in a horizontal band:\n    a. If any cell in this block contains a 2, replace all cells of this block across all rows of the band with 2.\n    b. If any cell in this block contains a 3, replace all cells of this block across all rows of the band with 3.\n    c. If both 2 and 3 appear in different blocks of the same band, treat each block independently as above.\n    d. If the block contains only zeros (or no special values), leave the block unchanged.\n4. Reassemble the bands with separator rows of 8 in their original locations to reconstruct the transformed output grid.", "test_input": [[0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 3, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 2, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 2, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 2, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 3, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 3, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 2, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 2, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 2, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 3, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 6, 6, 6, 6, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0], [2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 6, 6, 6, 6, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0], [2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 6, 6, 6, 6, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0], [2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 6, 6, 6, 6, 8, 2, 2, 2, 2, 8, 2, 2, 2, 2, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [2, 2, 2, 2, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 3, 3, 3, 3, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0, 0, 8, 0, 0, 0]]}, "e7639916": {"instruction": "1. Identify all occurrences of the number \"8\" in the input grid. These will be the anchor points for rectangular shapes to be defined.\n2. Determine the set of \"8\"s such that each is located at a distinct corner of an axis-aligned rectangle (i.e., form the convex hull/group with minimum and maximum row and column indices that contain all \"8\"s).\n3. For each rectangular group of \"8\"s, define the minimal rectangle that contains all of them. The rectangle's outer boundary will connect the first and last rows and columns where any \"8\" appears.\n4. Within each rectangle, fill all positions along the perimeter (top row, bottom row, left column, right column) with \"1\", except where an \"8\" is already present.\n5. Leave the positions outside these rectangles unchanged (keep them as their original values).\n6. Leave any cells inside the rectangle but not on the perimeter (excluding \"8\"s) as is (i.e., keep them as \"0\").\n7. The \"8\"s retain their position and value within the output grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 8, 1, 1, 1, 0],\n [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 8, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "e76a88a6": {"instruction": "1. Identify all non-overlapping rectangular blocks of nonzero, non-background color in the grid. Each such block corresponds to a \"figure\" or \"digit\" shape made of one or more colors (with 0 as the background).\n2. For each block that appears more than once in the grid, extract the unique shapes and record their colors and layout.\n3. Re-map each instance of a color group (block) to a new position: move the left block to where the right block is, and vice versa, while retaining their internal color structure but translating their \"palette\" (the colors inside) to match the partner block.\n   - For example, in the provided grids, blocks on the left (that use colors like 1 and 4) switch places and colors with the corresponding right-side blocks (that use colors like 5), and vice versa.\n4. Replace all blocks on the right with the palette of the left (and their arrangement), and all blocks on the left with the palette of the right (and their arrangement). Maintain the block shape/form but copy the color pattern from the partner block.\n5. Leave all empty (0) background regions unchanged.", "test_input": [[0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 1, 4, 4, 0, 0, 5, 5, 5, 0], [0, 1, 4, 1, 0, 0, 5, 5, 5, 0], [0, 1, 1, 1, 0, 0, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0], [0, 0, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 0, 5, 5, 5], [0, 0, 5, 5, 5, 0, 0, 5, 5, 5], [0, 0, 5, 5, 5, 0, 0, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5]], "predicted_output": "[[0, 5, 5, 5, 0, 0, 0, 0, 0, 0],\n [0, 4, 5, 5, 0, 0, 1, 1, 1, 0],\n [0, 4, 5, 4, 0, 0, 1, 1, 1, 0],\n [0, 4, 4, 4, 0, 0, 1, 1, 1, 0],\n [0, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n [0, 0, 1, 1, 1, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 1, 0, 0, 4, 4, 4],\n [0, 0, 1, 1, 1, 0, 0, 4, 4, 4],\n [0, 0, 1, 1, 1, 0, 0, 4, 4, 4],\n [0, 0, 0, 0, 0, 0, 0, 4, 4, 4]]", "expected_output": [[0, 4, 4, 4, 0, 0, 0, 0, 0, 0], [0, 1, 4, 4, 0, 0, 4, 4, 4, 0], [0, 1, 4, 1, 0, 0, 1, 4, 4, 0], [0, 1, 1, 1, 0, 0, 1, 4, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 1, 4, 4, 0, 0, 4, 4, 4], [0, 0, 1, 4, 1, 0, 0, 1, 4, 4], [0, 0, 1, 1, 1, 0, 0, 1, 4, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]]}, "e78887d1": {"instruction": "1. Remove all rows consisting entirely of zeros from the input grid.\n2. Divide the remaining grid into contiguous blocks of 3 rows each (i.e., partition the rows into consecutive groups of three).\n3. For each 3-row block, take only those three rows and preserve their order to form a new output grid (do not merge or rearrange rows between blocks).\n4. The final output grid consists of only the rows from the first 3-row block, in their original order.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 3, 3, 0, 0, 1, 0, 1, 0, 0, 5, 0], [0, 2, 0, 0, 0, 0, 3, 0, 1, 0, 1, 0, 5, 5, 5], [2, 2, 2, 0, 3, 3, 0, 0, 1, 0, 1, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 3, 0, 3, 0, 0, 1, 0, 0, 5, 5, 0], [0, 0, 2, 0, 3, 0, 3, 0, 1, 1, 1, 0, 0, 5, 0], [2, 2, 0, 0, 3, 0, 3, 0, 0, 1, 0, 0, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 2, 0, 0, 3, 3, 0, 0, 1, 0, 1, 0, 0, 5, 0],\n [0, 2, 0, 0, 0, 0, 3, 0, 1, 0, 1, 0, 5, 5, 5],\n [2, 2, 2, 0, 3, 3, 0, 0, 1, 0, 1, 0, 0, 5, 0]]", "expected_output": [[2, 0, 2, 0, 0, 3, 0, 0, 1, 1, 0, 0, 5, 5, 0], [2, 0, 2, 0, 3, 3, 3, 0, 0, 1, 0, 0, 0, 0, 5], [2, 0, 2, 0, 0, 3, 0, 0, 1, 1, 1, 0, 5, 5, 0]]}, "e7a25a18": {"instruction": "1. Identify the smallest rectangle within the input grid that contains all nonzero (non-background) cells. This is the \"active area.\"  \n2. Crop the grid to this \"active area,\" removing all surrounding rows and columns that contain only zeros.\n3. Take the cropped grid and perform a \"block stretching\" operation: for every 2x2 block of nonzero numbers (excluding the border of 2's), expand it into a 4x4 block where each number in the 2x2 block is duplicated to fill a 2x2 region in the output. Effectively, each original nonzero cell becomes a 2x2 region filled with the same value in the output grid.\n4. For the border of 2's (the frame), expand each single border cell horizontally and vertically as appropriate such that the frame in the output wraps around the larger, stretched interior area.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], [0, 2, 0, 3, 3, 6, 6, 0, 0, 0, 2, 0, 0, 0], [0, 2, 0, 3, 3, 6, 6, 0, 0, 0, 2, 0, 0, 0], [0, 2, 0, 4, 4, 1, 1, 0, 0, 0, 2, 0, 0, 0], [0, 2, 0, 4, 4, 1, 1, 0, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0]], "predicted_output": "[[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 0, 0, 3, 3, 3, 3, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 3, 3, 3, 3, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 3, 3, 3, 3, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 3, 3, 3, 3, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 4, 4, 4, 4, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 4, 4, 4, 4, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 4, 4, 4, 4, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 4, 4, 4, 4, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]", "expected_output": [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 3, 3, 3, 3, 6, 6, 6, 6, 2], [2, 3, 3, 3, 3, 6, 6, 6, 6, 2], [2, 3, 3, 3, 3, 6, 6, 6, 6, 2], [2, 3, 3, 3, 3, 6, 6, 6, 6, 2], [2, 4, 4, 4, 4, 1, 1, 1, 1, 2], [2, 4, 4, 4, 4, 1, 1, 1, 1, 2], [2, 4, 4, 4, 4, 1, 1, 1, 1, 2], [2, 4, 4, 4, 4, 1, 1, 1, 1, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]}, "e7b06bea": {"instruction": "1. For each row in the input grid, identify the contiguous nonzero blocks at the leftmost and rightmost positions (with zeros in between). Typically, this is a single nonzero on the left and a block of nonzeros at the right.\n2. Move the leftmost nonzero value to the leftmost column of the output grid, preserving its row.\n3. Move the right block of nonzeros such that:\n    a. Place the first value of this block (from left to right) into column 2 of the output grid for that row.\n    b. Place the second value of this block into column 3.\n    c. Place the third value of this block into column 4, and so on, for all values in the block.\n4. Set all other positions in the row to zero (fill the rest of the row with zeros).", "test_input": [[5, 0, 0, 0, 0, 0, 4, 8, 3], [5, 0, 0, 0, 0, 0, 4, 8, 3], [0, 0, 0, 0, 0, 0, 4, 8, 3], [0, 0, 0, 0, 0, 0, 4, 8, 3], [0, 0, 0, 0, 0, 0, 4, 8, 3], [0, 0, 0, 0, 0, 0, 4, 8, 3], [0, 0, 0, 0, 0, 0, 4, 8, 3], [0, 0, 0, 0, 0, 0, 4, 8, 3], [0, 0, 0, 0, 0, 0, 4, 8, 3]], "predicted_output": "[[5, 4, 8, 3, 0, 0, 0, 0, 0],\n [5, 4, 8, 3, 0, 0, 0, 0, 0],\n [0, 4, 8, 3, 0, 0, 0, 0, 0],\n [0, 4, 8, 3, 0, 0, 0, 0, 0],\n [0, 4, 8, 3, 0, 0, 0, 0, 0],\n [0, 4, 8, 3, 0, 0, 0, 0, 0],\n [0, 4, 8, 3, 0, 0, 0, 0, 0],\n [0, 4, 8, 3, 0, 0, 0, 0, 0],\n [0, 4, 8, 3, 0, 0, 0, 0, 0]]", "expected_output": [[5, 0, 0, 0, 0, 4, 0, 0, 0], [5, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0]]}, "e7dd8335": {"instruction": "1. Identify all horizontally and vertically connected regions composed of the value 1.\n2. Find the region where the bottommost row containing 1s forms a horizontal bar (i.e., a row with the most cells set to 1 at the lowest vertical position of the region).\n3. Change every 1 in this bottommost bar and every 1 directly above that forms the 'vertical legs' down to the bottom bar to the value 2, for all rows below the midpoint of the region. Keep the upper part unchanged.\n4. If there are any endcap 1s (single 1s at the left or right edges of the lowest part of the shape), also change them to 2.\n5. Leave all values other than those specified in the shape unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\n [1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0],\n [1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 0],\n [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0],\n [0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "e84fef15": {"instruction": "1. Divide the input grid into horizontal strips, each consisting of 5 rows followed by a row of all 3s (serving as a separator). Ignore the separator rows.\n2. For each 5-row strip, consider only the first 5 columns in each row; ignore the rest of the columns.\n3. Transform the resulting 5\u00d75 block according to the following rule:\n   - For every cell in the block with a value of 2 (excluding the border values in the first column unless surrounded by 8s), replace it with 1 if it is not on the border and is not paired with a duplicate in the same row (i.e., if it's a central, non-duplicated 2).\n   - Other numbers (0, 4, 6, 8) are retained in their positions.\n4. Assemble the transformed 5\u00d75 block as the output grid.", "test_input": [[2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8], [8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6], [8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8], [8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8], [2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8], [8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 8, 8, 8, 8, 3, 8, 0, 0, 8, 6], [8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8], [8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8], [2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8], [8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6], [8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8], [8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8], [2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8], [8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6], [8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8], [8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8], [2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8, 3, 2, 8, 2, 8, 8], [8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6, 3, 8, 0, 0, 8, 6], [8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8], [8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8, 3, 8, 8, 4, 8, 8], [2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4, 3, 2, 8, 8, 8, 4]], "predicted_output": "[[2, 8, 2, 8, 8],\n [8, 0, 0, 8, 6],\n [8, 8, 8, 8, 8],\n [8, 8, 4, 8, 8],\n [2, 8, 8, 8, 4]]", "expected_output": [[2, 8, 2, 8, 8], [8, 1, 1, 8, 1], [8, 8, 8, 8, 8], [8, 8, 4, 8, 8], [2, 8, 8, 8, 4]]}, "e8593010": {"instruction": "1. For each cell in the grid, if the cell value is 5, leave it unchanged.\n2. For each cell in the grid with value 0, replace it based on its context:\n    a. If the 0 is at the left or top edge (row 0 or column 0), or adjacent (orthogonally) to another 0, set it to 2.\n    b. If the 0 is at the right or bottom edge (last row or last column), or adjacent (orthogonally) to a 0 that is at an edge, set it to 3.\n    c. If the 0 cell is surrounded (orthogonally) by 5s on all sides, set it to 1.\n    d. If the above do not apply but the 0 is at the intersection of a row of zeros and a column of zeros, prioritize assignment as per the adjacency and edge conditions above.\n3. Apply these rules to all zero-valued cells to obtain the output grid.", "test_input": [[0, 5, 5, 5, 5, 5, 0, 0, 5, 5], [5, 5, 5, 0, 5, 5, 0, 5, 0, 5], [5, 5, 0, 5, 5, 5, 5, 5, 0, 5], [5, 0, 0, 5, 5, 5, 5, 5, 5, 5], [0, 5, 5, 5, 5, 5, 0, 5, 5, 5], [0, 5, 5, 0, 5, 5, 0, 5, 0, 0], [5, 5, 0, 5, 5, 5, 5, 5, 0, 5], [5, 5, 0, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, 5, 5, 5, 0, 5, 5, 5], [5, 5, 5, 5, 0, 5, 0, 0, 5, 0]], "predicted_output": "[[2, 5, 5, 5, 5, 5, 2, 2, 5, 3],\n [5, 5, 5, 2, 5, 5, 2, 5, 2, 5],\n [5, 5, 2, 5, 5, 5, 5, 5, 2, 5],\n [5, 2, 2, 5, 5, 5, 5, 5, 5, 5],\n [2, 5, 5, 5, 5, 5, 2, 5, 5, 5],\n [2, 5, 5, 2, 5, 5, 2, 5, 3, 3],\n [5, 5, 2, 5, 5, 5, 5, 5, 2, 5],\n [5, 5, 2, 5, 5, 5, 5, 5, 5, 3],\n [2, 2, 5, 5, 5, 5, 2, 5, 5, 5],\n [5, 5, 5, 5, 3, 5, 3, 3, 5, 3]]", "expected_output": [[3, 5, 5, 5, 5, 5, 1, 1, 5, 5], [5, 5, 5, 3, 5, 5, 1, 5, 2, 5], [5, 5, 1, 5, 5, 5, 5, 5, 2, 5], [5, 1, 1, 5, 5, 5, 5, 5, 5, 5], [2, 5, 5, 5, 5, 5, 2, 5, 5, 5], [2, 5, 5, 3, 5, 5, 2, 5, 1, 1], [5, 5, 2, 5, 5, 5, 5, 5, 1, 5], [5, 5, 2, 5, 5, 5, 5, 5, 5, 3], [2, 2, 5, 5, 5, 5, 1, 5, 5, 5], [5, 5, 5, 5, 3, 5, 1, 1, 5, 3]]}, "e872b94a": {"instruction": "1. Count the number of columns in the input grid.\n2. For each column, check if there are any nonzero (i.e., colored) cells in that column.\n3. If a column has at least one nonzero cell, keep track of it as a \"figure\" column.\n4. Determine the number of distinct vertical \"figure groups\" (columns) that contain nonzero cells, treating each group of adjacent \"figure columns\" as a single object.\n5. Output a grid with as many rows as the number of object groups detected, each consisting of a single column with the value [0].", "test_input": [[0, 0, 5, 0, 0, 0, 5, 0, 0, 0], [0, 0, 5, 0, 0, 0, 5, 5, 0, 0], [0, 0, 5, 5, 0, 0, 0, 5, 0, 0], [0, 0, 0, 5, 0, 0, 0, 5, 5, 0], [0, 5, 5, 5, 0, 0, 0, 0, 5, 0], [0, 5, 0, 0, 0, 0, 5, 5, 5, 0], [0, 5, 0, 0, 0, 0, 5, 0, 0, 0], [0, 5, 5, 0, 0, 5, 5, 0, 0, 0], [0, 0, 5, 0, 0, 5, 0, 0, 0, 0]], "predicted_output": "[[0],\n [0],\n [0],\n [0]]", "expected_output": [[0], [0], [0]]}, "e88171ec": {"instruction": "1. Scan the input grid to identify all contiguous horizontal runs of zeros that are exactly three cells long and are bounded on the left and right by nonzero (and nonzero-only\u2014specifically the dominant color in the grid, e.g., 7) cells or the grid boundary.\n2. For each such triple-zero run, check if the run appears uniquely within a single row (i.e., does not appear as a run of three or more zeros, and does not repeat more than once per row), and ensure the run is flanked directly by at least one contiguous nonzero (color 7) region both before and after the run.\n3. Replace each identified triple-zero (0,0,0) segment with (8,8,8) in the corresponding positions in the grid.\n4. Leave all other elements of the grid unchanged.", "test_input": [[7, 7, 0, 0, 0, 7, 7, 7, 0, 0, 0, 7, 0, 0, 7, 7, 0, 7, 0, 7, 7], [7, 0, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 0, 0], [7, 7, 7, 7, 7, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 0], [7, 0, 0, 7, 0, 7, 7, 7, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0], [7, 7, 7, 7, 0, 7, 7, 0, 7, 0, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7], [7, 7, 0, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7], [0, 7, 7, 7, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0, 0, 7, 7, 7, 7, 7, 7], [7, 0, 0, 7, 0, 0, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 0, 7, 7, 7], [7, 7, 7, 0, 7, 0, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 7], [7, 7, 7, 0, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7], [0, 7, 7, 0, 7, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 7, 0, 0, 0, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 0, 0, 0, 7, 7, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 7], [0, 7, 7, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 7], [7, 7, 7, 0, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0], [7, 0, 7, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 0, 7, 7, 0, 7, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 7], [7, 0, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 7, 7, 0, 0, 7, 7, 0, 7, 0, 0, 0, 0, 7, 0, 7, 7, 7, 7, 7, 7], [0, 7, 7, 0, 7, 7, 7, 0, 0, 7, 7, 0, 0, 7, 7, 0, 7, 7, 0, 7, 7]], "predicted_output": "[[7, 7, 0, 0, 0, 7, 7, 7, 0, 0, 0, 7, 0, 0, 7, 7, 0, 7, 0, 7, 7],\n [7, 0, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 0, 0],\n [7, 7, 7, 7, 7, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 0],\n [7, 0, 0, 7, 0, 7, 7, 7, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0],\n [7, 7, 7, 7, 0, 7, 7, 0, 7, 0, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7],\n [7, 7, 0, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7],\n [0, 7, 7, 7, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0, 0, 7, 7, 7, 7, 7, 7],\n [7, 0, 0, 7, 0, 0, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 0, 7, 7, 7],\n [7, 7, 7, 0, 7, 0, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 7],\n [7, 7, 7, 0, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7],\n [0, 7, 7, 0, 7, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 7, 0, 0, 0, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0],\n [7, 7, 0, 0, 0, 7, 7, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 7],\n [0, 7, 7, 0, 0, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 0, 0, 7],\n [7, 7, 7, 0, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0],\n [7, 0, 7, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0],\n [7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 0, 7, 7],\n [0, 0, 7, 7, 0, 7, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 7],\n [7, 0, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0, 0],\n [0, 7, 7, 0, 0, 7, 7, 0, 7, 0, 0, 0, 0, 7, 0, 7, 7, 7, 7, 7, 7],\n [0, 7, 7, 0, 7, 7, 7, 0, 0, 7, 7, 0, 0, 7, 7, 0, 7, 7, 0, 7, 7]]", "expected_output": [[7, 7, 0, 0, 0, 7, 7, 7, 0, 0, 0, 7, 0, 0, 7, 7, 0, 7, 0, 7, 7], [7, 0, 7, 7, 7, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 0, 0], [7, 7, 7, 7, 7, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 0], [7, 0, 0, 7, 0, 7, 7, 7, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 7, 7, 0], [7, 7, 7, 7, 0, 7, 7, 0, 7, 0, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7], [7, 7, 0, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7], [0, 7, 7, 7, 0, 0, 7, 7, 7, 7, 0, 0, 7, 0, 0, 7, 7, 7, 7, 7, 7], [7, 0, 0, 7, 0, 0, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 0, 7, 7, 7], [7, 7, 7, 0, 7, 0, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 7], [7, 7, 7, 0, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7], [0, 7, 7, 0, 7, 0, 7, 0, 0, 7, 7, 7, 7, 7, 0, 7, 0, 0, 0, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 0, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 0, 0, 0, 7, 7, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 7], [0, 7, 7, 0, 0, 7, 0, 0, 7, 7, 0, 8, 8, 8, 8, 0, 7, 7, 0, 0, 7], [7, 7, 7, 0, 7, 7, 0, 7, 7, 7, 0, 8, 8, 8, 8, 0, 0, 7, 0, 7, 0], [7, 0, 7, 7, 0, 7, 0, 7, 0, 7, 0, 8, 8, 8, 8, 0, 7, 7, 7, 0, 0], [7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 7, 7, 0, 7, 7], [0, 0, 7, 7, 0, 7, 0, 0, 7, 7, 0, 0, 0, 7, 7, 0, 0, 7, 0, 0, 7], [7, 0, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 0, 7, 0, 0, 0, 0, 0, 0], [0, 7, 7, 0, 0, 7, 7, 0, 7, 0, 0, 0, 0, 7, 0, 7, 7, 7, 7, 7, 7], [0, 7, 7, 0, 7, 7, 7, 0, 0, 7, 7, 0, 0, 7, 7, 0, 7, 7, 0, 7, 7]]}, "e8dc4411": {"instruction": "1. Identify the unique color (let's call it C) that appears only once in the grid and is not the background color (in this case, C=6).\n2. For every cell in the grid, except those already assigned special values (like 0), set the value to C if it matches any of the following positional rules:\n    - All cells in the same row and to the right of the C cell within the original row get replaced by C, up to the end of the row.\n    - All cells in the same column and below the C cell in the original column get replaced by C, down to the bottom of the grid.\n3. For all 0-valued cells, do not modify their values.\n4. For all other cells that are not part of the replacement areas defined above, keep their original values.", "test_input": [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], "predicted_output": "[[3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 0, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [3, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]]", "expected_output": [[6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 6, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 6, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]}, "e9614598": {"instruction": "1. Identify all positions in the input grid that contain the value 1. These are the centers where patterns will be added.\n2. For each such center position (row, col), fill in a cross of 3's centered on (row, col), but only if it fits within the boundaries of the grid:\n    a. Set the cell directly above (row-1, col) to 3, if it is within the grid.\n    b. Set the cell directly below (row+1, col) to 3, if it is within the grid.\n    c. Set the cell directly left (row, col-1) to 3, if it is within the grid.\n    d. Set the cell directly right (row, col+1) to 3, if it is within the grid.\n    e. Set the center cell (row, col) to 1 (keep unchanged).\n3. For each center position, in addition, set the four cells diagonally at distance 1 from the center to 0 (unchanged), and if possible, fill in a horizontal row of three 3's centered on the center in the row above (row-1) and in the row below (row+1), spanning (col-1) to (col+1), if those positions exist and are within bounds.\n4. Leave all other cells unchanged.", "test_input": [[0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 3, 1, 3, 0],\n [0, 3, 3, 3, 3, 0],\n [0, 0, 3, 3, 3, 0],\n [0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0],\n [0, 0, 3, 1, 3, 0],\n [0, 3, 3, 3, 3, 0],\n [0, 0, 3, 3, 3, 0],\n [0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 3, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]}, "e98196ab": {"instruction": "1. Remove the 6th row (the row containing only the value \u201c5\u201d) from the input grid. This leaves the grid with only the rows above and below the deleted row.\n2. Move the bottom section of the grid (all rows originally below the removed row) to the top of the output grid, maintaining their original order.\n3. Move the upper section of the grid (all rows originally above the removed row) to the bottom of the output grid, maintaining their original order.\n4. The resulting output grid consists only of the nonzero entries and zeros from the original input in these new positions, with each section retaining original values and row/column lengths.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [0, 0, 7, 7, 0, 0, 0, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], [6, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0], [6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[6, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6],\n [6, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0],\n [6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7],\n [0, 0, 7, 7, 0, 0, 0, 0, 7, 0, 0],\n [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0],\n [0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 7],\n [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0]]", "expected_output": [[6, 0, 0, 0, 6, 0, 6, 0, 0, 0, 7], [0, 0, 7, 7, 0, 0, 0, 0, 7, 0, 6], [6, 0, 0, 0, 6, 0, 7, 0, 0, 0, 6], [0, 7, 0, 7, 0, 0, 0, 0, 0, 6, 7], [6, 0, 0, 6, 0, 0, 7, 0, 0, 0, 0]]}, "e99362f0": {"instruction": "1. Locate the horizontal line where every cell contains the value 4. This is the central dividing row of the grid.\n2. Extract the 5 rows immediately above this row and the 5 rows immediately below this row, forming a 10-row region that excludes the row of 4s.\n3. For each of these two 5-row blocks (above and below the horizontal line), take the 4 columns to the right of the central 4s column (i.e., columns 5, 6, 7, and 8, counting from 0).\n4. For each of these two blocks (upper and lower), rotate the extracted 5x4 subgrid 90 degrees clockwise.\n5. Stack the rotated upper block on top of the rotated lower block to form a new 5x4 output grid.", "test_input": [[7, 7, 0, 0, 4, 0, 9, 9, 0], [7, 0, 0, 0, 4, 0, 9, 0, 9], [0, 7, 7, 0, 4, 9, 9, 9, 9], [7, 7, 0, 0, 4, 9, 0, 9, 9], [7, 0, 0, 0, 4, 9, 9, 0, 9], [4, 4, 4, 4, 4, 4, 4, 4, 4], [2, 2, 0, 2, 4, 8, 8, 0, 8], [0, 0, 2, 0, 4, 8, 8, 0, 0], [0, 0, 2, 0, 4, 8, 0, 8, 8], [0, 0, 0, 2, 4, 8, 8, 8, 0], [0, 0, 2, 2, 4, 8, 8, 8, 0]], "predicted_output": "[[9, 0, 9, 9],\n [0, 9, 0, 9],\n [9, 0, 9, 9],\n [9, 9, 9, 9],\n [0, 9, 9, 9],\n [8, 0, 8, 8],\n [8, 8, 0, 8],\n [8, 8, 8, 0],\n [0, 8, 8, 8],\n [8, 8, 8, 0]]", "expected_output": [[8, 8, 9, 8], [8, 8, 2, 9], [8, 7, 8, 8], [8, 8, 8, 9], [8, 8, 8, 9]]}, "e9ac8c9e": {"instruction": "1. Identify all nonzero numbers that are isolated from the main \"block\" of repeating numbers (specifically, isolated single digits at the corners or edges, not part of solid rectangles or lines of repeated digits). These isolated numbers will serve as the \"source\" digits for transformation.\n2. For each pair of these isolated digits present in the same row (for horizontal transformation) or the same column (for vertical transformation), group them from left-to-right (or top-to-bottom) as pairs.\n3. For each such pair, create a solid rectangle (either horizontally or vertically, depending on the arrangement) of size 3 rows by 3 columns, filled with the color of each source digit. The rectangle for the left/top digit starts at the leftmost/topmost position, and the rectangle for the right/bottom digit is directly adjacent.\n   - For example, if the pair was (6, 9), produce a 3x3 block of 6s on the left, and a 3x3 block of 9s on the right, forming a 3x6 rectangle in total.\n4. Place each constructed rectangle into the uppermost available area of the output grid, starting from where the isolated digits were located in the input, but stacked downward as in the seen examples. Each subsequent set of paired digits is placed directly below the previous ones, with one row of separation.\n5. All remaining cells in the output grid should be set to 0.\n6. If there are any \"inner\" regions in the input made up of repeated digits surrounded by zeros (such as large blocks of 5s), these are ignored in the output.", "test_input": [[6, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 9, 0, 0, 7, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 2, 0, 0, 6, 0], [7, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 3, 0, 0, 0, 0]], "predicted_output": "[[6, 6, 6, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [6, 6, 6, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [6, 6, 6, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [7, 7, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [7, 7, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [7, 7, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 7, 7, 8, 8, 8, 0, 0, 0, 0, 9, 7, 0, 0], [0, 7, 7, 7, 8, 8, 8, 0, 0, 0, 0, 2, 6, 0, 0], [0, 7, 7, 7, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 8, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "e9afcf9a": {"instruction": "1. For each row in the input grid, alternate the values in the row between the first and second row's original values, starting with the value that is in the same position (row) as the row number.\n2. Specifically, for each column index:\n   - If the column index is even, set the value in the top row to the original value of the first row and the value in the bottom row to the original value of the second row.\n   - If the column index is odd, swap the values: set the top row to the second row's original value and the bottom row to the first row's original value.", "test_input": [[6, 6, 6, 6, 6, 6], [2, 2, 2, 2, 2, 2]], "predicted_output": "[[6, 2, 6, 2, 6, 2],\n [2, 6, 2, 6, 2, 6]]", "expected_output": [[6, 2, 6, 2, 6, 2], [2, 6, 2, 6, 2, 6]]}, "e9b4f6fc": {"instruction": "1. Identify the smallest bounding box that contains all non-background (non-zero) cells in the input grid.\n2. Extract the subgrid defined by this bounding box.\n3. From this extracted subgrid, locate the largest connected shape of a specific color (other than background), bordered on all sides by a different color forming a frame.\n4. Crop the subgrid further to the tightest rectangle that contains both this frame and its interior region.\n5. In this rectangle, recolor the interior region using the same abstraction (mapping of inner region colors to output region colors) as seen in the training examples, where the numbers were remapped (e.g. 3 \u2192 2, 1 \u2192 1, 7 \u2192 2, 8 \u2192 8).\n6. Set the regions outside the frame to the color of the frame, so the output subgrid becomes an enclosed region with a \u201cframe\u201d and an \u201cinterior\u201d as seen in the examples.\n7. Output the resulting subgrid as the output grid.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 8, 8, 8, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 7, 7, 7, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 7, 1, 1, 0, 0, 4, 8, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 1, 1, 1],\n [1, 8, 8, 8, 1],\n [1, 2, 2, 2, 1],\n [1, 1, 2, 1, 1],\n [1, 1, 1, 1, 1]]", "expected_output": [[1, 1, 2, 1, 1], [1, 2, 2, 2, 1], [1, 4, 4, 4, 1], [1, 6, 6, 6, 1], [1, 1, 6, 1, 1], [1, 1, 1, 1, 1]]}, "e9bb6954": {"instruction": "1. Identify all vertically stacked, contiguous blocks of the same nonzero color (excluding '0') that form a horizontal line of 3 or more cells in any column or row. For each such horizontal/vertical block, proceed as follows.\n2. If the line/block consists of the value 8, 4, 6, 3, or 7, and is contiguous (touching, with no zero/other color in between), *replace* **the entire longest block in that row or column** with that value throughout\u2014i.e., extend that value to fill the block's entire length (horizontally or vertically) as seen in the surrounding context in the other samples.\n3. For row or column blocks of length less than 3 or blocks that are not contiguous, leave them unchanged.\n4. For each row, search for the leftmost nonzero value that is either 8, 4, 6, 3, or 7, and if found in a single isolated cell, check if in other grid examples there are matching vertical/horizontal stripes of such values\u2014if the context matches, extend the value to fill a full horizontal line of the corresponding length.\n5. Where there is a block of zeros to the left or right of the block in step 2, do not overwrite zeros outside the block.\n6. All other numbers that do not participate in these blocks are preserved in their original positions.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 7, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 5, 0, 0, 0, 7, 4, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 2, 4], [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 6, 0, 0, 0, 2, 0], [7, 7, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 6, 9, 9, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 2, 0], [3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 0, 0, 0, 0, 7, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0],\n [0, 5, 0, 0, 0, 7, 4, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0],\n [0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 2, 4],\n [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 8, 8, 5, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0],\n [0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 6, 0, 0, 0, 2, 0],\n [7, 7, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 6, 6, 9, 9, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 2, 0],\n [3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 4, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 7, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 8, 0, 8, 0, 2, 0, 0], [4, 7, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0], [1, 7, 0, 0, 0, 7, 4, 4, 4, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4], [0, 7, 0, 0, 0, 7, 4, 4, 4, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 6, 0, 0, 4, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0], [0, 7, 7, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 8, 8, 8, 0, 2, 4], [8, 0, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 7, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0], [0, 7, 2, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 8, 1, 4, 0, 0], [0, 7, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 6, 8, 0, 0, 2, 0], [7, 7, 7, 0, 0, 0, 0, 4, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 7, 6, 6, 9, 9, 0, 4, 4, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 7, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 7, 0, 8, 0, 0, 2, 0], [3, 7, 4, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 8, 0, 4, 0, 0], [0, 7, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 8, 0, 0, 0, 0]]}, "e9c9d9a1": {"instruction": "1. Identify each horizontal band separated by rows that contain only the value 3 (these rows act as separators). Each band consists of the contiguous rows between such separator rows, or between the edge of the grid and a separator.\n2. For each band, determine its relative position within the full grid (counting from top to bottom, starting at 0). Assign a color code as follows: the topmost band (index 0) is color 2, the second-to-bottom band is color 1, and all bands in between are color 0.\n3. Within each band, for every row, replace the leftmost group of consecutive zeros ending immediately before the first occurrence of 3 with the band\u2019s color code as determined above. The length of the replacement should match the number of zeros before the first 3 in the row.\n4. For the right side of each band, after the last 3 in each row, replace the group of consecutive zeros with a new color code: for the topmost band (index 0) use color 4, for the bottommost band use color 8, and for all bands in between use color 7. The replacement starts at the first zero after the last 3 in the row and continues to the edge of the band or grid.\n5. Do not modify any 3s or zeros not covered by the above replacements.", "test_input": [[0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 2, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 4, 4, 4],\n [2, 2, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 4, 4, 4],\n [2, 2, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 4, 4, 4],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 1, 1, 1],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 1, 1, 1],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 1, 1, 1],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 8, 8, 8]]", "expected_output": [[2, 2, 3, 0, 0, 0, 3, 0, 0, 3, 4, 4, 4, 4, 4], [2, 2, 3, 0, 0, 0, 3, 0, 0, 3, 4, 4, 4, 4, 4], [2, 2, 3, 0, 0, 0, 3, 0, 0, 3, 4, 4, 4, 4, 4], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 3, 7, 7, 7, 3, 7, 7, 3, 0, 0, 0, 0, 0], [0, 0, 3, 7, 7, 7, 3, 7, 7, 3, 0, 0, 0, 0, 0], [0, 0, 3, 7, 7, 7, 3, 7, 7, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 3, 7, 7, 7, 3, 7, 7, 3, 0, 0, 0, 0, 0], [0, 0, 3, 7, 7, 7, 3, 7, 7, 3, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [1, 1, 3, 0, 0, 0, 3, 0, 0, 3, 8, 8, 8, 8, 8], [1, 1, 3, 0, 0, 0, 3, 0, 0, 3, 8, 8, 8, 8, 8], [1, 1, 3, 0, 0, 0, 3, 0, 0, 3, 8, 8, 8, 8, 8], [1, 1, 3, 0, 0, 0, 3, 0, 0, 3, 8, 8, 8, 8, 8]]}, "e9fc42f2": {"instruction": "1. Identify the smallest rectangle that bounds all non-background (non-2) cells in the input grid. This rectangle should include all cells that are not 2.\n2. Extract this minimal rectangle, preserving all numbers and their relative positions.\n3. Remove any rows and columns from this rectangle's top, bottom, left, or right that contain only 2s, until at least one non-2 exists in each row and column of the rectangle.\n4. Return this extracted rectangle as the output grid.", "test_input": [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 1, 3, 1, 1, 2, 2, 2, 2, 1, 3, 1, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2], [2, 2, 2, 2, 1, 2, 1, 2, 2, 8, 2, 1, 2], [2, 2, 2, 2, 1, 2, 8, 2, 2, 1, 2, 1, 2], [2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2], [2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 4, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], "predicted_output": "[[1, 1, 1, 1, 2, 2, 2, 2, 2],\n [2, 1, 2, 2, 2, 2, 2, 2, 2],\n [1, 3, 1, 1, 2, 2, 2, 1, 3],\n [2, 2, 2, 2, 2, 2, 2, 1, 2],\n [2, 2, 2, 1, 2, 1, 2, 8, 2],\n [2, 2, 2, 1, 2, 8, 2, 1, 2],\n [2, 2, 2, 1, 1, 1, 2, 1, 2],\n [2, 2, 2, 2, 1, 2, 2, 1, 2],\n [2, 2, 2, 2, 2, 2, 2, 1, 2],\n [2, 2, 2, 2, 2, 2, 2, 1, 1],\n [2, 2, 2, 2, 2, 2, 2, 2, 2]]", "expected_output": [[2, 2, 2, 1, 1, 1, 1], [2, 2, 2, 2, 1, 2, 2], [2, 2, 2, 1, 3, 1, 1], [2, 2, 2, 1, 3, 1, 2], [1, 2, 1, 1, 2, 1, 2], [1, 2, 8, 8, 2, 1, 2], [1, 1, 1, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1, 2], [2, 2, 2, 1, 2, 1, 2], [2, 2, 2, 1, 2, 4, 2], [2, 2, 2, 1, 1, 1, 2]]}, "ea32f347": {"instruction": "1. For every contiguous group of nonzero cells with the value 5 that lies strictly in a single row (i.e., forming a horizontal stripe), do the following:\n    a. If this group is the leftmost such horizontal group in the grid, change all its 5s to 2.\n    b. If this group is the horizontal 5 group on the bottommost row with any 5 in it, change all its 5s to 1.\n    c. Otherwise, if this is a horizontal row of 5s not matching the two criteria above, change all its 5s to 4.\n\n2. For every contiguous group of nonzero cells with the value 5 that lies strictly in a single column (i.e., forming a vertical stripe), do the following:\n    a. If this group is attached to earlier horizontal stripes (e.g., shares a row/column or is perpendicular at the same position), ensure you follow the same index/positioning logic:\n        - If it is the leftmost vertical stripe, change all its 5s to 4.\n        - If it is the rightmost vertical stripe, change all its 5s to 2.\n        - Otherwise, change its 5s to 1.\n    b. In this set of examples, simply change any vertical stripe of 5s not overlapping with another to 1.\n\n3. If a cell on the grid contains a 0, leave it unchanged.\n\n4. Apply these replacements so that each previous 5 in the input is replaced according to its positional group as described, resulting in the coloring/numbering pattern that mimics the output grids.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 2, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ea786f4a": {"instruction": "1. Identify the unique center cell that contains a different value (the \"zero cell\").  \n2. Let N be the grid's dimension (N x N), and let (cx, cy) be the coordinates of the zero cell.  \n3. For every cell (x, y) in the grid, compute its Manhattan distance D from the center (D = |x - cx| + |y - cy|).  \n4. If D is a multiple of 5 (including 0), set the cell's value to the zero cell value (e.g., 0).  \n5. Otherwise, leave the cell's value unchanged.", "test_input": [[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]], "predicted_output": "[[6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 0, 6, 0, 6, 6, 6, 6],\n [6, 6, 6, 0, 6, 6, 6, 0, 6, 6, 6],\n [6, 6, 0, 6, 6, 6, 6, 6, 0, 6, 6],\n [6, 0, 6, 6, 6, 6, 6, 6, 6, 0, 6],\n [0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 0],\n [6, 0, 6, 6, 6, 6, 6, 6, 6, 0, 6],\n [6, 6, 0, 6, 6, 6, 6, 6, 0, 6, 6],\n [6, 6, 6, 0, 6, 6, 6, 0, 6, 6, 6],\n [6, 6, 6, 6, 0, 6, 0, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6]]", "expected_output": [[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0], [6, 0, 6, 6, 6, 6, 6, 6, 6, 0, 6], [6, 6, 0, 6, 6, 6, 6, 6, 0, 6, 6], [6, 6, 6, 0, 6, 6, 6, 0, 6, 6, 6], [6, 6, 6, 6, 0, 6, 0, 6, 6, 6, 6], [6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6], [6, 6, 6, 6, 0, 6, 0, 6, 6, 6, 6], [6, 6, 6, 0, 6, 6, 6, 0, 6, 6, 6], [6, 6, 0, 6, 6, 6, 6, 6, 0, 6, 6], [6, 0, 6, 6, 6, 6, 6, 6, 6, 0, 6], [0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0]]}, "ea959feb": {"instruction": "1. For each row in the grid, check if there is a contiguous block of cells with the value 1 that interrupts the regular repeating sequence of blocks/patterns. \n2. If such a block of 1s is found, and it replaces the usual patterned sequence (i.e., the same position in other rows contains the regular non-1 value), restore that section to the regular sequence found elsewhere in the same row group.\n   - Specifically, for each position that contains a 1 in such a block, replace it with the value that appears in the corresponding position in the previous similar group segments of the row or from the repeating template of that row.\n3. Repeat for all rows, ensuring that any disruptions to the block pattern (by blocks of 1s) are replaced by the regular repeating block that exists elsewhere in those rows.\n4. The result should be that all rows now fit the recurring block-pattern seen in the undisturbed rows/segments, with no interruptions by blocks of 1s where the base pattern expects other values.", "test_input": [[7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4], [8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5], [9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6], [1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7], [2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8], [3, 8, 6, 6, 8, 3, 9, 8, 1, 1, 1, 1, 1, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9], [4, 9, 7, 7, 9, 4, 1, 9, 1, 1, 1, 1, 1, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1], [5, 1, 8, 8, 1, 5, 2, 1, 1, 1, 1, 1, 1, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2], [6, 2, 9, 9, 2, 6, 3, 2, 1, 1, 1, 1, 1, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3], [7, 3, 1, 1, 1, 1, 1, 3, 4, 7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4], [8, 4, 2, 2, 1, 1, 1, 4, 5, 8, 4, 1, 1, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5], [9, 5, 3, 1, 1, 1, 1, 1, 6, 9, 5, 1, 1, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6], [1, 6, 4, 1, 1, 1, 1, 1, 7, 1, 6, 1, 1, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7], [2, 7, 5, 1, 1, 1, 1, 1, 8, 2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8], [3, 8, 6, 1, 1, 1, 1, 1, 9, 3, 8, 6, 6, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9], [4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1], [5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2], [6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3], [7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4], [8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5], [9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6], [1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7]], "predicted_output": "[[7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4],\n [8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5],\n [9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6],\n [1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7],\n [2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8],\n [3, 8, 6, 6, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9],\n [4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1],\n [5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2],\n [6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3],\n [7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4],\n [8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5],\n [9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6],\n [1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7],\n [2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8],\n [3, 8, 6, 6, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9],\n [4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1],\n [5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2],\n [6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3],\n [7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4],\n [8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5],\n [9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6],\n [1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7]]", "expected_output": [[7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4], [8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5], [9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6], [1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7], [2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8], [3, 8, 6, 6, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9], [4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1], [5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2], [6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3], [7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4], [8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5], [9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6], [1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7], [2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8, 7, 8, 2, 7, 5, 5, 7, 2, 8], [3, 8, 6, 6, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9, 8, 9, 3, 8, 6, 6, 8, 3, 9], [4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1, 9, 1, 4, 9, 7, 7, 9, 4, 1], [5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2, 1, 2, 5, 1, 8, 8, 1, 5, 2], [6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3, 2, 3, 6, 2, 9, 9, 2, 6, 3], [7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4, 3, 4, 7, 3, 1, 1, 3, 7, 4], [8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5, 4, 5, 8, 4, 2, 2, 4, 8, 5], [9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6, 5, 6, 9, 5, 3, 3, 5, 9, 6], [1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7, 6, 7, 1, 6, 4, 4, 6, 1, 7]]}, "ea9794b1": {"instruction": "1. Divide the input grid into four quadrants of size 5x5 by splitting it horizontally and vertically in the center.\n2. For each 5x5 quadrant, extract the upper-left, upper-right, lower-left, and lower-right parts as follows:\n    - Upper-left: rows 0\u20134, columns 0\u20134\n    - Upper-right: rows 0\u20134, columns 5\u20139\n    - Lower-left: rows 5\u20139, columns 0\u20134\n    - Lower-right: rows 5\u20139, columns 5\u20139\n3. Place the four 5x5 quadrants into the new output grid in the following order:\n    - Top-left quadrant of output: lower-left quadrant of input (rows 5\u20139, columns 0\u20134)\n    - Top-right quadrant of output: upper-left quadrant of input (rows 0\u20134, columns 0\u20134)\n    - Bottom-left quadrant of output: lower-right quadrant of input (rows 5\u20139, columns 5\u20139)\n    - Bottom-right quadrant of output: upper-right quadrant of input (rows 0\u20134, columns 5\u20139)\n4. After quadrant reassignment, for each resulting row in the new 5x5 output grid, shift the elements cyclically to the left by a number of steps equal to the row index (i.e., row 0 no shift, row 1 shift left by 1, row 2 by 2, etc.).", "test_input": [[4, 0, 4, 0, 0, 3, 0, 3, 3, 0], [4, 0, 0, 0, 0, 3, 3, 0, 0, 3], [0, 0, 4, 4, 4, 0, 0, 0, 3, 0], [0, 0, 4, 0, 4, 3, 3, 3, 3, 0], [4, 4, 4, 4, 0, 3, 0, 0, 0, 0], [0, 0, 0, 9, 9, 0, 0, 8, 0, 8], [0, 9, 0, 9, 9, 8, 0, 0, 0, 8], [0, 0, 0, 9, 9, 0, 0, 8, 8, 0], [0, 0, 9, 9, 9, 8, 0, 0, 0, 0], [9, 0, 9, 0, 0, 0, 0, 8, 8, 0]], "predicted_output": "[[0, 0, 0, 9, 9, 4, 0, 4, 0, 0],\n [8, 0, 0, 0, 9, 0, 4, 0, 0, 0],\n [0, 9, 8, 0, 0, 4, 4, 4, 4, 0],\n [0, 8, 0, 8, 0, 0, 0, 4, 0, 4],\n [8, 0, 0, 0, 0, 4, 4, 4, 4, 0],\n [0, 0, 3, 0, 3, 0, 0, 9, 9, 0],\n [3, 3, 0, 0, 3, 9, 0, 9, 9, 8],\n [0, 3, 3, 0, 0, 0, 0, 9, 9, 0],\n [0, 0, 0, 3, 0, 8, 0, 8, 8, 0],\n [3, 0, 0, 0, 0, 0, 3, 0, 0, 8]]", "expected_output": [[3, 0, 3, 3, 9], [3, 3, 0, 9, 3], [0, 0, 8, 3, 9], [3, 3, 3, 3, 9], [3, 4, 9, 8, 0]]}, "eb281b96": {"instruction": "1. Identify the unique rows in the input grid. These rows appear in a repeating pattern and form the building blocks of the grid\u2019s structure.\n2. Repeat the sequence of these unique rows, in their original order, to extend the grid downward. \n3. Continue repeating the block of unique rows until the total number of rows in the output grid is exactly twice the number of unique rows (i.e., output grid rows = input rows \u00d7 2, rounding up if the input has an odd number of rows).\n4. If a partial repeat would exceed the required number of rows, only include as many rows as needed from the start of the repeating block to reach the target grid height.", "test_input": [[0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3]], "predicted_output": "[[0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0],\n [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0],\n [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0],\n [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0],\n [3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3],\n [0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0],\n [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0],\n [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0],\n [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0],\n [3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3]]", "expected_output": [[0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0], [0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0]]}, "eb5a1d5d": {"instruction": "1. Identify the largest rectangle in the input grid that is filled with a value different from the uniform border value (in this case, value 2). This inner rectangle forms the distinct pattern within the grid.\n2. Further identify any nested rectangles or shapes within this main inner rectangle that have differing fill values. Retain their spatial relationships and values.\n3. Crop the grid to the smallest bounding rectangle that contains all non-border regions (the smallest rectangle that encloses all areas with values other than the uniform border value).\n4. Add a new border of the original border value (2 in this test), one cell thick, all around the cropped grid. This creates an output grid that is 2 rows and 2 columns larger than the minimal inner bounding box.\n5. The resulting output grid should now show the main internal pattern surrounded by a one-cell-wide border of the original border value, and retain all internal nested shapes and their values.", "test_input": [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 8, 8, 8, 2, 2, 2, 2, 8, 8, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 8, 8, 8, 2, 2, 2, 2, 8, 8, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 8, 8, 8, 2, 2, 2, 2, 8, 8, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 8, 8, 8, 2, 2, 2, 2, 8, 8, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], "predicted_output": "[[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],\n [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 8, 8, 8, 2, 2, 2, 2, 8, 8, 8, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 8, 8, 8, 2, 2, 2, 2, 8, 8, 8, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 8, 8, 8, 2, 2, 2, 2, 8, 8, 8, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2],\n [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],\n [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]]", "expected_output": [[2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 1, 1, 1, 1, 1, 1, 1, 2], [2, 1, 3, 3, 3, 3, 3, 1, 2], [2, 1, 3, 8, 8, 8, 3, 1, 2], [2, 1, 3, 8, 2, 8, 3, 1, 2], [2, 1, 3, 8, 8, 8, 3, 1, 2], [2, 1, 3, 3, 3, 3, 3, 1, 2], [2, 1, 1, 1, 1, 1, 1, 1, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2]]}, "ec883f72": {"instruction": "1. Identify the nonzero block structure in the lower right quadrant of the input grid (made up of three regions: vertical columns of 3s along the right side, 3s crossing horizontally across the grid, and a cluster of 4s in the upper-middle region).\n2. Starting at the row immediately below the lowest nonzero cell in the main block (in this case, the row after the horizontal bar of 3s), fill cells in the \"diagonal line\" manner, starting from the rightmost column where a group of 3s is found. \n3. For each row below the main block (i.e., below the horizontal bar of 3s), place a '3' one cell to the left of the 3 placed in the row above; keep this single 3 in each successive row, stepping one cell left each time, until you reach the left edge of the grid or until the required number of steps is complete. \n4. All other cells remain unchanged.", "test_input": [[0, 0, 0, 0, 3, 0, 4, 4, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0, 4, 4, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0, 4, 4, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 3, 0, 4, 4, 0, 3, 0, 0],\n [0, 0, 0, 0, 3, 0, 4, 4, 0, 3, 0, 0],\n [0, 0, 0, 0, 3, 0, 4, 4, 0, 3, 0, 0],\n [0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 3, 0, 4, 4, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0, 4, 4, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0, 4, 4, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4], [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ecaa0ec1": {"instruction": "1. Identify the largest contiguous block in the input grid that contains only the colors 1 and 8 (the central nonzero \"shape\" made of only 1s and 8s).  \n2. Copy this block, preserving its layout and colors, to the same relative position in the output grid.\n3. For each color-4 cell in the input grid, shift it down by 1 row and left by 2 columns in the output grid (maintaining its original relative placement if possible; otherwise, leave out-of-bounds markers as background/0).\n4. Set every other cell in the output grid to 0 (background color).", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 4, 0, 0], [0, 0, 0, 0, 1, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 1, 8, 1, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 1, 8, 8, 0, 4, 0, 0],\n [0, 0, 0, 0, 1, 8, 1, 4, 0, 0, 0],\n [0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 1, 8, 1, 0, 0, 0, 0], [0, 0, 0, 0, 8, 8, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ecb67b6d": {"instruction": "1. For each row in the grid, identify all cells with the value 5 that are immediately adjacent (horizontally or vertically) to at least one cell with the value 7.\n2. Change each such identified 5 to 8, but only if the 5 is not located on the outermost row or column of the grid.\n3. Leave all other values unchanged.", "test_input": [[7, 5, 5, 7, 7, 7, 7, 7, 5, 5, 5, 5, 7, 7, 5, 7, 7, 7, 7], [7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 7, 7, 5, 7, 7], [7, 7, 5, 7, 7, 5, 7, 5, 7, 5, 7, 7, 7, 7, 7, 5, 5, 7, 7], [5, 7, 7, 5, 7, 7, 7, 5, 5, 7, 7, 7, 7, 5, 7, 5, 7, 5, 7], [7, 7, 7, 5, 7, 5, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 5, 5], [7, 5, 7, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 5, 5], [7, 5, 5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5], [7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 7, 5, 5, 7, 7, 7, 7, 5, 7], [7, 7, 5, 7, 7, 5, 5, 7, 5, 5, 7, 7, 5, 5, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 7, 7, 7, 7, 5, 7, 7], [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 5, 7, 7, 7, 7, 5, 5], [7, 5, 5, 5, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7], [7, 5, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 7, 7, 5, 7, 7, 5, 5], [7, 5, 5, 7, 7, 7, 5, 7, 5, 5, 7, 5, 5, 5, 7, 5, 7, 7, 7], [7, 7, 7, 7, 7, 5, 5, 7, 5, 7, 7, 7, 7, 7, 5, 5, 5, 7, 5], [7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7]], "predicted_output": "[[7, 5, 8, 7, 7, 7, 7, 7, 8, 5, 8, 8, 7, 7, 8, 7, 7, 7, 7],\n [7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 7, 7, 8, 7, 7],\n [7, 7, 8, 7, 7, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8, 8, 7, 7],\n [5, 7, 7, 8, 7, 7, 7, 8, 8, 7, 7, 7, 7, 8, 7, 8, 7, 8, 7],\n [7, 7, 7, 8, 7, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 5],\n [7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 5],\n [7, 8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 8],\n [7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 7, 7, 7, 8, 7],\n [7, 7, 8, 7, 7, 8, 8, 7, 8, 8, 7, 7, 8, 8, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 8, 7, 7, 7, 7, 7, 8, 7, 7],\n [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 7, 7, 7, 7, 8, 5],\n [7, 8, 8, 8, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7],\n [7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 8, 7, 7, 8, 5],\n [7, 5, 8, 7, 7, 7, 8, 7, 8, 8, 7, 8, 8, 8, 7, 8, 7, 7, 7],\n [7, 7, 7, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 7, 8, 8, 8, 7, 8],\n [7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7]]", "expected_output": [[7, 5, 5, 7, 7, 7, 7, 7, 5, 5, 5, 5, 7, 7, 5, 7, 7, 7, 7], [7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 5, 7, 7, 8, 7, 7], [7, 7, 5, 7, 7, 5, 7, 8, 7, 8, 7, 7, 7, 7, 7, 8, 8, 7, 7], [5, 7, 7, 5, 7, 7, 7, 8, 8, 7, 7, 7, 7, 5, 7, 8, 7, 8, 7], [7, 7, 7, 5, 7, 5, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8], [7, 5, 7, 5, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8], [7, 5, 5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 8], [7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 7, 5, 5, 7, 7, 7, 7, 8, 7], [7, 7, 5, 7, 7, 5, 5, 7, 5, 5, 7, 7, 5, 5, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 7, 7, 7, 7, 5, 7, 7], [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 5, 7, 7, 7, 7, 5, 5], [7, 5, 5, 5, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7], [7, 5, 7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 8, 7, 7, 5, 5], [7, 5, 5, 7, 7, 7, 8, 7, 8, 8, 7, 8, 8, 8, 7, 8, 7, 7, 7], [7, 7, 7, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 7, 8, 8, 8, 7, 5], [7, 7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7]]}, "ecdecbb3": {"instruction": "1. For each column, identify columns that contain a vertical line of the color `8` with possible interruptions by single cells of other colors (`2`, for example) but otherwise forming a straight vertical line.\n2. For each pair of such columns, find the horizontal row where a cell with color `2` is present between the column pair (i.e., aligned between the two vertical lines).\n3. For each such \"2\", replace the corresponding region between the vertical lines and around the \"2\" with a filled rectangular box:\n    a. The central row becomes a row containing `8` at the positions of the vertical lines and `2` filling all in-between columns.\n    b. The rows immediately above and below the central row become a row with `8` at the column positions of the vertical lines, and all other cells in those columns between the lines set to `8`.\n    c. As you fill, the shape forms a complete rectangle bordered by `8`, with the original \"2\"s inside replaced and extended to form a wide bar or stripe inside the rectangle.\n4. Retain the rest of the grid the same, except for the region replaced by the new \"box\" structure as described above.\n5. Repeat for all detected vertical pairs and horizontal \"2\"s.", "test_input": [[0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 2, 0, 0, 0], [0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 2, 0, 0, 0],\n [0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 2, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 2, 8, 8],\n [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 8, 8, 8, 8]]", "expected_output": [[0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 2, 8, 2, 2, 0, 0, 0], [0, 2, 2, 8, 2, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 8, 2, 8, 2, 2, 2, 2, 2, 8, 2, 8, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 2, 8, 2, 2, 2, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]]}, "ed36ccf7": {"instruction": "1. For each column in the grid, move all nonzero values upward within that column, maintaining their original order from the bottom up.\n2. After moving the nonzero values to the top of each column, shift the nonzero values in each row towards the rightmost available positions in that row, pushing zeros to the left.\n3. The result is that the nonzero elements in each row gather as far right as possible, preserving their relative order after the upward movement, with zeros occupying the remaining spaces to the left.", "test_input": [[0, 0, 0], [5, 0, 0], [0, 5, 5]], "predicted_output": "[[0, 0, 5],\n [0, 5, 5],\n [0, 0, 0]]", "expected_output": [[0, 0, 5], [0, 0, 5], [0, 5, 0]]}, "ed74f2f2": {"instruction": "1. Remove the first (top) and last (bottom) rows of the input grid, as well as the first (leftmost) and last (rightmost) columns, resulting in a 3x7 subgrid containing the relevant pattern.\n2. Identify all contiguous regions of nonzero (5) values in this 3x7 subgrid. For each region, assign a unique color/number:\n    - Assign 1 to the region in the leftmost three columns,\n    - Assign 2 to the region in the central columns,\n    - Assign 3 to the region in the rightmost columns.\n3. For each (i, j) position in the resulting 3x3 output grid (where i and j index rows and columns from 0), do the following:\n    - Map output position (i, j) to the corresponding location of the contiguous region in the trimmed 3x7 grid, according to pre-defined clusters for each shape (the mapping corresponds to the relative positions of clusters in prior examples).\n    - Set the output cell to the assigned number for that region (from step 2), or 0 if the corresponding position does not belong to any region.\n4. Return the 3x3 grid constructed from the above mapping.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 0, 5, 5, 0, 0], [0, 0, 5, 0, 0, 5, 5, 5, 0], [0, 5, 5, 0, 0, 5, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 2, 2],\n [1, 0, 2],\n [1, 0, 3]]", "expected_output": [[3, 3, 0], [3, 3, 3], [3, 0, 3]]}, "ed98d772": {"instruction": "1. Take the input 3x3 grid and create a new 6x6 grid, initializing all cells to 0.\n2. For each cell (i, j) in the input grid, place its value in the following positions of the 6x6 output grid:\n   - (i,     j)\n   - (i,     j+3)\n   - (i+3,   j)\n   - (i+3,   j+3)\n3. For each cell (i, j) in the input grid, further place its value in these additional positions:\n   - (i,     i+j)              (i on row, i+j on column)\n   - (i+3,   i+j+3)\n4. If any positions receive multiple assignments due to overlap, use the latest assigned value.\n5. The resulting 6x6 grid is the output.", "test_input": [[6, 6, 0], [6, 6, 0], [0, 0, 6]], "predicted_output": "[[6, 6, 0, 6, 6, 0],\n [6, 6, 0, 6, 6, 0],\n [0, 0, 6, 0, 0, 6],\n [6, 6, 0, 6, 6, 0],\n [6, 6, 0, 6, 6, 0],\n [0, 0, 6, 0, 0, 6]]", "expected_output": [[6, 6, 0, 0, 0, 6], [6, 6, 0, 6, 6, 0], [0, 0, 6, 6, 6, 0], [6, 0, 0, 0, 6, 6], [0, 6, 6, 0, 6, 6], [0, 6, 6, 6, 0, 0]]}, "edcc2ff0": {"instruction": "1. For the upper section of the grid (prior to the first full row of nonzero values), identify each row where the first element is nonzero and all other elements are zero.\n2. For each such row, scan downwards to the next such row (if any) or the next divider band; for all those rows, expand the nonzero segment in the first nonzero row horizontally to the right, filling with the same nonzero value up to but not including encountering a new nonzero value or a divider band, or up to a maximum of 4 consecutive columns, whichever comes first. All other cells remain as in the input.\n3. All remaining rows and columns (that form a \"block\" section, typically surrounded by a border value) are left unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 2, 4, 4, 3, 3, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 7, 7, 4, 4, 4, 2, 2, 4, 4], [4, 4, 4, 4, 4, 4, 2, 2, 4, 4], [4, 3, 3, 4, 4, 4, 4, 4, 4, 4], [4, 3, 3, 4, 4, 4, 4, 4, 2, 4], [4, 4, 4, 4, 5, 5, 4, 4, 2, 4], [4, 4, 4, 4, 5, 5, 4, 4, 2, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 4, 4, 4, 2, 2, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [2, 2, 2, 2, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 2, 2, 2, 4, 4, 3, 3, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 7, 7, 4, 4, 4, 2, 2, 4, 4],\n [4, 4, 4, 4, 4, 4, 2, 2, 4, 4],\n [4, 3, 3, 4, 4, 4, 4, 4, 4, 4],\n [4, 3, 3, 4, 4, 4, 4, 4, 2, 4],\n [4, 4, 4, 4, 5, 5, 4, 4, 2, 4],\n [4, 4, 4, 4, 5, 5, 4, 4, 2, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 2, 2, 4, 4, 4, 4, 4, 4, 4],\n [4, 2, 2, 4, 4, 4, 2, 2, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 2, 4, 4, 3, 3, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 2, 2, 4, 4], [4, 4, 4, 4, 4, 4, 2, 2, 4, 4], [4, 3, 3, 4, 4, 4, 4, 4, 4, 4], [4, 3, 3, 4, 4, 4, 4, 4, 2, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 4], [4, 4, 4, 4, 4, 4, 4, 4, 2, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 4, 4, 4, 2, 2, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]}, "ef135b50": {"instruction": "1. For each contiguous rectangular region in the grid that is fully surrounded on its left and right sides by columns of 2s (with any number of rows and columns of 2s forming the sides):\n   a. Identify the rectangular area where all cells between the 2-walls are currently 0.\n   b. Change all the 0s in this enclosed rectangle (bounded by the columns of 2s) to 9s.\n2. Leave all other cells unchanged.", "test_input": [[2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 2, 2, 2, 0, 0, 2, 2, 2, 2], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 2, 2, 2, 2, 0], [0, 2, 2, 2, 0, 2, 2, 2, 2, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[2, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n [2, 2, 2, 0, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 2, 2, 2, 2],\n [0, 2, 2, 9, 9, 9, 2, 2, 2, 2],\n [0, 2, 2, 9, 9, 9, 0, 0, 0, 0],\n [0, 2, 2, 9, 9, 9, 2, 2, 2, 0],\n [0, 2, 2, 9, 9, 9, 2, 2, 2, 0],\n [0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[2, 2, 2, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 9, 9, 9, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 2, 2, 2, 2], [0, 2, 2, 2, 9, 9, 2, 2, 2, 2], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 9, 2, 2, 2, 2, 0], [0, 2, 2, 2, 9, 2, 2, 2, 2, 0], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ef26cbf6": {"instruction": "1. Identify all horizontal bands in the grid, separated by full rows of the value 4 (these are separator rows).\n2. For each band above the first separator row:\n    a. Identify all unique nonzero values in columns 0-2 of this band (left region).\n    b. For each such value, replace all occurrences of 1 in columns 4-6 (right region) of this band with that value (preserving their horizontal/vertical arrangement).\n    c. Repeat for all bands in the grid.\n3. Leave columns 0-3 and any values not equal to 1 unchanged in the right region.\n4. Do not modify separator rows (rows full of 4s).", "test_input": [[1, 0, 0, 4, 0, 0, 0], [0, 1, 0, 4, 0, 6, 0], [1, 1, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4], [0, 0, 1, 4, 0, 0, 0], [0, 1, 1, 4, 0, 2, 0], [1, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4], [1, 1, 0, 4, 0, 0, 0], [0, 1, 0, 4, 0, 8, 0], [1, 1, 1, 4, 0, 0, 0]], "predicted_output": "[[1, 0, 0, 4, 0, 0, 0],\n [0, 1, 0, 4, 0, 6, 0],\n [1, 1, 0, 4, 0, 0, 0],\n [4, 4, 4, 4, 4, 4, 4],\n [0, 0, 1, 4, 0, 0, 0],\n [0, 1, 1, 4, 0, 2, 0],\n [1, 0, 0, 4, 0, 0, 0],\n [4, 4, 4, 4, 4, 4, 4],\n [1, 1, 0, 4, 0, 0, 0],\n [0, 1, 0, 4, 0, 8, 0],\n [1, 1, 1, 4, 0, 0, 0]]", "expected_output": [[6, 0, 0, 4, 0, 0, 0], [0, 6, 0, 4, 0, 6, 0], [6, 6, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4], [0, 0, 2, 4, 0, 0, 0], [0, 2, 2, 4, 0, 2, 0], [2, 0, 0, 4, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4], [8, 8, 0, 4, 0, 0, 0], [0, 8, 0, 4, 0, 8, 0], [8, 8, 8, 4, 0, 0, 0]]}, "f0100645": {"instruction": "1. For each row, search from left to right for the longest consecutive sequence of border-color cells (the color found in the leftmost column; here it is 8). Merge any gaps between these consecutive border-color cells that are separated only by cells of the border or replacement color, so they become a single contiguous block at the start of the row.\n2. Move this contiguous block of border-color cells such that it begins at the leftmost position in the row. Fill the right-hand side of the row with the other values shifted right as needed, preserving their original order.\n3. Once the leftmost block is consolidated, to its right, fill as many cells with the border-color as possible without overwriting any original \"replacement color\" blocks (the color unique to this instance, here 1).\n4. For remaining positions, retain the values from the original row, skipping the ones that got replaced by the expanded left block.\n5. Leave the rightmost column (originally containing the replacement color) unchanged.", "test_input": [[8, 7, 7, 7, 7, 7, 7, 7, 1], [8, 7, 1, 1, 7, 7, 7, 7, 1], [8, 7, 1, 7, 7, 7, 7, 7, 1], [8, 7, 7, 7, 7, 1, 1, 7, 1], [8, 7, 8, 7, 1, 1, 1, 7, 1], [8, 7, 8, 8, 7, 7, 7, 8, 1], [8, 7, 8, 8, 7, 1, 1, 7, 1], [8, 7, 8, 7, 1, 1, 1, 7, 1], [8, 7, 8, 7, 7, 1, 1, 7, 1]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 7, 1],\n [8, 8, 8, 8, 7, 7, 7, 7, 1],\n [8, 8, 8, 7, 7, 7, 7, 7, 1],\n [8, 8, 8, 8, 7, 1, 1, 7, 1],\n [8, 8, 8, 7, 1, 1, 1, 7, 1],\n [8, 8, 8, 8, 8, 7, 7, 8, 1],\n [8, 8, 8, 8, 7, 1, 1, 7, 1],\n [8, 8, 8, 7, 1, 1, 1, 7, 1],\n [8, 8, 8, 7, 7, 1, 1, 7, 1]]", "expected_output": [[8, 7, 7, 7, 7, 7, 7, 7, 1], [8, 7, 7, 7, 7, 7, 1, 1, 1], [8, 7, 7, 7, 7, 7, 1, 7, 1], [8, 7, 7, 7, 7, 7, 1, 1, 1], [8, 8, 7, 7, 7, 1, 1, 1, 1], [8, 8, 8, 8, 7, 7, 7, 7, 1], [8, 8, 8, 7, 7, 7, 1, 1, 1], [8, 8, 7, 7, 7, 1, 1, 1, 1], [8, 8, 7, 7, 7, 7, 1, 1, 1]]}, "f0afb749": {"instruction": "1. For each nonzero cell in the input grid with value X at position (i, j), create a 2x2 block filled with that value X in the output grid. The top-left corner of the block should be placed at position (2i, 2j) in the output grid.\n2. For each zero cell in the input grid at position (i, j), leave the corresponding 2x2 region (positions (2i, 2j) to (2i+1, 2j+1)) filled with zeros in the output grid.\n3. After filling all 2x2 blocks, for every row n of the input grid, create two additional new rows beneath the existing rows (for a total of double the grid height), and for every column m, create two additional new columns to the right of the existing columns (for a total of double the grid width).\n4. In each 2x2 region corresponding to a nonzero input cell, write a diagonal of 1s starting from the lower-left corner to the upper-right of that 2x2 region: set position (2i+1, 2j) to 1 and position (2i, 2j+1) to 1, regardless of the input cell value.", "test_input": [[0, 4, 0], [0, 0, 0], [4, 0, 0]], "predicted_output": "[[0, 1, 0, 1, 0, 0],\n [1, 4, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0],\n [1, 0, 0, 0, 0, 0],\n [4, 1, 0, 0, 0, 0]]", "expected_output": [[0, 0, 4, 4, 0, 0], [0, 0, 4, 4, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1], [4, 4, 0, 0, 0, 0], [4, 4, 0, 0, 0, 0]]}, "f0df5ff0": {"instruction": "1. For every row in the grid, look for continuous sequences of three or more nonzero cells where the sequence is horizontal and the values in the sequence are all different from 1.\n2. For each such sequence, replace every value in that sequence with 1.\n3. If a sequence is interrupted by a 0 or a 1, do not replace those or begin a new sequence after the interruption.\n4. Do not alter any row positions or values outside of these replaced sequences; leave single cells and groups shorter than three cells unchanged unless they are part of a newly formed sequence of three or more within this process.", "test_input": [[0, 0, 0, 7, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 3], [2, 0, 4, 0, 3, 7, 0, 0, 7, 0, 7, 0, 0, 0, 8], [0, 0, 0, 7, 8, 0, 6, 2, 7, 0, 1, 0, 2, 7, 2], [0, 1, 0, 0, 2, 0, 0, 2, 6, 0, 0, 0, 0, 7, 8], [6, 0, 0, 6, 0, 1, 0, 0, 0, 2, 0, 0, 8, 6, 4], [0, 0, 4, 6, 6, 0, 0, 4, 8, 0, 0, 8, 0, 8, 7], [8, 7, 6, 0, 0, 0, 0, 7, 7, 4, 4, 8, 0, 0, 7], [3, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 7, 0, 8, 0], [0, 0, 8, 6, 8, 6, 7, 6, 1, 6, 6, 0, 4, 0, 7], [0, 8, 7, 0, 7, 8, 0, 7, 0, 8, 0, 0, 8, 0, 4], [4, 4, 0, 0, 0, 3, 0, 0, 2, 0, 0, 3, 8, 4, 8], [0, 0, 8, 0, 1, 0, 8, 3, 7, 6, 7, 8, 0, 8, 7], [0, 0, 0, 0, 8, 0, 0, 6, 0, 3, 0, 0, 3, 0, 0], [0, 6, 0, 0, 0, 0, 6, 3, 1, 0, 3, 0, 0, 1, 3], [4, 6, 0, 0, 0, 0, 8, 0, 0, 0, 2, 2, 0, 0, 6]], "predicted_output": "[[0, 0, 0, 7, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 3],\n [2, 0, 4, 0, 3, 7, 0, 0, 7, 0, 7, 0, 0, 0, 8],\n [0, 0, 0, 7, 8, 0, 1, 1, 1, 0, 1, 0, 2, 7, 2],\n [0, 1, 0, 0, 2, 0, 0, 2, 6, 0, 0, 0, 0, 7, 8],\n [6, 0, 0, 6, 0, 1, 0, 0, 0, 2, 0, 0, 8, 6, 4],\n [0, 0, 1, 1, 1, 0, 0, 4, 8, 0, 0, 8, 0, 8, 7],\n [8, 7, 6, 0, 0, 0, 0, 1, 1, 1, 1, 8, 0, 0, 7],\n [3, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 7, 0, 8, 0],\n [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 4, 0, 7],\n [0, 8, 7, 0, 7, 8, 0, 7, 0, 8, 0, 0, 8, 0, 4],\n [4, 4, 0, 0, 0, 3, 0, 0, 2, 0, 0, 3, 8, 4, 8],\n [0, 0, 8, 0, 1, 0, 8, 3, 7, 6, 7, 8, 0, 8, 7],\n [0, 0, 0, 0, 8, 0, 0, 6, 0, 3, 0, 0, 3, 0, 0],\n [0, 6, 0, 0, 0, 0, 6, 3, 1, 0, 3, 0, 0, 1, 3],\n [4, 6, 0, 0, 0, 0, 8, 0, 0, 0, 2, 2, 0, 0, 6]]", "expected_output": [[0, 0, 0, 7, 0, 0, 6, 0, 7, 0, 0, 0, 0, 0, 3], [2, 0, 4, 0, 3, 7, 0, 0, 7, 1, 7, 1, 0, 0, 8], [1, 1, 1, 7, 8, 0, 6, 2, 7, 1, 1, 1, 2, 7, 2], [1, 1, 1, 0, 2, 1, 1, 2, 6, 1, 1, 1, 0, 7, 8], [6, 1, 1, 6, 1, 1, 1, 0, 0, 2, 0, 0, 8, 6, 4], [0, 0, 4, 6, 6, 1, 1, 4, 8, 0, 0, 8, 0, 8, 7], [8, 7, 6, 1, 1, 0, 0, 7, 7, 4, 4, 8, 0, 0, 7], [3, 0, 1, 1, 1, 0, 3, 1, 1, 1, 0, 7, 0, 8, 0], [0, 0, 8, 6, 8, 6, 7, 6, 1, 6, 6, 0, 4, 0, 7], [0, 8, 7, 0, 7, 8, 0, 7, 1, 8, 0, 0, 8, 0, 4], [4, 4, 0, 1, 1, 3, 0, 0, 2, 0, 0, 3, 8, 4, 8], [0, 0, 8, 1, 1, 1, 8, 3, 7, 6, 7, 8, 0, 8, 7], [0, 0, 0, 1, 8, 1, 0, 6, 1, 3, 0, 0, 3, 1, 1], [0, 6, 0, 0, 0, 0, 6, 3, 1, 1, 3, 0, 1, 1, 3], [4, 6, 0, 0, 0, 0, 8, 1, 1, 1, 2, 2, 1, 1, 6]]}, "f0f8a26d": {"instruction": "1. Identify all cells in the input grid that contain a value different from the background color (the background color is the most common color in the grid; in these examples, it is 7).\n2. Ignore the original locations of the non-background color cells. Instead, create a vertical stripe in one column (specifically, the first column containing any non-background color in the original grid, from left to right, top to bottom).\n3. Starting from the topmost row, place the non-background color in each cell of this vertical column consecutively until all such colored cells from the original input have been placed. All other cells in the grid should be set to the background color.\n4. If there is more than one contiguous group of non-background color cells in a row in the input, or several rows contain such groups, map groups into vertical stacked shapes or horizontal/vertical bars as seen in the training examples, preserving their order and relative size.\n5. Make sure that the output grid retains the same shape as the input grid.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [9, 9, 9, 9, 9, 7, 7, 9, 9, 9, 9, 9, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7], [7, 7, 7, 7, 7, 7, 9, 7, 7, 9, 7, 7, 7], [7, 7, 7, 7, 9, 7, 7, 7, 7, 9, 7, 7, 7], [7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7], [9, 9, 9, 7, 9, 7, 7, 7, 9, 7, 7, 7, 7], [7, 7, 7, 7, 9, 7, 7, 7, 9, 7, 9, 9, 9], [7, 7, 7, 7, 9, 7, 7, 7, 9, 7, 7, 7, 7]], "predicted_output": "[[9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 9, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7], [7, 7, 9, 7, 9, 7, 7, 7, 7, 9, 7, 7, 7], [7, 7, 9, 7, 9, 7, 7, 7, 7, 9, 7, 7, 7], [7, 7, 9, 7, 9, 7, 7, 7, 7, 9, 7, 9, 7], [7, 7, 9, 7, 9, 7, 7, 7, 7, 9, 7, 9, 7], [7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 9, 7], [7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 9, 7, 9, 7, 9, 9, 9, 7, 7], [7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7], [7, 9, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7], [7, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 9, 7], [7, 9, 7, 7, 7, 7, 7, 9, 9, 9, 7, 9, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7]]}, "f15e1fac": {"instruction": "1. For each row in the input grid, search for any occurrence of the color '8'.\n2. When a row contains a single '8', identify the position (column index) of the '8'.\n3. In that row and in the two previous rows above it (if they exist), replace a horizontal block of four cells, starting from the position of the '8' and extending leftward, with the color '8'. (If there are not enough cells to the left, only replace up to the position of the '8'.)\n4. Repeat this process for every row in the grid that contains a single '8'.\n5. Leave all other cells (including other colored or zero cells) unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8],\n [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8], [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0]]}, "f18ec8cc": {"instruction": "1. Split the input grid into three equal vertical sections: left, center, and right. The width of each section is determined so that the three sections fill the entire grid, with the leftmost, middle, and rightmost colored regions.\n2. Rearrange the sections in the order: center section first, then rightmost section, then leftmost section last. That is, shift the center columns to the left, the rightmost columns to the middle, and the leftmost columns to the right.\n3. Maintain the row structure and internal cell values within each section as-is when rearranging; only the horizontal order of the block sections changes.", "test_input": [[9, 9, 9, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1], [9, 9, 9, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1], [9, 9, 9, 4, 9, 4, 1, 1, 1, 9, 1, 1, 1], [9, 1, 9, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1], [9, 4, 9, 4, 4, 4, 1, 1, 1, 4, 1, 1, 1], [9, 9, 9, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1], [9, 9, 9, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1], [9, 9, 9, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1]], "predicted_output": "[[4, 4, 4, 1, 1, 1, 1, 1, 1, 9, 9, 9, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 9, 9, 9, 4],\n [4, 9, 4, 1, 1, 1, 9, 1, 1, 9, 9, 9, 4],\n [4, 1, 4, 1, 1, 1, 1, 1, 1, 9, 1, 9, 4],\n [4, 4, 4, 1, 1, 1, 4, 1, 1, 9, 4, 9, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 9, 9, 9, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 9, 9, 9, 4],\n [4, 4, 4, 1, 1, 1, 1, 1, 1, 9, 9, 9, 4]]", "expected_output": [[4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9], [4, 9, 4, 1, 1, 1, 9, 1, 1, 1, 9, 9, 9], [4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 9, 1, 9], [4, 4, 4, 1, 1, 1, 4, 1, 1, 1, 9, 4, 9], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9], [4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9]]}, "f1bcbc2c": {"instruction": "1. Locate the cell containing the number 9. Record its position (row, column).\n2. For each cell in the same column as the 9, starting from the row of the 9 and moving upward, replace any 0 in this column with 8 until reaching a nonzero cell that is not 0 or overlapping the perimeter of a 7-region (stop at 7, do not overwrite it).\n3. For each row from the row of the 9 and moving downward, replace any 0 in this column with 8 until reaching a nonzero cell that is not 0 (stop at 7, do not overwrite it).\n4. For cells in the same row as the 9, replace all 0s from the column of the 9 leftward with 8 until hitting a non-zero value (stop at 7).\n5. For cells in the same row as the 9, replace all 0s from the column of the 9 rightward with 8 until hitting a non-zero value (stop at 7).\n6. From the cell containing the 9, expand diagonally (up-left, up-right, down-left, down-right) filling consecutive 0s with 8, stopping each direction at the first non-0 cell or the edge of a 7 block.\n7. Fill all 0s that are directly adjacent (orthogonally or diagonally) to a previously filled 8, tracing the connected area from the original 9 outward, bounded by 7s (do not cross or overwrite 7s).\n8. The pattern ensures that only the area \u201cenclosed\u201d or leading out from the 9\u2014bounded by the \u201cwalls\u201d of 7s\u2014is filled with 8s, and all other areas remain unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 7, 0, 7], [0, 0, 0, 0, 0, 0, 0, 7, 0, 7], [0, 0, 0, 0, 7, 7, 7, 7, 0, 7], [0, 0, 0, 0, 7, 0, 0, 0, 0, 7], [0, 0, 0, 0, 7, 0, 7, 7, 7, 7], [7, 7, 7, 7, 7, 0, 7, 0, 0, 0], [7, 0, 0, 0, 0, 9, 7, 0, 0, 0], [7, 0, 7, 7, 7, 7, 7, 0, 0, 0], [7, 0, 7, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 7, 0, 7],\n [0, 0, 0, 0, 0, 0, 0, 7, 0, 7],\n [0, 0, 0, 0, 7, 7, 7, 7, 0, 7],\n [0, 0, 0, 0, 7, 0, 0, 0, 0, 7],\n [0, 0, 0, 0, 7, 0, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 0, 7, 0, 0, 0],\n [7, 0, 0, 0, 0, 9, 7, 0, 0, 0],\n [7, 0, 8, 8, 8, 8, 7, 0, 0, 0],\n [7, 0, 8, 8, 8, 8, 7, 0, 0, 0],\n [7, 0, 8, 8, 8, 8, 7, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 7, 8, 7], [0, 0, 0, 0, 0, 0, 0, 7, 8, 7], [0, 0, 0, 0, 7, 7, 7, 7, 8, 7], [0, 0, 0, 0, 7, 8, 8, 8, 8, 7], [0, 0, 0, 0, 7, 8, 7, 7, 7, 7], [7, 7, 7, 7, 7, 8, 7, 0, 0, 0], [7, 0, 0, 0, 0, 9, 7, 0, 0, 0], [7, 0, 7, 7, 7, 7, 7, 0, 0, 0], [7, 0, 7, 0, 0, 0, 0, 0, 0, 0], [7, 0, 7, 0, 0, 0, 0, 0, 0, 0]]}, "f1cefba8": {"instruction": "1. Identify the main rectangular region within the grid bounded by nonzero values (the \"frame\" or \"main object\"). Retain the shape, size, and color of this region.\n2. In the outer frame (the area outside the main object\u2019s border, generally filled with 0s), draw vertical bars at two fixed column positions relative to the object, using the same color as the main object's inner second color. Place these bars symmetrically at the columns where the inner special color (here, 8) appears in the original frame (for the training examples, these are columns where the inner color 8 of the object appears closest to the left and right borders). The length of the bars should be equal to the height of the grid, and they should be one cell wide each.\n3. Within the main object: \n    a. Replace any inner non-main-color (the \"special\" color, here 8) regions that appear in the original with a pattern breaking them into sub-regions based on symmetry, as observed in the output examples. Specifically, if the inner region is a filled rectangle, fill alternate columns and rows within it with the main object's boundary color, creating a cross-hatch-like subpattern that alternates between the special color and the main boundary color, matching the pattern seen in the output examples.\n    b. Preserve the main boundary structure (outermost color) of the object as in the original.\n4. Additionally, if the \"special\" color forms vertical or horizontal lines at the object\u2019s boundaries, extend this color as vertical bars to the top and bottom outer frame, in their corresponding columns.\n5. Leave all areas outside these regions as 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 8, 1, 1, 1, 8, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n [0, 1, 1, 1, 1, 1, 8, 1, 1, 1, 8, 1, 1, 1, 1, 0, 0, 0],\n [0, 1, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 1, 1, 0, 0, 0],\n [0, 1, 1, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 1, 0, 0, 0],\n [0, 1, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 1, 1, 0, 0, 0],\n [0, 1, 1, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 1, 0, 0, 0],\n [0, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 1, 0, 0, 0],\n [0, 1, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 1, 1, 0, 0, 0],\n [0, 1, 1, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 1, 0, 0, 0],\n [0, 1, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 1, 1, 0, 0, 0],\n [0, 1, 1, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 1, 0, 0, 0],\n [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 1, 1, 0, 0, 0], [8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8], [0, 1, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0]]}, "f21745ec": {"instruction": "1. For each nonzero connected block of color (each \"object\"), identify the color and location of the object.\n2. For each such color block that forms a \"solid\" rectangle or filled area in the input, check if the same block in the output grid is instead distributed in a more \"hollow\" or alternating pattern with gaps:\n    - For each such block, if it is a rectangle/filled shape, replace with stripes, stripes with checkerboard, or divides into distinct separated smaller segments, following the patterns observed in previous examples.\n3. For each colored region:\n    a. If it is a solid rectangle in the input, transform it to a bordered or patterned/block-style in the output:\n        - For a rectangle of color, fill interior cells with zero in a checkerboard or alternating fashion (if that is the observed transformation).\n        - For a linear row or column of color, alternately fill or leave gaps according to output style.\n        - If it is already alternating in the input, preserve pattern in output.\n    b. If it is a \"solid\" line (row/column), split or separate into smaller blocks, alternating with gaps as in output.\n    c. If it is a hollow rectangle in output, remove the interior pixels accordingly.\n4. For each group of rows with horizontal or vertical symmetry, check for symmetry in filling (mirroring) in the output and update as needed to match output transformation logic.\n5. For each block or group in the input that does not appear in the output (i.e., some objects disappear in output), remove those blocks entirely.\n6. For each block that shifts or changes shape (but not size), make the minimal transformation necessary to preserve the color blocks' relative position and connectivity structure, following the pattern seen in the outputs.\n7. Preserve any zero (background) areas unless replaced as part of a colored block transformation.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 7, 0, 7, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 7, 7, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 0], [0, 7, 0, 7, 7, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 6, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 6, 6, 6, 6, 6, 6, 0], [0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0],\n [0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8],\n [0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8],\n [0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8],\n [0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8],\n [0, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0],\n [0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\n [0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 6, 0, 6, 0, 6, 0, 6],\n [0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 6, 0, 6, 0, 6, 0],\n [0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 6, 0, 6, 0, 6, 0, 6],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 6, 0, 6, 0],\n [0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 6, 0, 6, 0, 6, 0, 6],\n [0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 5, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 7, 0, 7, 7, 0, 0, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 7, 7, 0, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 0, 7, 7, 7, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "f25fbde4": {"instruction": "1. Identify all nonzero (color) cells in the input grid; these define the shape(s) to be processed.\n2. Find the minimal bounding box that contains all nonzero cells (the smallest rectangle that encloses all colored cells).\n3. For each nonzero cell in the bounding box, copy its color and relative position.\n4. Double the size of the bounding box along both dimensions by scaling each cell horizontally and vertically by a factor of 2 (i.e., each colored cell in the original bounding box becomes a 2x2 block of the same color in the output grid).\n5. Place the scaled-up bounding box in a new grid, keeping it left- and top-aligned to the output canvas.\n6. Continue copying and scaling all distinct clusters or regions if there are multiple separated colored shapes, preserving their spatial arrangement and producing an output grid large enough to fit all scaled bounding boxes.\n7. Fill all other cells of the output grid with 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 4, 0, 0], [0, 0, 0, 4, 0, 4, 0, 4, 0], [0, 0, 0, 0, 4, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0],\n [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0],\n [0, 0, 8, 8, 0, 0, 8, 8, 0, 8, 8],\n [0, 0, 8, 8, 0, 0, 8, 8, 0, 8, 8],\n [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0],\n [0, 0, 0, 0, 8, 8, 0, 8, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 4, 4, 0, 0, 4, 4, 0, 0], [0, 0, 4, 4, 0, 0, 4, 4, 0, 0], [4, 4, 0, 0, 4, 4, 0, 0, 4, 4], [4, 4, 0, 0, 4, 4, 0, 0, 4, 4], [0, 0, 4, 4, 0, 0, 4, 4, 0, 0], [0, 0, 4, 4, 0, 0, 4, 4, 0, 0]]}, "f25ffba3": {"instruction": "1. Identify the longest consecutive vertical block of nonzero rows at the bottom of the grid; this is the \"core\" block.  \n2. Extract this core block, and place a copy of it at the top of the grid, preserving its order.  \n3. Insert a reversed copy of the core block starting at the location immediately below the newly placed copy.  \n4. Fill the rest of the grid below the first two copies of the core block with rows of zeros except for any nonzero values which match in position to the rightmost column(s) of the core block, maintaining those values down the columns (i.e., extend the rightmost nonzero verticals down as needed).  \n5. Ensure the total number of rows matches the original grid by filling remaining empty rows with the appropriate rows of zeros (with extended verticals if necessary).", "test_input": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0], [7, 1, 0, 0], [7, 1, 3, 0], [7, 1, 3, 3], [7, 1, 4, 4]], "predicted_output": "[[7, 1, 4, 4],\n [7, 1, 3, 3],\n [7, 1, 3, 0],\n [7, 1, 0, 0],\n [0, 1, 0, 0],\n [0, 1, 0, 0],\n [0, 0, 0, 4],\n [0, 0, 0, 4],\n [0, 0, 0, 4],\n [0, 0, 0, 4]]", "expected_output": [[7, 1, 4, 4], [7, 1, 3, 3], [7, 1, 3, 0], [7, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [7, 1, 0, 0], [7, 1, 3, 0], [7, 1, 3, 3], [7, 1, 4, 4]]}, "f2829549": {"instruction": "1. For each row in the input grid, extract the three columns immediately to the right of the column containing the number 1. (The column with 1 acts as a delimiter: select the next three columns after it.)\n2. In the extracted 3-column window for each row, replace every 5 with 3; set all non-5 elements to 0.\n3. The collection of these transformed 3-column windows, one per row, forms the output grid; preserve row order.", "test_input": [[0, 0, 0, 1, 0, 5, 0], [7, 7, 7, 1, 5, 5, 0], [0, 0, 0, 1, 5, 0, 0], [7, 0, 0, 1, 5, 5, 5]], "predicted_output": "[[0, 3, 0],\n [3, 3, 0],\n [3, 0, 0],\n [3, 3, 3]]", "expected_output": [[3, 0, 3], [0, 0, 0], [0, 3, 3], [0, 0, 0]]}, "f28a3cbb": {"instruction": "1. For the upper-left colored region (the largest contiguous block of a unique color different from the background, typically in the top-left, e.g., 3 in this case), expand the region rightwards and/or downwards to form a solid rectangle. Fill all cells in the minimal bounding rectangle (from its top-leftmost 3 to the right/bottommost 3 adjacent cells) with that color, overwriting other colors or the background within this rectangle.\n2. For the lower-right colored region (the largest contiguous block of a unique color in the bottom-right, e.g., 8 in this case), expand the region leftwards and/or upwards to form a solid rectangle. Fill all cells in the minimal bounding rectangle (from its bottom-rightmost 8 to the left/topmost 8 adjacent cells) with that color, overwriting other colors or the background within this rectangle.\n3. Set all cells outside these two main colored rectangles to the background color (e.g., 6 in this case).", "test_input": [[3, 3, 3, 6, 6, 6, 3, 6, 6], [3, 3, 3, 6, 3, 6, 6, 6, 6], [3, 3, 3, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 8, 8, 8], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 3, 6, 6, 8, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 8, 8, 8], [6, 8, 6, 6, 6, 6, 8, 8, 8], [6, 6, 6, 8, 6, 6, 8, 8, 8]], "predicted_output": "[[3, 3, 3, 3, 6, 6, 6, 6, 6],\n [3, 3, 3, 3, 6, 6, 6, 6, 6],\n [3, 3, 3, 3, 6, 6, 6, 6, 6],\n [3, 3, 3, 3, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 8, 8],\n [6, 6, 6, 6, 6, 6, 8, 8, 8],\n [6, 6, 6, 6, 6, 6, 8, 8, 8],\n [6, 6, 6, 6, 6, 6, 8, 8, 8],\n [6, 6, 6, 6, 6, 6, 8, 8, 8]]", "expected_output": [[3, 3, 3, 3, 6, 6, 6, 6, 6], [3, 3, 3, 3, 6, 6, 6, 6, 6], [3, 3, 3, 6, 6, 6, 6, 6, 6], [6, 3, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 8, 8, 8], [6, 6, 6, 6, 6, 8, 8, 8, 8], [6, 6, 6, 6, 6, 8, 8, 8, 8], [6, 6, 6, 6, 6, 8, 8, 8, 8]]}, "f341894c": {"instruction": "1. For each row, scan from left to right and look for adjacent pairs of cells with values 6 and 1 (in that order: 6 first, then 1).\n2. Whenever you find a pair (6, 1) in columns (c, c+1), swap the values of these two cells so that 1 is moved to column c and 6 to column c+1.\n3. Leave all other cell values unchanged.", "test_input": [[8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 7, 8, 8, 7, 8, 8, 8, 8], [7, 8, 6, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 1, 8, 7], [7, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 7], [8, 8, 8, 8, 8, 8, 8, 8, 6, 1, 8, 8, 8, 8, 8, 8, 8, 7], [7, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 6, 1, 8, 8, 8, 8, 8, 8, 8, 7], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 1, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 8, 8], [7, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 6, 6, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8], [7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 7, 8, 8, 7, 8, 8, 8, 8],\n [7, 8, 6, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 7],\n [7, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 7],\n [8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 7],\n [7, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 7],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 8, 8],\n [7, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 6, 6, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8],\n [7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 7, 8, 8, 7, 8, 8, 8, 8], [7, 8, 6, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 7], [7, 8, 8, 8, 6, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 7], [8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 7], [7, 8, 8, 8, 8, 8, 8, 8, 6, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 1, 6, 8, 8, 8, 8, 8, 8, 8, 7], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 8, 8], [7, 8, 8, 6, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 6, 6, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8], [7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8]]}, "f76d97a5": {"instruction": "1. Identify the unique color that forms a line, shape, or pattern distinctly different from the background and removal color (in the examples above, it's 5 in the first case, 5 in the second, and 5 in the third input). Treat this as the \"feature\" color.\n2. For each cell in the input grid:\n    a. If the cell contains the \"feature\" color, replace it with the numerically largest color present in the input grid (commonly used as a background; in the first two examples, it's 6; in the third, it's 9; for your test, it's 5).\n    b. If the cell does not contain the \"feature\" color, set it to 0.\n3. Keep all other grid positions unchanged if they already match the desired output (i.e., zero or the required background).", "test_input": [[3, 3, 3, 5, 3], [3, 5, 3, 3, 3], [3, 5, 5, 3, 5], [3, 3, 3, 5, 3], [5, 5, 5, 3, 3]], "predicted_output": "[[0, 0, 0, 5, 0],\n [0, 5, 0, 0, 0],\n [0, 5, 5, 0, 5],\n [0, 0, 0, 5, 0],\n [5, 5, 5, 0, 0]]", "expected_output": [[0, 0, 0, 3, 0], [0, 3, 0, 0, 0], [0, 3, 3, 0, 3], [0, 0, 0, 3, 0], [3, 3, 3, 0, 0]]}, "f823c43c": {"instruction": "1. For each row in the input grid, check if the row index is even (using 0-based indexing). If the row index is even, set every value in that row to 3.\n2. For each row with an odd index, iterate through its cells:\n    a. If the column index is even, set that cell to 3.\n    b. If the column index is odd, keep the value from the input (it will be a 1 or the alternating color in the pattern).", "test_input": [[3, 6, 3, 3, 3, 3, 3, 3, 6, 6, 3, 3, 3, 3, 3, 3], [3, 1, 1, 3, 6, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [6, 1, 1, 3, 6, 1, 3, 1, 1, 3, 1, 6, 3, 1, 6, 3], [6, 6, 3, 3, 6, 6, 6, 3, 6, 3, 3, 3, 6, 3, 6, 3], [3, 1, 1, 6, 1, 1, 3, 1, 1, 3, 1, 1, 3, 6, 1, 6], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 6, 1, 3, 1, 1, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 6, 1, 6, 1, 1, 3], [3, 1, 6, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 6], [6, 6, 1, 3, 6, 6, 3, 6, 1, 3, 6, 6, 3, 1, 1, 6], [6, 1, 1, 3, 6, 6, 3, 6, 1, 3, 1, 6, 3, 6, 1, 6], [3, 3, 6, 3, 6, 3, 6, 3, 3, 3, 6, 3, 3, 3, 3, 6], [3, 1, 1, 3, 1, 6, 3, 1, 6, 3, 6, 1, 3, 1, 1, 6], [6, 6, 1, 6, 1, 1, 3, 6, 1, 3, 6, 6, 3, 6, 1, 6], [3, 3, 3, 3, 3, 6, 3, 3, 3, 6, 3, 6, 6, 3, 3, 3]], "predicted_output": "[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 1, 3, 3, 3, 1, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 6, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 1, 3, 3, 3, 1, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 1, 3, 3, 3, 1, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 1, 3, 3, 3, 6, 3, 6, 3, 3, 3, 6, 3, 1, 3, 3],\n [3, 1, 3, 3, 3, 6, 3, 6, 3, 3, 3, 6, 3, 6, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 1, 3, 3, 3, 6, 3, 1, 3, 3, 3, 1, 3, 1, 3, 3],\n [3, 6, 3, 6, 3, 1, 3, 6, 3, 3, 3, 6, 3, 6, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]", "expected_output": [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]}, "f83cb3f6": {"instruction": "1. Identify all horizontal lines in the grid that are filled with a repeated nonzero value (other than 0), such as 8, across contiguous cells \u2014 these lines act as \"reference lines.\"\n2. Retain in the output the row(s) with the reference line(s) (the row(s) containing all 8s or similar).\n3. For each row above the reference line, check if it contains a nonzero value (other than the reference value, i.e., other than 8) in any cell.\n   a. If a row above the reference line contains at least one such value, retain only those values in their original positions, and set all other values in that row to zero.\n   b. If a row does not contain any such value, replace the entire row with zeros.\n4. For each row below the reference line, check if it contains a nonzero value (other than the reference value) in any cell.\n   a. If a row below the reference line contains at least one such value, retain only those values in their original positions, and set all other values in that row to zero.\n   b. If a row does not contain any such value, replace the entire row with zeros.\n5. For all other cells, except those in reference row(s) and except the retained nonzero values, set the value to zero.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3], [3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 3, 0, 0, 0, 0, 3]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3],\n [3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 8, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 8, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 3, 0, 0, 0, 0, 0, 0]]}, "f8a8fe49": {"instruction": "1. Identify all nonzero regions in the grid. These regions consist of colored lines or blocks (such as lines of \u20182\u2019 or \u20185\u2019).\n2. For each nonzero region, determine if it is fully surrounded by zeros except on its border (i.e., it is not touching the grid edge).\n3. For any region of color \u20185\u2019 (i.e., any contiguous group of \u20185\u2019s), move the region to the closest edge of the grid, such that its leftmost filled cell aligns with the left or rightmost available zero, and its topmost cell aligns with the top or bottommost available zero. Prioritize:\n   - If the original region is closer to the top, move it to the top edge.\n   - If it is closer to the bottom, move it to the bottom edge.\n   - If in a horizontal slice, and not in the upper-/lowermost, center it as close as possible to the top or bottom, matching the pattern of previous examples.\n4. Keep regions of color \u20182\u2019 (such as border rectangles of \u20182\u2019s) in their original positions.\n5. Set all cells formerly occupied by a moved region to zero.\n6. Leave isolated regions of zeros unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "f8b3ba0a": {"instruction": "1. Identify all rows in the input grid that contain colored blocks (nonzero values) that are not all background (0). Ignore rows that consist solely of zeros.  \n2. For each such row, examine each contiguous group of colored blocks separated by zeros.  \n3. For each row, locate the unique color pair (the nonzero values that appear together in that row in contiguous columns, often in a \"block\" of 2x1 or more). There may be multiple distinct color pairs in a single row, but each color pair consists of two identical numbers side by side (e.g., [2, 2], [4, 4], [1, 1], [8, 8], etc.).  \n4. For each row, select the color of the middle block (the pair of numbers in the middle group of colored blocks, based on column position; if there are an odd number of color groups, select the middle one; if even, select the middle of the two center ones).  \n5. Collect the selected colors from each group of colored block rows.  \n6. Assemble these selected color numbers into a vertical column vector, preserving their order as they appeared from top to bottom in the input grid, skipping rows made entirely of zeros.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 4, 4, 0, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 2, 2, 0, 4, 4, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 2, 2, 0, 2, 2, 0, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0, 1, 1, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 1, 1, 0, 2, 2, 0, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 2, 2, 0, 4, 4, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[4],\n [2],\n [2],\n [2],\n [2],\n [1],\n [2]]", "expected_output": [[4], [1], [8]]}, "f8be4b64": {"instruction": "1. Identify all non-empty patterns in the grid that are symmetric \"cross-like\" structures, each defined by a central nonzero cell (the \"center\") with four 'spoke' arms made of the same number/color, and where one unique cell at the center is different (i.e., 'special' value), or the cross is pure (all the same value).\n2. For each detected cross, perform the following transformations:\n    a. Replace the entire row of the cross\u2019s center cell with the value found at the rightmost end of the cross (if a special value is present there), starting from the leftmost cell of the row up to the grid\u2019s width.\n    b. If the cross is \u201canchored\u201d by a special value in the middle, fill all cells in the column of the cross\u2019s center cell with that value, overwriting previous values in the column.\n    c. For all columns to the left and right of the cross center, if an arm segment intersects with them, fill those regions with their respective arm\u2019s value.\n3. For cross structures that contain multiple unique values (for example, other numbers at the spokes or corners), update the positions just like above, with horizontal and vertical fills for each corresponding segment without altering intersection cells.\n4. All grid regions not touched by the cross patterns remain as zero.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3, 8, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 4, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [0, 0, 3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 3, 8, 3, 8, 3, 8, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 8, 3, 8, 3, 8, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 8, 3, 8, 3, 8, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 8, 3, 8, 3, 8, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 3, 4, 3, 4, 3, 4, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 3, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 3, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [8, 8, 8, 2, 8, 3, 8, 3, 0, 8, 8, 8, 8, 3, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 3, 4, 0, 4, 4, 4, 3, 4, 3, 4, 4, 4, 4], [0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 3, 0, 3, 0, 0, 0, 4, 1, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 0, 3, 0, 0, 0, 0, 4, 3, 0, 0, 0, 0], [1, 1, 1, 2, 1, 1, 8, 1, 0, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1], [0, 0, 0, 3, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0], [2, 2, 3, 2, 3, 2, 8, 2, 0, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2], [0, 0, 0, 3, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]}, "f8c80d96": {"instruction": "1. For every cell in the grid, if the cell value is 0, replace it with 5.\n2. Leave all nonzero (colored) cells unchanged.", "test_input": [[4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [4, 4, 4, 0, 0, 4, 0, 0, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 0, 0], [0, 0, 4, 0, 0, 4, 0, 0, 0, 0], [4, 4, 4, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 0, 0, 0, 0]], "predicted_output": "[[4, 4, 4, 4, 4, 4, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 4, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 4, 5, 5, 5, 5],\n [4, 4, 4, 5, 5, 4, 5, 5, 5, 5],\n [5, 5, 4, 5, 5, 4, 5, 5, 5, 5],\n [5, 5, 4, 5, 5, 4, 5, 5, 5, 5],\n [4, 4, 4, 5, 5, 4, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 4, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 4, 5, 5, 5, 5],\n [4, 4, 4, 4, 4, 4, 5, 5, 5, 5]]", "expected_output": [[4, 4, 4, 4, 4, 4, 5, 5, 4, 5], [5, 5, 5, 5, 5, 4, 5, 5, 4, 5], [5, 5, 5, 5, 5, 4, 5, 5, 4, 5], [4, 4, 4, 5, 5, 4, 5, 5, 4, 5], [5, 5, 4, 5, 5, 4, 5, 5, 4, 5], [5, 5, 4, 5, 5, 4, 5, 5, 4, 5], [4, 4, 4, 5, 5, 4, 5, 5, 4, 5], [5, 5, 5, 5, 5, 4, 5, 5, 4, 5], [5, 5, 5, 5, 5, 4, 5, 5, 4, 5], [4, 4, 4, 4, 4, 4, 5, 5, 4, 5]]}, "f8cc533f": {"instruction": "1. For each row in the input grid, look for horizontal segments consisting of the same non-background color, surrounded by background color (background can be inferred as the most common color, here 4).\n2. If you find a horizontal segment of identical non-background color cells that is longer than 1 cell, and it is bordered on both left and right sides by background color (or grid edge), expand the segment by 1 cell on each side, replacing the bordering background cells with the segment color, as long as they are still within the bounds of the grid.\n3. For each column in the input grid, look for vertical segments consisting of the same non-background color, surrounded by background color.\n4. If you find a vertical segment of identical non-background color cells longer than 1 cell, and it is bordered on both top and bottom by background color (or edge), expand the segment by 1 cell on each end, replacing the bordering background cells with the segment color, as long as they are still within bounds.\n5. Do not overwrite any existing non-background, non-segment-color cells\u2014only change background color cells adjacent to the segment.\n6. Leave all other cells unchanged.", "test_input": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 4, 2, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 3, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 3, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4], [4, 1, 4, 4, 1, 1, 4, 4, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4], [4, 1, 4, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 4, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 2, 2, 4, 2, 4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 2, 2, 2, 4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 3, 3, 3, 3, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 4, 4, 4, 3, 3, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 3, 3, 4, 4],\n [4, 1, 1, 4, 1, 1, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4],\n [4, 1, 1, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 1, 1, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 4, 2, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 4, 2, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 3, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 3, 4, 4, 4], [4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4], [4, 1, 4, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 4, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]}, "f8f52ecc": {"instruction": "1. For each unique color (excluding the background color, which in these examples is 1), identify the columns that contain at least one cell of that color.\n2. For each identified color, fill every cell in each of its columns (from the top row down to the bottom row) with that color, starting from and including the row of the leftmost occurrence down to the row of the rightmost occurrence of that color in the grid.\n3. For overlapping regions, where two colors would fill the same cell, priority is given to the order in which the colors appear as you process them (generally top-to-bottom, then left-to-right, as observed in the outputs).\n4. All cells not affected by these transformations remain as in the input.", "test_input": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 1, 2, 1, 1, 1, 4, 1], [1, 1, 1, 1, 1, 8, 1, 1, 1, 1], [1, 1, 1, 1, 2, 1, 2, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 8, 8], [1, 1, 5, 1, 5, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 7, 1], [1, 3, 1, 1, 1, 1, 1, 1, 1, 1]], "predicted_output": "[[1, 1, 1, 1, 2, 1, 1, 1, 4, 1],\n [1, 2, 1, 1, 2, 8, 1, 1, 4, 1],\n [1, 2, 1, 1, 2, 8, 2, 1, 4, 1],\n [1, 2, 1, 1, 2, 8, 2, 1, 4, 1],\n [0, 2, 5, 1, 2, 8, 2, 1, 8, 8],\n [1, 2, 5, 1, 5, 8, 2, 1, 8, 8],\n [1, 2, 5, 1, 5, 8, 2, 1, 7, 8],\n [1, 3, 5, 1, 5, 8, 2, 1, 7, 8]]", "expected_output": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 1, 1, 1, 4, 1], [1, 1, 1, 1, 2, 8, 1, 1, 1, 1], [1, 1, 1, 1, 2, 2, 2, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 8, 8], [1, 1, 5, 5, 5, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 7, 1], [1, 3, 1, 1, 1, 1, 1, 1, 1, 1]]}, "f8ff0b80": {"instruction": "1. Identify all distinct nonzero connected components (clusters) in the input grid. A connected component is a group of horizontally or vertically adjacent (not diagonally) cells with the same nonzero value.\n2. For each connected component, note the unique value (color) of its cells.\n3. List the unique values from step 2, in the order the topmost row of each component appears in the grid, from top to bottom. If two components' topmost rows are the same, order them by the leftmost column of appearance.\n4. Construct an output grid with a single column, where each row contains one of the values from the list in step 3, in order.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 6, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0]], "predicted_output": "[[3],\n [1],\n [6]]", "expected_output": [[6], [1], [3]]}, "f9012d9b": {"instruction": "1. Identify the largest contiguous bottom-right block in the input grid that does not contain any zeros.  \n2. Extract this block, preserving its arrangement and values.  \n3. Output this extracted block as the new grid.", "test_input": [[8, 1, 8, 8, 0, 0, 0], [1, 8, 8, 1, 0, 0, 0], [8, 8, 1, 8, 0, 0, 0], [8, 1, 8, 8, 1, 8, 8], [1, 8, 8, 1, 8, 8, 1], [8, 8, 1, 8, 8, 1, 8], [8, 1, 8, 8, 1, 8, 8]], "predicted_output": "[[8, 8, 1, 8],\n [8, 1, 8, 8],\n [1, 8, 8, 1],\n [8, 8, 1, 8]]", "expected_output": [[1, 8, 8], [8, 8, 1], [8, 1, 8]]}, "f9a67cb5": {"instruction": "1. Locate all cells in the input grid containing the value 2. For each such cell, perform the following:\n    a. For every row and column containing a '2' cell, identify all contiguous zero (0) cells in that row and/or column that are unblocked by 8s (i.e., uninterrupted stretches of zeros between 8s or grid boundaries).\n    b. In each such contiguous stretch, replace each 0 with a 2, except for those zeros that already intersect with a '2' cell, which remain as 2.\n2. Additionally, fill in the following \"frames\" of 2s as appropriate for the grid's structure:\n    a. For each horizontal or vertical series of 8s that is separated by zeros from other groups of 8s or the grid edges, surround the zero region immediately before and after the 8s group with 2s, matching the horizontal or vertical grouping as needed per the exemplars.\n3. Ensure that cells originally containing values other than 0 (i.e., 8 or 2) remain unchanged unless specified above.", "test_input": [[0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 0, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 0, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 8, 8, 0, 8, 8, 8, 0, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8],\n [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0],\n [8, 8, 2, 8, 8, 8, 8, 2, 8, 0, 8, 8, 8, 8],\n [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 2, 8, 8, 2, 8, 8, 8, 2, 8, 8],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], [8, 8, 2, 8, 8, 8, 8, 2, 8, 8, 8, 0, 8, 8], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [8, 8, 2, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8], [0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0], [8, 8, 8, 8, 2, 8, 8, 2, 8, 8, 8, 2, 8, 8], [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0]]}, "f9d67f8b": {"instruction": "1. Locate the largest rectangular block(s) of contiguous '9's in the input grid (these blocks span the center area, always aligned in both rows and columns, and surrounded by non-'9' values).\n2. For each row and each column, identify the region covered by these '9' blocks in both the vertical and horizontal axes.\n3. Delete (remove) the columns and rows corresponding to the entire span of the '9' block from the input grid. All cells in those rows and columns should be removed, causing the non-'9' surrounding regions to \"collapse\" toward the center.\n4. After removal, concatenate the four (possibly rectangular) corner subgrids in their relative input positions to re-form a full grid, omitting the region where the '9's and the columns/rows they occupied used to be.", "test_input": [[4, 8, 8, 8, 5, 7, 4, 1, 7, 5, 1, 6, 9, 9, 9, 9, 9, 9, 9, 3, 6, 1, 5, 7, 1, 4, 7, 5, 8, 8], [4, 4, 8, 8, 7, 5, 1, 4, 7, 7, 6, 1, 9, 9, 9, 9, 9, 9, 9, 4, 1, 6, 7, 7, 4, 1, 5, 7, 8, 8], [8, 8, 4, 8, 4, 1, 5, 7, 8, 6, 7, 5, 9, 9, 9, 9, 9, 9, 9, 4, 5, 7, 6, 8, 7, 5, 1, 4, 8, 4], [8, 6, 4, 4, 1, 4, 7, 5, 6, 8, 7, 7, 9, 9, 9, 9, 9, 9, 9, 6, 7, 7, 8, 6, 5, 7, 4, 1, 4, 4], [8, 5, 5, 3, 4, 8, 8, 8, 3, 4, 4, 6, 9, 9, 9, 9, 9, 9, 9, 8, 6, 4, 4, 3, 8, 8, 8, 4, 3, 5], [5, 8, 3, 5, 4, 4, 8, 8, 4, 3, 6, 2, 9, 9, 9, 9, 9, 9, 9, 2, 2, 6, 3, 4, 8, 8, 4, 4, 5, 3], [5, 3, 8, 5, 6, 8, 4, 8, 4, 6, 1, 1, 9, 9, 9, 9, 9, 9, 9, 3, 1, 1, 6, 4, 8, 4, 8, 6, 5, 8], [3, 5, 5, 8, 8, 8, 4, 4, 6, 2, 8, 1, 9, 9, 9, 9, 9, 9, 9, 5, 1, 8, 2, 6, 4, 4, 8, 8, 8, 5], [7, 7, 8, 6, 3, 4, 4, 6, 3, 2, 2, 3, 8, 8, 6, 3, 3, 6, 8, 8, 3, 2, 2, 3, 6, 4, 4, 3, 6, 8], [5, 7, 6, 8, 4, 3, 6, 2, 2, 3, 3, 1, 8, 8, 3, 6, 6, 3, 8, 8, 1, 3, 3, 2, 2, 6, 3, 4, 8, 6], [1, 6, 7, 7, 4, 6, 1, 8, 4, 2, 3, 2, 6, 3, 8, 8, 8, 8, 3, 6, 2, 3, 2, 4, 8, 1, 6, 4, 7, 7], [6, 1, 5, 7, 6, 2, 1, 1, 2, 4, 9, 9, 9, 6, 8, 8, 8, 8, 6, 3, 3, 2, 4, 2, 1, 1, 2, 6, 7, 5], [3, 4, 4, 6, 8, 2, 3, 5, 4, 8, 9, 9, 9, 2, 1, 3, 3, 1, 2, 3, 7, 8, 8, 4, 5, 3, 2, 8, 6, 4], [4, 3, 6, 2, 6, 8, 5, 3, 8, 4, 9, 9, 9, 3, 3, 2, 2, 3, 3, 2, 8, 7, 4, 8, 3, 5, 8, 6, 2, 6], [4, 6, 1, 1, 8, 4, 8, 2, 8, 7, 4, 8, 4, 2, 3, 2, 2, 3, 2, 4, 8, 4, 7, 8, 2, 8, 4, 8, 1, 1], [6, 2, 8, 1, 4, 8, 6, 8, 7, 8, 8, 4, 2, 4, 2, 3, 3, 2, 4, 2, 4, 8, 8, 7, 8, 6, 8, 4, 1, 8], [6, 2, 8, 1, 4, 8, 6, 8, 7, 8, 8, 4, 2, 4, 2, 3, 3, 2, 4, 2, 4, 8, 8, 7, 9, 9, 9, 9, 9, 9], [4, 6, 1, 1, 8, 4, 8, 2, 8, 7, 4, 8, 4, 2, 3, 2, 2, 3, 2, 4, 8, 4, 7, 8, 9, 9, 9, 9, 9, 9], [4, 3, 6, 2, 6, 8, 5, 3, 8, 4, 7, 8, 2, 3, 3, 2, 2, 3, 3, 2, 8, 7, 4, 8, 9, 9, 9, 9, 9, 9], [3, 4, 4, 6, 8, 2, 3, 5, 4, 8, 8, 7, 3, 2, 1, 3, 3, 1, 2, 3, 7, 8, 8, 4, 9, 9, 9, 9, 9, 9], [6, 1, 5, 7, 6, 2, 1, 1, 2, 4, 2, 3, 3, 6, 8, 8, 8, 8, 6, 3, 3, 2, 4, 2, 9, 9, 9, 9, 9, 9], [1, 6, 7, 7, 4, 6, 1, 8, 4, 2, 3, 2, 6, 3, 8, 8, 8, 8, 3, 6, 2, 3, 2, 4, 9, 9, 9, 9, 9, 9], [5, 7, 6, 8, 4, 3, 6, 2, 2, 3, 3, 1, 8, 8, 3, 6, 6, 3, 8, 8, 1, 3, 3, 2, 9, 9, 9, 9, 9, 9], [7, 7, 8, 6, 3, 4, 4, 6, 3, 2, 2, 3, 8, 8, 6, 3, 3, 6, 8, 8, 3, 2, 2, 3, 6, 4, 4, 3, 6, 8], [3, 5, 5, 8, 8, 8, 4, 4, 6, 2, 8, 1, 5, 3, 2, 8, 8, 2, 3, 5, 1, 8, 2, 6, 4, 4, 8, 8, 8, 5], [5, 3, 8, 5, 6, 8, 4, 8, 4, 6, 1, 1, 3, 5, 8, 6, 6, 8, 5, 3, 1, 1, 6, 4, 8, 4, 8, 6, 5, 8], [5, 8, 3, 5, 4, 4, 8, 8, 4, 3, 6, 2, 2, 8, 4, 8, 8, 4, 8, 2, 2, 6, 3, 4, 8, 8, 4, 4, 5, 3], [8, 5, 5, 3, 4, 8, 8, 8, 3, 4, 4, 6, 8, 6, 8, 4, 4, 8, 6, 8, 6, 4, 4, 3, 8, 8, 8, 4, 3, 5], [8, 6, 4, 4, 1, 4, 7, 5, 6, 8, 7, 7, 6, 2, 1, 1, 1, 1, 2, 6, 7, 7, 8, 6, 5, 7, 4, 1, 4, 4], [8, 8, 4, 8, 4, 1, 5, 7, 8, 6, 7, 5, 4, 6, 1, 8, 8, 1, 6, 4, 5, 7, 6, 8, 7, 5, 1, 4, 8, 4]], "predicted_output": "[[4, 8, 8, 8, 5, 7, 4, 1, 7, 5, 1, 6, 3, 6, 1, 5, 7, 1, 4, 7, 5, 8, 8],\n [4, 4, 8, 8, 7, 5, 1, 4, 7, 7, 6, 1, 4, 1, 6, 7, 7, 4, 1, 5, 7, 8, 8],\n [8, 8, 4, 8, 4, 1, 5, 7, 8, 6, 7, 5, 4, 5, 7, 6, 8, 7, 5, 1, 4, 8, 4],\n [8, 6, 4, 4, 1, 4, 7, 5, 6, 8, 7, 7, 6, 7, 7, 8, 6, 5, 7, 4, 1, 4, 4],\n [8, 5, 5, 3, 4, 8, 8, 8, 3, 4, 4, 6, 8, 6, 4, 4, 3, 8, 8, 8, 4, 3, 5],\n [5, 8, 3, 5, 4, 4, 8, 8, 4, 3, 6, 2, 2, 6, 3, 4, 8, 8, 4, 4, 5, 3],\n [5, 3, 8, 5, 6, 8, 4, 8, 4, 6, 1, 1, 3, 1, 1, 6, 4, 8, 4, 8, 6, 5, 8],\n [3, 5, 5, 8, 8, 8, 4, 4, 6, 2, 8, 1, 5, 1, 8, 2, 6, 4, 4, 8, 8, 8, 5],\n [7, 7, 8, 6, 3, 4, 4, 6, 3, 2, 2, 3, 6, 3, 2, 2, 3, 6, 4, 4, 3, 6, 8],\n [5, 7, 6, 8, 4, 3, 6, 2, 2, 3, 3, 1, 8, 1, 3, 3, 2, 2, 6, 3, 4, 8, 6],\n [1, 6, 7, 7, 4, 6, 1, 8, 4, 2, 3, 2, 8, 2, 3, 2, 4, 8, 1, 6, 4, 7, 7],\n [6, 1, 5, 7, 6, 2, 1, 1, 2, 4, 2, 3, 3, 3, 2, 4, 2, 1, 1, 2, 6, 7, 5],\n [3, 4, 4, 6, 8, 2, 3, 5, 4, 8, 8, 4, 5, 3, 2, 8, 6, 4],\n [4, 3, 6, 2, 6, 8, 5, 3, 8, 4, 7, 8, 3, 5, 8, 6, 2, 6],\n [4, 6, 1, 1, 8, 4, 8, 2, 8, 7, 4, 8, 2, 8, 4, 8, 1, 1],\n [6, 2, 8, 1, 4, 8, 6, 8, 7, 8, 8, 4, 4, 8, 8, 7, 8, 6, 8, 4, 1, 8],\n [6, 2, 8, 1, 4, 8, 6, 8, 7, 8, 8, 4, 4, 8, 8, 7, 8, 6, 8, 4, 1, 8],\n [4, 6, 1, 1, 8, 4, 8, 2, 8, 7, 4, 8, 2, 8, 4, 8, 1, 1],\n [4, 3, 6, 2, 6, 8, 5, 3, 8, 4, 7, 8, 3, 5, 8, 6, 2, 6],\n [3, 4, 4, 6, 8, 2, 3, 5, 4, 8, 8, 4, 5, 3, 2, 8, 6, 4],\n [5, 8, 3, 5, 4, 4, 8, 8, 4, 3, 6, 2, 2, 8, 4, 8, 8, 4, 4, 5, 3],\n [8, 5, 5, 3, 4, 8, 8, 8, 3, 4, 4, 6, 8, 6, 8, 4, 4, 8, 6, 8, 6, 4, 4, 3, 8, 8, 8, 4, 3, 5],\n [8, 6, 4, 4, 1, 4, 7, 5, 6, 8, 7, 7, 6, 2, 1, 1, 1, 1, 2, 6, 7, 7, 8, 6, 5, 7, 4, 1, 4, 4],\n [8, 8, 4, 8, 4, 1, 5, 7, 8, 6, 7, 5, 4, 6, 1, 8, 8, 1, 6, 4, 5, 7, 6, 8, 7, 5, 1, 4, 8, 4]]", "expected_output": [[4, 8, 8, 8, 5, 7, 4, 1, 7, 5, 1, 6, 3, 4, 4, 6, 6, 4, 4, 3, 6, 1, 5, 7, 1, 4, 7, 5, 8, 8], [4, 4, 8, 8, 7, 5, 1, 4, 7, 7, 6, 1, 4, 3, 6, 2, 2, 6, 3, 4, 1, 6, 7, 7, 4, 1, 5, 7, 8, 8], [8, 8, 4, 8, 4, 1, 5, 7, 8, 6, 7, 5, 4, 6, 1, 8, 8, 1, 6, 4, 5, 7, 6, 8, 7, 5, 1, 4, 8, 4], [8, 6, 4, 4, 1, 4, 7, 5, 6, 8, 7, 7, 6, 2, 1, 1, 1, 1, 2, 6, 7, 7, 8, 6, 5, 7, 4, 1, 4, 4], [8, 5, 5, 3, 4, 8, 8, 8, 3, 4, 4, 6, 8, 6, 8, 4, 4, 8, 6, 8, 6, 4, 4, 3, 8, 8, 8, 4, 3, 5], [5, 8, 3, 5, 4, 4, 8, 8, 4, 3, 6, 2, 2, 8, 4, 8, 8, 4, 8, 2, 2, 6, 3, 4, 8, 8, 4, 4, 5, 3], [5, 3, 8, 5, 6, 8, 4, 8, 4, 6, 1, 1, 3, 5, 8, 6, 6, 8, 5, 3, 1, 1, 6, 4, 8, 4, 8, 6, 5, 8], [3, 5, 5, 8, 8, 8, 4, 4, 6, 2, 8, 1, 5, 3, 2, 8, 8, 2, 3, 5, 1, 8, 2, 6, 4, 4, 8, 8, 8, 5], [7, 7, 8, 6, 3, 4, 4, 6, 3, 2, 2, 3, 8, 8, 6, 3, 3, 6, 8, 8, 3, 2, 2, 3, 6, 4, 4, 3, 6, 8], [5, 7, 6, 8, 4, 3, 6, 2, 2, 3, 3, 1, 8, 8, 3, 6, 6, 3, 8, 8, 1, 3, 3, 2, 2, 6, 3, 4, 8, 6], [1, 6, 7, 7, 4, 6, 1, 8, 4, 2, 3, 2, 6, 3, 8, 8, 8, 8, 3, 6, 2, 3, 2, 4, 8, 1, 6, 4, 7, 7], [6, 1, 5, 7, 6, 2, 1, 1, 2, 4, 2, 3, 3, 6, 8, 8, 8, 8, 6, 3, 3, 2, 4, 2, 1, 1, 2, 6, 7, 5], [3, 4, 4, 6, 8, 2, 3, 5, 4, 8, 8, 7, 3, 2, 1, 3, 3, 1, 2, 3, 7, 8, 8, 4, 5, 3, 2, 8, 6, 4], [4, 3, 6, 2, 6, 8, 5, 3, 8, 4, 7, 8, 2, 3, 3, 2, 2, 3, 3, 2, 8, 7, 4, 8, 3, 5, 8, 6, 2, 6], [4, 6, 1, 1, 8, 4, 8, 2, 8, 7, 4, 8, 4, 2, 3, 2, 2, 3, 2, 4, 8, 4, 7, 8, 2, 8, 4, 8, 1, 1], [6, 2, 8, 1, 4, 8, 6, 8, 7, 8, 8, 4, 2, 4, 2, 3, 3, 2, 4, 2, 4, 8, 8, 7, 8, 6, 8, 4, 1, 8], [6, 2, 8, 1, 4, 8, 6, 8, 7, 8, 8, 4, 2, 4, 2, 3, 3, 2, 4, 2, 4, 8, 8, 7, 8, 6, 8, 4, 1, 8], [4, 6, 1, 1, 8, 4, 8, 2, 8, 7, 4, 8, 4, 2, 3, 2, 2, 3, 2, 4, 8, 4, 7, 8, 2, 8, 4, 8, 1, 1], [4, 3, 6, 2, 6, 8, 5, 3, 8, 4, 7, 8, 2, 3, 3, 2, 2, 3, 3, 2, 8, 7, 4, 8, 3, 5, 8, 6, 2, 6], [3, 4, 4, 6, 8, 2, 3, 5, 4, 8, 8, 7, 3, 2, 1, 3, 3, 1, 2, 3, 7, 8, 8, 4, 5, 3, 2, 8, 6, 4], [6, 1, 5, 7, 6, 2, 1, 1, 2, 4, 2, 3, 3, 6, 8, 8, 8, 8, 6, 3, 3, 2, 4, 2, 1, 1, 2, 6, 7, 5], [1, 6, 7, 7, 4, 6, 1, 8, 4, 2, 3, 2, 6, 3, 8, 8, 8, 8, 3, 6, 2, 3, 2, 4, 8, 1, 6, 4, 7, 7], [5, 7, 6, 8, 4, 3, 6, 2, 2, 3, 3, 1, 8, 8, 3, 6, 6, 3, 8, 8, 1, 3, 3, 2, 2, 6, 3, 4, 8, 6], [7, 7, 8, 6, 3, 4, 4, 6, 3, 2, 2, 3, 8, 8, 6, 3, 3, 6, 8, 8, 3, 2, 2, 3, 6, 4, 4, 3, 6, 8], [3, 5, 5, 8, 8, 8, 4, 4, 6, 2, 8, 1, 5, 3, 2, 8, 8, 2, 3, 5, 1, 8, 2, 6, 4, 4, 8, 8, 8, 5], [5, 3, 8, 5, 6, 8, 4, 8, 4, 6, 1, 1, 3, 5, 8, 6, 6, 8, 5, 3, 1, 1, 6, 4, 8, 4, 8, 6, 5, 8], [5, 8, 3, 5, 4, 4, 8, 8, 4, 3, 6, 2, 2, 8, 4, 8, 8, 4, 8, 2, 2, 6, 3, 4, 8, 8, 4, 4, 5, 3], [8, 5, 5, 3, 4, 8, 8, 8, 3, 4, 4, 6, 8, 6, 8, 4, 4, 8, 6, 8, 6, 4, 4, 3, 8, 8, 8, 4, 3, 5], [8, 6, 4, 4, 1, 4, 7, 5, 6, 8, 7, 7, 6, 2, 1, 1, 1, 1, 2, 6, 7, 7, 8, 6, 5, 7, 4, 1, 4, 4], [8, 8, 4, 8, 4, 1, 5, 7, 8, 6, 7, 5, 4, 6, 1, 8, 8, 1, 6, 4, 5, 7, 6, 8, 7, 5, 1, 4, 8, 4]]}, "fafd9572": {"instruction": "1. For each cell in the input grid, if the cell's value is 1, replace it with the value 2 if it is positioned in the left/top group of similar pattern blocks or with 3 if it is in the right/bottom group of similar pattern blocks. For single-line and isolated groups, base this assignment on their relative location compared to other '1' clusters (generally, left/top = 2, right/bottom = 3).\n2. Do not change any other cell values (all non-'1' values remain the same).", "test_input": [[0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [4, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0],\n [0, 2, 2, 2, 0, 2, 2, 2, 0, 3, 3, 3],\n [0, 2, 0, 2, 0, 2, 0, 2, 0, 3, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0],\n [0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3],\n [0, 2, 0, 2, 0, 0, 0, 0, 0, 3, 0, 3],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 4, 0], [0, 4, 4, 4, 0, 7, 7, 7, 0, 4, 4, 4], [0, 4, 0, 4, 0, 7, 0, 7, 0, 4, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0], [0, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3], [0, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "fafffa47": {"instruction": "1. Split the input grid into two halves: the top half (first 3 rows) and the bottom half (last 3 rows).\n2. For each position (i, j) in a new 3x3 output grid:\n    a. If the corresponding cell in the top half at (i, j) is 9, and the corresponding cell in the bottom half at (i, j) is 1, set the output cell at (i, j) to 2.\n    b. Otherwise, set the output cell at (i, j) to 0.", "test_input": [[9, 0, 9], [0, 0, 9], [9, 0, 9], [0, 1, 1], [0, 1, 0], [1, 0, 0]], "predicted_output": "[[0, 0, 0],\n [0, 0, 2],\n [2, 0, 0]]", "expected_output": [[0, 0, 0], [2, 0, 0], [0, 2, 0]]}, "fb791726": {"instruction": "1. For each row in the input grid, output the row unchanged, followed by a new row of the same length where every cell is filled with the color 3.\n2. Repeat step 1 for every row in the input grid, such that the output grid alternates between an input row and a new solid-3 row.\n3. If the input grid has N rows and M columns, the resulting output grid will have 2N rows and 2M columns.\n4. When copying the input row, copy it twice horizontally so that each element appears two times in a row. When creating the new row filled with color 3, make this row of length 2M.\n5. After processing all input rows, the output grid should thus be of size (2N) x (2M), with each input row (doubled horizontally) and an interleaved row of 3s (also doubled horizontally).", "test_input": [[9, 0, 0, 0], [0, 0, 0, 0], [9, 0, 0, 0], [0, 0, 0, 0]], "predicted_output": "[[9, 9, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 3, 3],\n [9, 9, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 3, 3, 3, 3, 3, 3]]", "expected_output": [[9, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3], [9, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]}, "fbf15a0b": {"instruction": "1. Identify all rows in the input grid that contain a value other than the background value (8). Discard any leading rows before the first such row, and any trailing rows after the last such row, so only the contiguous region containing non-background values (and the rows between them) is kept.\n2. Within these kept rows, identify all columns that contain at least one non-background value. Discard any columns to the left of the first such column and to the right of the last such column, so only the contiguous region containing non-background columns (and those between them) is kept.\n3. The resulting subgrid forms the output grid.", "test_input": [[8, 9, 8, 9, 8, 5, 8, 5], [8, 8, 8, 8, 8, 8, 8, 8], [8, 9, 8, 9, 8, 9, 8, 9], [8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 9, 8, 9, 8, 5, 8, 5],\n [8, 8, 8, 8, 8, 8, 8, 8],\n [8, 9, 8, 9, 8, 9, 8, 9],\n [8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8], [8, 8, 8, 8], [8, 9, 8, 9], [8, 8, 8, 8]]}, "fc10701f": {"instruction": "1. Locate all non-overlapping 2x2 blocks of matching colors that differ from the background color (here, color 6).\n2. For every 2x2 block found:\n    a. If the block is made of color 7, change all cells in the block to color 7 (no change).\n    b. If the block is made of color 9, change all cells in the block to color 7.\n    c. If the block is made of color 0:\n        i. If the block is surrounded on the left and right by color 6 only, keep as color 0.\n        ii. If the block is directly adjacent (left or right) to another non-background block (such as color 9 or a 2x2 region of color 0 with a 2x2 region of color 9 in the same rows), then:\n            - Change the right columns of the block to color 2 (i.e., turn [0, 0] to [0, 2]).\n            - Otherwise, keep it as color 0.\n3. All other cells remain unchanged.", "test_input": [[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 9, 9, 9, 9, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]], "predicted_output": "[[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 0, 2, 7, 7, 7, 7, 0, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 0, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]]", "expected_output": [[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 2, 2, 2, 2, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 7, 7, 7, 7, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]]}, "fc4aaf52": {"instruction": "1. Identify the smallest rectangular subgrid that contains all non-background (non-8) cells. In this case, it is the region from row 5 to row 10 and column 2 to column 7, inclusive.\n2. Within this rectangle, replace each cell value as follows:\n    - All cells that were value 4 become value 9.\n    - All cells that were value 9 become value 4.\n    - All other values remain unchanged.\n3. Paste this transformed rectangle into a new location such that it is horizontally shifted right by 4 columns from its original position. (The rectangle now starts at column 6 instead of column 2.)\n4. Fill all other cells in the grid with the background value (8).", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 4, 9, 9, 9, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 4, 9, 9, 9, 9, 9, 4, 8, 8, 8, 8, 8, 8, 8, 8], [8, 4, 9, 9, 9, 9, 9, 4, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 4, 9, 9, 9, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 9, 4, 4, 4, 9, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 9, 4, 4, 4, 4, 4, 9, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 9, 4, 4, 4, 4, 4, 9, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 9, 4, 4, 4, 9, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 4, 4, 9, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 9, 4, 4, 4, 4, 4, 9, 8], [8, 9, 4, 4, 4, 4, 4, 9, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 9, 4, 4, 4, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]}, "fc754716": {"instruction": "1. Identify the single nonzero cell in the input grid; note its value (let's call it X) and its position (row, col).\n2. Replace every cell on the outer border (all cells in the first and last row, and first and last column) of the grid with the value X.\n3. For all other (interior) cells, set the value to 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8],\n [8, 0, 0, 0, 0, 0, 8],\n [8, 0, 0, 0, 0, 0, 8],\n [8, 0, 0, 0, 0, 0, 8],\n [8, 0, 0, 0, 0, 0, 8],\n [8, 0, 0, 0, 0, 0, 8],\n [8, 0, 0, 0, 0, 0, 8],\n [8, 0, 0, 0, 0, 0, 8],\n [8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8, 8]]}, "fcb5c309": {"instruction": "1. Identify all the nonzero colors present in the input grid. Select one as the \"frame color\" (the largest region of nonzero, thick continuous border in the output; for this example, it is 8).\n2. Find the smallest rectangular bounding box that contains all occurrences of the selected frame color.\n3. Extract the subgrid defined by this bounding box.\n4. Create a new grid with dimensions: (number of unique rows in the bounding box that contain the frame color at least once) by (number of unique columns in the bounding box that contain the frame color at least once).\n5. Fill the entire border (first and last rows and columns) of this new grid with the frame color.\n6. For each interior cell (non-border), if the corresponding cell position in the original input subgrid contains a nonzero color other than the frame color, copy that color into the resulting interior cell; otherwise, fill with 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 8, 0, 8, 0, 0, 1, 8, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 8, 0, 8, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8], [0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 8, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 8, 0, 8, 0, 1, 0], [0, 0, 0, 8, 8, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 0, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 8],\n [8, 1, 0, 8, 0, 8, 0, 0, 1, 8, 0, 8],\n [8, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8],\n [8, 1, 0, 8, 0, 0, 0, 0, 1, 0, 0, 8],\n [8, 1, 0, 0, 0, 0, 0, 0, 1, 0, 8, 8],\n [8, 1, 0, 0, 0, 8, 0, 1, 1, 1, 1, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 8, 0, 8, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 0, 0, 8], [8, 0, 8, 0, 0, 0, 0, 8], [8, 0, 0, 0, 0, 8, 0, 8], [8, 8, 8, 8, 8, 8, 8, 8]]}, "fcc82909": {"instruction": "1. Identify all nonzero 2x2 blocks (groups of four cells forming a square) in the input grid where all four cells are zeros.  \n2. For every 2x2 block found in step 1, check if it is adjacent (sharing a row or column) to any other distinct nonzero block or element in the grid.  \n3. For every such location, fill the entire 2x2 block with the value 3.  \n4. Repeat this process until all possible 2x2 zero blocks adjacent to existing nonzero elements are filled with 3s.  \n5. Leave all other grid values unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 2, 9, 0, 0], [2, 1, 0, 0, 0, 0, 1, 6, 0, 0], [0, 0, 0, 4, 7, 0, 0, 0, 0, 0], [0, 0, 0, 8, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 0, 0, 0, 2, 9, 0, 0],\n [2, 1, 0, 0, 0, 0, 1, 6, 0, 0],\n [0, 0, 0, 4, 7, 0, 0, 0, 0, 0],\n [0, 0, 0, 8, 4, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 2, 9, 0, 0], [2, 1, 0, 0, 0, 0, 1, 6, 0, 0], [3, 3, 0, 4, 7, 0, 3, 3, 0, 0], [3, 3, 0, 8, 4, 0, 3, 3, 0, 0], [0, 0, 0, 3, 3, 0, 3, 3, 0, 0], [0, 0, 0, 3, 3, 0, 3, 3, 0, 0], [0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "fd02da9e": {"instruction": "1. Identify all cells in the input grid whose value is different from the background value (the most common value in the grid; in these examples, it is 7).\n2. For each such non-background value:\n    a. If the non-background value is in the first row, starting at its column, place a 2x2 block of this value starting from the cell one row below and one column to the right from its original position.\n    b. If the non-background value is in the last row, starting at its column, place a 2x2 block of this value starting from the cell one row above and one column to the left from its original position.\n3. Set the rest of the grid to the background value.", "test_input": [[2, 7, 7, 7, 7, 7, 7, 5], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [8, 7, 7, 7, 7, 7, 7, 4]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7],\n [7, 2, 2, 7, 7, 7, 7, 5],\n [7, 2, 2, 7, 7, 7, 7, 5],\n [7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7],\n [8, 7, 7, 7, 7, 7, 7, 4],\n [8, 7, 7, 7, 7, 7, 7, 4],\n [7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7], [7, 2, 2, 7, 7, 5, 5, 7], [7, 2, 2, 7, 7, 5, 5, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 8, 7, 7, 4, 7, 7], [7, 7, 8, 7, 7, 4, 7, 7], [7, 7, 7, 8, 4, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7]]}, "fd096ab6": {"instruction": "1. For each group of contiguous non-background (non-1) cells of the same color, determine if the group is horizontal or vertical (i.e., its bounding box's width is greater than its height for horizontal, height is greater for vertical).\n2. If the group is a **horizontal segment** of at least 2 contiguous cells, replicate that group two additional times directly below, each copy shifted down by one row relative to the previous, forming a vertical stack of three such groups. Place the copies in the same columns as the original. The color remains the same.\n3. If the group is a **vertical segment** of at least 2 contiguous cells, replicate that group two additional times directly to the right, each copy shifted right by one column relative to the previous, forming a horizontal stack of three such groups. Place the copies in the same rows as the original. The color remains the same.\n4. If the group is a **single cell** (length 1 group, isolated non-background color), do not transform it.\n5. All other cells (background and/or not belonging to such groups) remain unchanged.", "test_input": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 1, 1, 1, 1], [1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 6, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], "predicted_output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 6, 1, 6, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]", "expected_output": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 8, 8, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 1], [1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 1, 5, 1, 1], [1, 1, 1, 1, 1, 6, 1, 6, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 6, 6, 1, 6, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 9, 1, 1, 1, 1, 7, 7, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1], [1, 1, 1, 9, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 9, 9, 1, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]}, "fd4b2b02": {"instruction": "1. Identify all 1x1 blocks of color 6 in the input grid. For each block, note its position.\n2. For each identified block (at position (r, c)):\n    a. Replace the block\u2019s 6 with a 3.\n    b. In the same row as the block, and symmetrically reflected across the central vertical axis, set two adjacent cells to value 3. Specifically:\n        - Let n = grid width.\n        - The reflected pair should occupy columns (n-1-c) and (n-2-c).\n    c. In every row above and below the original block (up to and including the first and last row), at the same c and at column (n-1-c), set the cells to 6.\n3. All other cells remain as 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0]]}, "fe45cba4": {"instruction": "1. For each cell in the input grid, erase any color that is not one of the dominant region colors (in the examples: 7, 9, 2, 8) and replace it with the dominant color for each \"zone\" (region).\n2. Identify all contiguous regions of a unique color (not sharing sides but not corners): these are generally vertical or horizontal blocks of color (e.g., 2, 8, 9, or 7).\n3. For each unique color except for the dominant \"background\" color (in the examples, 7):\n    a. Find the bounding rectangle that contains all the cells of each non-background color.\n    b. Fill the entire bounding rectangle with that color, overwriting any other color that may be inside.\n4. Repeat this for all such non-background colors.\n5. The result is that all \"minority\" color regions become perfect rectangles filling their respective bounding boxes, while the rest of the grid is filled with the background (7), except where overlapped/replaced by these rectangles.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9], [8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8], [8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "fe9372f3": {"instruction": "1. Identify the location of the central cross-shaped pattern of '2's in the input grid. The cross consists of a vertical bar (3 consecutive '2's with the middle at [row, col]) and a horizontal bar (3 consecutive '2's crossing the same middle cell).\n2. For each '2' in the input grid:\n   - Leave the value as '2' in the output grid.\n3. For every cell that is immediately adjacent (up, down, left, or right) to a '2' in the central cross, but not already a '2':\n   - Set its value to '1'.\n4. For every cell at the ends of the horizontal and vertical arms of the cross (i.e., two steps out from the center along arms), but not a '2' or a '1':\n   - Set its value to '4' if on the horizontal arms, or '8' if on the vertical arms.\n5. Fill the rest of the output grid as follows:\n   - Along the horizontal centerline (the row containing the horizontal bar), repeat '8' and '4' alternately, starting immediately after the rightmost '2' until the grid edge, and immediately before the leftmost '2' until the grid edge.\n   - Along the vertical centerline (the column containing the vertical bar), repeat '8' and '1' alternately, starting immediately after the lowest '2' downward until the grid edge, and immediately before the uppermost '2' upward until the grid edge.\n   - In the corners created by the cross, extend the diagonal line patterns formed by '1's along both diagonals (NW-SE, NE-SW), starting from the adjacent cells at the cross arms' ends, filling out as long as possible until reaching the boundary.\n6. All other cells remain '0'.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 1, 8, 2, 8, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 1, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 1, 8, 2, 8, 1, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0], [4, 8, 8, 4, 8, 8, 2, 2, 2, 8, 8, 4, 8, 8, 4, 8, 8], [0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "fea12743": {"instruction": "1. Identify each block of contiguous rows (separated by all-zero rows) that contains nonzero values. Treat each block as one \"region\".\n2. Assign to each region, from top to bottom, the distinct value among its '2's:  \n   - The top region receives '3'.\n   - The second region receives '8'.\n   - The third region receives '2'.\n   - The fourth region receives '3'.\n   - (If more, continue in the established color order: 3, 8, 2, 3, ...)\n3. Within each identified region, choose either the left-side cluster or right-side cluster of '2's (whichever contains more '2's, or if equal, choose left).\n4. Change all '2's in the chosen cluster within that region to this region's assigned value (from Step 2). Leave other pixels unchanged.\n5. Keep all other values (including zeroes and untouched '2's) unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0], [0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0], [0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0], [0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0], [0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0], [0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 3, 3, 0, 0, 0, 2, 2, 0, 0],\n [0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0],\n [0, 3, 0, 0, 2, 0, 2, 0, 0, 2, 0],\n [0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 8, 8, 0, 0, 0, 0, 0, 2, 2, 0],\n [0, 8, 0, 0, 2, 0, 2, 0, 0, 2, 0],\n [0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0],\n [0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 2, 0, 0, 3, 3, 0, 0],\n [0, 2, 0, 0, 3, 0, 3, 0, 0, 0, 0],\n [0, 2, 0, 0, 3, 0, 3, 0, 0, 2, 0],\n [0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 2, 0, 0, 2, 0, 2, 0, 0, 2, 0], [0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 0, 0, 8, 8, 0], [0, 8, 0, 0, 8, 0, 8, 0, 0, 8, 0], [0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0], [0, 0, 8, 8, 0, 0, 0, 8, 8, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 3, 3, 3, 0, 0, 2, 2, 0, 0], [0, 3, 0, 0, 3, 0, 2, 0, 0, 0, 0], [0, 3, 0, 0, 3, 0, 2, 0, 0, 2, 0], [0, 0, 3, 3, 0, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "feca6190": {"instruction": "1. Take the single input row as a sequence of values. Denote its length as N.\n2. Create an output grid of size N\u00d7N, initialized with zeros.\n3. For each k from 0 to N-1:\n    a. Copy the input row, shifted left by k positions (with wrap-around, so elements that go past the first position appear at the end).\n    b. Place this shifted row as the (N-1-k)th row in the output grid (counting from the top, 0-indexed).\n4. The grid now displays the original row and all of its leftward cyclic shifts, arranged from bottom (original) to top (last shift).", "test_input": [[0, 6, 7, 8, 9]], "predicted_output": "[[8, 9, 0, 6, 7],\n [7, 8, 9, 0, 6],\n [6, 7, 8, 9, 0],\n [0, 6, 7, 8, 9],\n [9, 0, 6, 7, 8]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ff2825db": {"instruction": "1. Identify the color used for the full border rows and columns (the frame) in the input grid, excluding the first row, which is a unique header. In this case, it is the number that fills the entire second row and the grid's outer columns (here, 2).\n2. Replace every instance of this frame color (2) inside the grid\u2014including all full-border rows/columns and any internal occurrences\u2014with the color found on the anti-diagonal corners of the top boundary row (the rightmost color in the header, here 4).\n3. Set the second row (the first non-header row) to be completely filled with the color from step 2 (here, 4).\n4. For the internal area bordered by the new frame (all rows/columns inside the new frame), preserve all 0s. Any former nonzero, non-border values in this interior region should be set to 0.", "test_input": [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 1, 0, 0, 0, 0, 2], [2, 0, 0, 0, 4, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 4, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 0, 0, 0, 0, 0, 0, 0, 0, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], "predicted_output": "[[1, 1, 2, 2, 3, 3, 4, 4, 5, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 4],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 4],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 4],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 4],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 4],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 4],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 0, 0, 0, 0, 0, 0, 0, 0, 4], [4, 0, 0, 0, 0, 0, 0, 0, 0, 4], [4, 0, 0, 0, 0, 0, 0, 0, 0, 4], [4, 0, 0, 0, 4, 4, 0, 0, 0, 4], [4, 0, 0, 0, 4, 4, 0, 0, 0, 4], [4, 0, 0, 0, 0, 0, 0, 0, 0, 4], [4, 0, 0, 0, 0, 0, 0, 0, 0, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]}, "ff28f65a": {"instruction": "1. Identify all distinct 2x2 blocks of the value 2 in the input grid.\n2. For each recognized 2x2 block, assign a unique position in a new 3x3 logical grid. Place a 1 at each location in the 3x3 grid corresponding to a unique 2x2 block detected at these canonical positions: top-left, top-center, top-right, middle-left, center, middle-right, bottom-left, bottom-center, bottom-right.\n3. For every canonical 2x2 block position detected, set the corresponding cell in the 3x3 grid to 1; otherwise, leave it as 0.\n4. The final 3x3 grid forms the output.", "test_input": [[0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 2, 2, 0, 0], [2, 2, 0, 2, 2, 0, 0], [0, 0, 0, 0, 0, 2, 2], [0, 0, 2, 2, 0, 2, 2], [0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 0],\n [0, 0, 1],\n [0, 1, 0]]", "expected_output": [[1, 0, 1], [0, 1, 0], [1, 0, 0]]}, "ff72ca3e": {"instruction": "1. Locate all cells containing either the number 4 or 5 in the input grid.\n2. For each cell containing a 4, identify its position as the center of a square region to be filled. The size of each square is determined by finding the minimum row and column distance from the 5 in the same \"cluster\" (nearest 5 around that 4, possibly diagonally or orthogonally).\n3. For each 4, identify the nearest 5 within its cluster and determine the square dimensions:\n    a. Compute the rectangle between the 5 and 4, inclusive.\n    b. Expand this rectangle by 1 cell in every direction around the 4, but only as long as it does not overlap another 4 or 5 or go outside the grid borders.\n    c. If multiple 4s and 5s form a clear cluster, use the rectangle spanning the 4 and its nearest 5.\n4. For each square region determined above, fill all cells within the square with the number 2, except for locations originally occupied by a 4 or 5 (these remain unchanged).\n5. Leave all other cells as they are in the original grid, unless they are within the filled squares.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 4, 2, 2, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0],\n [0, 5, 2, 2, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 2, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 4, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 5, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 5, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 2, 2, 4, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 4, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ff805c23": {"instruction": "1. Identify the central 5x5 region of the input grid. The 5x5 region is located in the center of the grid, both horizontally and vertically.\n2. Extract this 5x5 region to form the output grid. The output grid is simply this extracted 5x5 block, preserving the colors exactly as they are in the original input.", "test_input": [[4, 4, 4, 0, 4, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 0, 0, 4, 0, 4, 4, 4], [4, 4, 4, 4, 0, 4, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 4, 0, 4, 4, 4, 4], [4, 4, 0, 4, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 0, 0, 4, 0, 4, 4], [0, 4, 4, 0, 4, 4, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 4, 4, 0, 4, 4, 0], [4, 0, 0, 4, 4, 4, 0, 0, 3, 3, 0, 3, 3, 0, 3, 3, 0, 0, 4, 4, 4, 0, 0, 4], [0, 4, 0, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 4, 0, 4, 0], [0, 3, 3, 3, 0, 0, 8, 8, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8, 0, 0, 3, 3, 3, 0], [3, 3, 3, 3, 0, 3, 8, 8, 8, 1, 1, 1, 1, 1, 0, 8, 8, 8, 3, 0, 3, 3, 3, 3], [3, 3, 0, 0, 3, 3, 8, 8, 8, 1, 1, 1, 1, 1, 0, 8, 8, 8, 3, 3, 0, 0, 3, 3], [3, 3, 0, 0, 3, 3, 8, 0, 0, 1, 1, 1, 1, 1, 8, 0, 0, 8, 3, 3, 0, 0, 3, 3], [0, 0, 3, 3, 0, 3, 8, 0, 8, 1, 1, 1, 1, 1, 8, 8, 0, 8, 3, 0, 3, 3, 0, 0], [0, 3, 3, 3, 3, 3, 8, 8, 0, 8, 8, 8, 8, 8, 8, 0, 8, 8, 3, 3, 3, 3, 3, 0], [0, 3, 3, 3, 3, 3, 8, 8, 0, 8, 8, 8, 8, 8, 8, 0, 8, 8, 3, 3, 3, 3, 3, 0], [0, 0, 3, 3, 0, 3, 8, 0, 8, 8, 0, 8, 8, 0, 8, 8, 0, 8, 3, 0, 3, 3, 0, 0], [3, 3, 0, 0, 3, 3, 8, 0, 0, 8, 8, 8, 8, 8, 8, 0, 0, 8, 3, 3, 0, 0, 3, 3], [3, 3, 0, 0, 3, 3, 8, 8, 8, 0, 8, 0, 0, 8, 0, 8, 8, 8, 3, 3, 0, 0, 3, 3], [3, 3, 3, 3, 0, 3, 8, 8, 8, 0, 0, 8, 8, 0, 0, 8, 8, 8, 3, 0, 3, 3, 3, 3], [0, 3, 3, 3, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 3, 3, 3, 0], [0, 4, 0, 4, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 4, 0, 4, 0], [4, 0, 0, 4, 4, 4, 0, 0, 3, 3, 0, 3, 3, 0, 3, 3, 0, 0, 4, 4, 4, 0, 0, 4], [0, 4, 4, 0, 4, 4, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 4, 4, 0, 4, 4, 0], [4, 4, 0, 4, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 0, 0, 4, 0, 4, 4], [4, 4, 4, 4, 0, 4, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 4, 0, 4, 4, 4, 4], [4, 4, 4, 0, 4, 0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 0, 0, 4, 0, 4, 4, 4]], "predicted_output": "[[1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1]]", "expected_output": [[8, 8, 8, 8, 8], [0, 0, 8, 8, 0], [0, 8, 0, 0, 8], [8, 8, 8, 8, 8], [8, 0, 8, 8, 0]]}}