{"9ba4a9aa": {"instruction": "1. Locate the distinct 3x3 block within the input grid where the center value is unique compared to the surrounding 8 cells (which all share the same value). The surrounding values form a solid 3x3 square of a single color, except for the center, which is different.\n2. Extract this 3x3 block, preserving the position and order of its values.\n3. Output this 3x3 block as the result.", "test_input": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 2, 8, 2, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 6, 4, 4, 4, 1, 4], [4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 1, 6, 1, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 4, 4, 6, 4, 4, 4, 1, 4], [4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 2, 4, 4, 6, 1, 6, 4, 4, 1, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 1, 4], [4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 1, 3, 9, 4, 9, 4, 9, 4, 4, 4, 2, 4, 4, 4, 1, 4, 1, 4, 1, 4], [4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 1, 4, 4, 4, 4, 4], [4, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 9, 8, 4, 4, 4, 4], [4, 6, 8, 6, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 4, 9, 8, 9, 4, 4, 4, 4], [4, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 9, 8, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[6, 6, 6],\n [6, 8, 6],\n [6, 6, 6]]", "expected_output": [[2, 2, 2], [2, 8, 2], [2, 2, 2]]}, "9bebae7a": {"instruction": "1. Identify the two distinct horizontal regions in the grid: one region containing nonzero (colored, specifically '4') elements near the top, and one near the bottom containing nonzero (colored, specifically '6') elements.  \n2. Ignore (remove) all rows associated with the lower colored region (with '6's) and any rows below them, leaving only the upper main region and any intervening blank (zero) rows.  \n3. For the upper ('4') region, duplicate its pattern downward, in a reflected manner if necessary, to extend the shape as if \"mirroring\" the colored structure. Specifically, starting from the row where the current upper colored region ends, append additional rows such that the overall shape forms a vertical symmetry (with respect to the rows containing '4'), or extends the structure downward to match patterns seen in the earlier examples.  \n4. Set all other positions (not defined by this extension operation) to zero.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 4, 4, 4, 0, 0, 4, 4, 4, 0, 0, 0], [0, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "9c1e755f": {"instruction": "1. Identify the set of consecutive nonzero columns starting from the top-most row that contain distinct color patterns. These columns will serve as a \"pattern block\" to fill other columns.\n2. For each row, locate the nonzero values in the right part of the grid, starting at the column where a vertical bar of a repeated color (e.g., 5) begins.\n3. For each such vertical segment (e.g., columns with 5s), copy the horizontal pattern formed by the bottom-most set of unique rows (row patterns seen at the bottom right), and repeat this pattern upward to fill the height of the vertical segment, replacing zeros to the right of the vertical segment in each row with the color from the horizontal pattern at that row's relative position.\n4. If the vertical segment is shorter than the pattern block, fill only up to the segment's height.\n5. All other parts of the grid remain unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 0, 5, 0, 0, 0], [4, 0, 0, 0, 0, 0, 5, 0, 0, 0], [2, 0, 0, 0, 0, 0, 5, 0, 0, 0], [2, 0, 0, 0, 0, 0, 5, 0, 0, 0], [2, 0, 0, 0, 0, 0, 5, 0, 0, 0], [1, 0, 0, 0, 0, 0, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 8, 6, 8], [0, 0, 0, 0, 0, 0, 5, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 5, 5, 5, 5, 0, 5, 8, 6, 8],\n [4, 0, 0, 0, 0, 0, 5, 3, 3, 3],\n [2, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [2, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [2, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [1, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 5, 5, 5, 5, 0, 5, 8, 6, 8], [4, 4, 4, 4, 4, 0, 5, 3, 3, 3], [2, 2, 2, 2, 2, 0, 5, 8, 6, 8], [2, 2, 2, 2, 2, 0, 5, 3, 3, 3], [2, 2, 2, 2, 2, 0, 5, 8, 6, 8], [1, 1, 1, 1, 1, 0, 5, 3, 3, 3], [0, 0, 0, 0, 0, 0, 5, 8, 6, 8], [0, 0, 0, 0, 0, 0, 5, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "9c56f360": {"instruction": "1. For each row in the input grid, locate the consecutive sequence of '3's (if any) at the right end of the row.\n2. If a sequence of '3's is found, remove the entire sequence from the end of that row.\n3. Insert the same sequence of '3's starting in the leftmost available zero(s) of that same row, such that the sequence of '3's starts at the leftmost column with a value of 0, replacing those zeros with '3's.\n4. If there is no sequence of '3's at the end of the row, or no zeros to the left to use, leave the row unchanged.", "test_input": [[0, 8, 8, 8, 8, 8, 8, 0, 8], [8, 8, 8, 0, 0, 8, 8, 0, 8], [0, 8, 8, 0, 8, 8, 0, 0, 8], [0, 8, 0, 0, 0, 0, 0, 3, 3], [0, 8, 0, 8, 0, 0, 0, 3, 3], [8, 0, 0, 0, 0, 0, 0, 3, 3], [0, 0, 8, 0, 8, 8, 0, 3, 3], [0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 8, 8, 8, 0]], "predicted_output": "[[0, 8, 8, 8, 8, 8, 8, 0, 8],\n [8, 8, 8, 0, 0, 8, 8, 0, 8],\n [0, 8, 8, 0, 8, 8, 0, 0, 8],\n [3, 3, 8, 0, 0, 0, 0, 0, 0],\n [3, 3, 8, 0, 8, 0, 0, 0, 0],\n [3, 3, 0, 0, 0, 0, 0, 0, 8],\n [3, 3, 8, 0, 8, 8, 0, 0, 0],\n [0, 8, 8, 8, 0, 0, 0, 0, 0],\n [0, 8, 0, 8, 0, 8, 8, 8, 0]]", "expected_output": [[0, 8, 8, 8, 8, 8, 8, 0, 8], [8, 8, 8, 0, 0, 8, 8, 0, 8], [0, 8, 8, 0, 8, 8, 0, 0, 8], [0, 8, 3, 3, 0, 0, 0, 0, 0], [0, 8, 0, 8, 3, 3, 0, 0, 0], [8, 3, 3, 0, 0, 0, 0, 0, 0], [0, 0, 8, 0, 8, 8, 3, 3, 0], [0, 8, 8, 8, 0, 0, 0, 0, 0], [0, 8, 0, 8, 0, 8, 8, 8, 0]]}, "9caba7c3": {"instruction": "1. For each row in the grid, identify any contiguous run of cells with the value 5, where the run has length 3 or more.\n2. Check if this run is immediately adjacent (horizontally or vertically) to a run of cells with the value 2.\n3. For each 2-run that is adjacent to a 5-run, transform the 5-run and the 2-run as follows:\n   a. If a 2-run is directly to the right of a 5-run, or vice versa, recolor the 5s in the run to the rightmost color pattern observed in the corresponding output samples: set leftmost 5 to 7, the next to 4, and the last to 7 (for runs of length 3), or in longer runs replace the three cells nearest to the 2-run with 7, 4, 7, and leave others unchanged.\n   b. If the run of 2s is of length greater than 1 and is sandwiched between 5s, recolor the nearest 5 to the left of the run to 7, and the nearest right 5 after the run to 7. If the run is longer, set the cell immediately next to the run to 4.\n4. Apply the same logic vertically, i.e., for columns. If a vertical run of 2s is adjacent to a vertical run of 5s, apply the color substitutions on the vertical 5s next to the 2-run in the same (7, 4, 7) pattern.\n5. Leave all other grid locations unchanged.", "test_input": [[5, 0, 5, 5, 0, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 5, 5, 0, 0, 0, 5, 0, 5, 5, 5, 5, 5, 0, 5, 5, 0, 5], [0, 0, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5], [0, 5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 2, 5, 5, 5, 0, 5], [5, 0, 0, 5, 0, 0, 5, 5, 5, 5, 5, 5, 0, 2, 2, 5, 5, 0, 0], [5, 5, 5, 0, 5, 5, 5, 5, 0, 0, 5, 0, 5, 0, 5, 0, 0, 5, 5], [5, 2, 5, 0, 5, 0, 5, 5, 5, 5, 0, 5, 5, 0, 5, 0, 5, 5, 5], [5, 5, 2, 5, 5, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 0, 5, 5], [5, 5, 5, 0, 0, 5, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 0, 0], [5, 5, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 5, 5, 0, 5, 5, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5], [5, 5, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 5], [5, 5, 0, 0, 5, 0, 5, 5, 5, 0, 5, 5, 0, 0, 5, 5, 5, 2, 5], [5, 5, 5, 5, 5, 2, 5, 5, 5, 5, 0, 5, 0, 0, 5, 0, 2, 5, 5], [5, 0, 5, 0, 5, 5, 2, 5, 0, 0, 5, 0, 0, 5, 0, 5, 5, 5, 5], [5, 5, 5, 5, 5, 2, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5], [0, 5, 5, 5, 5, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 0, 5], [5, 5, 0, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5], [5, 5, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 5, 0, 0, 5, 5, 5]], "predicted_output": "[[5, 0, 5, 5, 0, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 5, 5, 5, 0, 0, 0, 5, 0, 5, 5, 5, 5, 5, 0, 5, 5, 0, 5],\n [0, 0, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5],\n [0, 5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 7, 4, 7, 5, 0, 5],\n [5, 0, 0, 5, 0, 0, 5, 5, 5, 5, 5, 5, 0, 7, 4, 7, 5, 0, 0],\n [5, 5, 5, 0, 5, 5, 5, 5, 0, 0, 5, 0, 5, 0, 5, 0, 0, 5, 5],\n [5, 7, 4, 7, 5, 0, 5, 5, 5, 5, 0, 5, 5, 0, 5, 0, 5, 5, 5],\n [5, 5, 7, 4, 7, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 0, 5, 5],\n [5, 5, 5, 0, 0, 5, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 0, 0],\n [5, 5, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 0, 5, 5],\n [5, 5, 5, 5, 5, 0, 5, 5, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 5],\n [5, 5, 0, 0, 5, 0, 5, 5, 5, 0, 5, 5, 0, 0, 5, 5, 5, 7, 5],\n [5, 5, 5, 5, 5, 7, 4, 7, 5, 0, 5, 0, 0, 5, 0, 5, 7, 4, 7],\n [5, 0, 5, 0, 5, 5, 7, 4, 7, 0, 5, 0, 0, 5, 0, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 7, 4, 7, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5],\n [0, 5, 5, 5, 5, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 0, 5],\n [5, 5, 0, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5],\n [5, 5, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 5, 0, 0, 5, 5, 5]]", "expected_output": [[5, 0, 5, 5, 0, 5, 5, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 5, 5, 0, 0, 0, 5, 0, 5, 5, 5, 5, 5, 0, 5, 5, 0, 5], [0, 0, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 7, 7, 7, 5, 0, 5], [0, 5, 5, 0, 5, 0, 0, 0, 5, 5, 5, 0, 5, 2, 4, 7, 5, 0, 5], [5, 0, 0, 5, 0, 0, 5, 5, 5, 5, 5, 5, 0, 2, 2, 7, 5, 0, 0], [5, 5, 5, 0, 5, 5, 5, 5, 0, 0, 5, 0, 5, 0, 5, 0, 0, 5, 5], [7, 2, 7, 0, 5, 0, 5, 5, 5, 5, 0, 5, 5, 0, 5, 0, 5, 5, 5], [7, 4, 2, 5, 5, 0, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 0, 5, 5], [7, 7, 7, 0, 0, 5, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 0, 0], [5, 5, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 0, 5, 5], [5, 5, 5, 5, 5, 0, 5, 5, 0, 0, 5, 5, 5, 0, 5, 5, 5, 5, 5], [5, 5, 5, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 5], [5, 5, 0, 0, 5, 0, 5, 5, 5, 0, 5, 5, 0, 0, 5, 5, 7, 2, 7], [5, 5, 5, 5, 7, 2, 7, 5, 5, 5, 0, 5, 0, 0, 5, 0, 2, 4, 7], [5, 0, 5, 0, 7, 4, 2, 5, 0, 0, 5, 0, 0, 5, 0, 5, 7, 7, 7], [5, 5, 5, 5, 7, 2, 7, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5], [0, 5, 5, 5, 5, 5, 0, 5, 0, 5, 0, 5, 5, 0, 5, 5, 5, 0, 5], [5, 5, 0, 5, 0, 0, 0, 0, 5, 0, 5, 5, 5, 0, 0, 0, 0, 5, 5], [5, 5, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 5, 0, 0, 5, 5, 5]]}, "9caf5b84": {"instruction": "1. Identify all cells in the grid that contain the value 5.\n2. For each cell containing the value 5, change its value to 7.\n3. Leave all other cells unchanged.", "test_input": [[6, 8, 5, 8], [4, 9, 6, 4], [5, 8, 9, 4], [6, 9, 9, 4], [8, 8, 9, 5], [9, 5, 6, 9]], "predicted_output": "[[6, 8, 7, 8],\n [4, 9, 6, 4],\n [7, 8, 9, 4],\n [6, 9, 9, 4],\n [8, 8, 9, 7],\n [9, 7, 6, 9]]", "expected_output": [[7, 8, 7, 8], [7, 9, 7, 7], [7, 8, 9, 7], [7, 9, 9, 7], [8, 8, 9, 7], [9, 7, 7, 9]]}, "9d9215db": {"instruction": "1. Identify each row that contains any nonzero numbers. For each such row, find the positions and values of the nonzero numbers.\n2. For each identified row, mirror the positions and values of the nonzero numbers from the left side to the right side across the vertical center axis of the grid. That is, for each nonzero value at position (row, col), also place the same value at position (row, n-1-col), where n is the total number of columns.\n3. Ensure that if a position is originally nonzero (contains a value), its mirrored counterpart receives the same value, potentially duplicating the value at its mirrored position if necessary.\n4. All other positions not filled by the above process remain 0 (background).", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 0, 0, 8, 0, 4, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 4, 0, 8, 0, 8, 0, 8, 0, 4, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 4, 0, 8, 0, 8, 0, 8, 0, 4, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "9ddd00f0": {"instruction": "1. For every non-zero block (connected region of the same nonzero color) in the grid, copy that block to the leftmost possible position within its row, maintaining its original spacing and structure within the row, but shifting it as far left as possible so that it touches the left edge or another nonzero block if present.\n2. Leave all zero-value (background) cells outside these shifted regions unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0]]}, "9def23fe": {"instruction": "1. Identify all horizontal blocks of contiguous nonzero cells (value 2) that form rows.\n2. For each such identified block, expand it horizontally in both directions until it reaches either the border of the grid or a cell that is not zero and not part of the original block.\n3. For each row containing such a contiguous block, check if that row is surrounded (immediately above or below) by empty (zero) rows, and fill the entire row (except where a nonzero marker already exists) with value 2.\n4. For each cell in the grid that contains a unique marker value (such as 1, 3, 4, 8 in the examples), retain its position and value in the grid.\n5. In every row below the original main block of 2s, repeat step 3 for any row containing single or repeated 2s, expanding them to fill horizontal segments similarly, ensuring to respect the placement of marker values.\n6. For all other cells that remain zero and were not expanded or are not marker positions, leave them as zero.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1],\n [0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0],\n [0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 1, 0, 0, 0, 0]]}, "9dfd6313": {"instruction": "1. For each row in the grid, identify the position of the diagonal element (the element with value 5 in the (i, i) position).\n2. For each row below the diagonal (i.e., row index > column index), shift all nonzero elements leftward into the nearest available zero cells in that row, up to and including the diagonal, without changing their order.\n3. For each row above the diagonal (i.e., row index < column index), shift all nonzero elements rightward into the nearest available zero cells in that row, up to and including the diagonal, without changing their order.\n4. Set all positions other than the shifted nonzero elements and the diagonal to zero.", "test_input": [[5, 0, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0], [3, 3, 5, 0, 0, 0], [0, 0, 0, 5, 0, 0], [2, 0, 8, 8, 5, 0], [2, 0, 6, 0, 0, 5]], "predicted_output": "[[5, 0, 0, 0, 0, 0],\n [0, 5, 0, 0, 0, 0],\n [3, 3, 5, 0, 0, 0],\n [0, 0, 0, 5, 0, 0],\n [2, 8, 8, 0, 5, 0],\n [2, 6, 0, 0, 0, 5]]", "expected_output": [[5, 0, 3, 0, 2, 2], [0, 5, 3, 0, 0, 0], [0, 0, 5, 0, 8, 6], [0, 0, 0, 5, 8, 0], [0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 5]]}, "9edfc990": {"instruction": "1. For every cell in the grid, check if the value is 0.\n2. If the value is 0 and the cell is not in the first or last column, change the value to 1.\n3. If the value is 0 and the cell is in the first or last column, leave it unchanged.\n4. If the value is not 0, leave it unchanged.", "test_input": [[0, 0, 0, 8, 0, 5, 0, 0, 9, 0, 6, 0, 0, 0, 0, 5], [6, 7, 6, 0, 4, 0, 2, 0, 0, 8, 3, 6, 2, 0, 0, 0], [0, 0, 0, 7, 0, 0, 5, 4, 1, 0, 1, 7, 6, 0, 0, 0], [0, 5, 8, 0, 9, 0, 0, 2, 2, 0, 8, 0, 4, 0, 0, 7], [4, 0, 0, 4, 2, 2, 7, 3, 2, 0, 6, 4, 9, 9, 9, 0], [0, 1, 8, 0, 5, 0, 0, 0, 2, 0, 0, 8, 0, 9, 6, 6], [9, 9, 0, 2, 8, 0, 0, 3, 0, 0, 2, 0, 0, 5, 8, 0], [1, 3, 0, 1, 6, 1, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0], [0, 0, 4, 0, 7, 4, 0, 0, 4, 0, 0, 5, 8, 0, 4, 0], [0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 8, 0, 1, 4, 4], [0, 9, 0, 0, 9, 0, 0, 0, 0, 0, 1, 5, 0, 6, 0, 0], [6, 0, 7, 5, 9, 0, 7, 0, 0, 0, 4, 6, 0, 2, 8, 0], [5, 0, 0, 0, 1, 0, 2, 4, 8, 0, 0, 3, 0, 9, 0, 8], [1, 0, 0, 2, 4, 0, 0, 0, 1, 7, 0, 0, 0, 0, 5, 0], [6, 9, 0, 0, 7, 7, 1, 0, 2, 0, 0, 9, 1, 0, 3, 0], [1, 8, 3, 0, 0, 9, 7, 0, 2, 7, 2, 0, 8, 9, 0, 0]], "predicted_output": "[[0, 1, 1, 8, 1, 5, 1, 1, 9, 1, 6, 1, 1, 1, 1, 5],\n [6, 7, 6, 1, 4, 1, 2, 1, 1, 8, 3, 6, 2, 1, 1, 0],\n [0, 1, 1, 7, 1, 1, 5, 4, 1, 1, 1, 7, 6, 1, 1, 0],\n [0, 5, 8, 1, 9, 1, 1, 2, 2, 1, 8, 1, 4, 1, 1, 7],\n [4, 1, 1, 4, 2, 2, 7, 3, 2, 1, 6, 4, 9, 9, 9, 0],\n [0, 1, 8, 1, 5, 1, 1, 1, 2, 1, 1, 8, 1, 9, 6, 6],\n [9, 9, 1, 2, 8, 1, 1, 3, 1, 1, 2, 1, 1, 5, 8, 0],\n [1, 3, 1, 1, 6, 1, 1, 1, 1, 8, 1, 1, 1, 4, 1, 0],\n [0, 1, 4, 1, 7, 4, 1, 1, 4, 1, 1, 5, 8, 1, 4, 0],\n [0, 1, 1, 6, 1, 6, 1, 1, 1, 1, 1, 8, 1, 1, 4, 4],\n [0, 9, 1, 1, 9, 1, 1, 1, 1, 1, 1, 5, 1, 6, 1, 0],\n [6, 1, 7, 5, 9, 1, 7, 1, 1, 1, 4, 6, 1, 2, 8, 0],\n [5, 1, 1, 1, 1, 1, 2, 4, 8, 1, 1, 3, 1, 9, 1, 8],\n [1, 1, 1, 2, 4, 1, 1, 1, 1, 7, 1, 1, 1, 1, 5, 0],\n [6, 9, 1, 1, 7, 7, 1, 1, 2, 1, 1, 9, 1, 1, 3, 0],\n [1, 8, 3, 1, 1, 9, 7, 1, 2, 7, 2, 1, 8, 9, 1, 0]]", "expected_output": [[0, 0, 0, 8, 0, 5, 1, 1, 9, 0, 6, 0, 0, 0, 0, 5], [6, 7, 6, 0, 4, 0, 2, 1, 1, 8, 3, 6, 2, 0, 0, 0], [0, 0, 0, 7, 0, 0, 5, 4, 1, 1, 1, 7, 6, 0, 0, 0], [0, 5, 8, 0, 9, 0, 0, 2, 2, 1, 8, 0, 4, 0, 0, 7], [4, 1, 1, 4, 2, 2, 7, 3, 2, 1, 6, 4, 9, 9, 9, 0], [1, 1, 8, 0, 5, 1, 1, 1, 2, 1, 1, 8, 1, 9, 6, 6], [9, 9, 1, 2, 8, 1, 1, 3, 1, 1, 2, 1, 1, 5, 8, 0], [1, 3, 1, 1, 6, 1, 1, 1, 1, 8, 1, 1, 1, 4, 0, 0], [1, 1, 4, 1, 7, 4, 1, 1, 4, 1, 1, 5, 8, 1, 4, 0], [1, 1, 1, 6, 0, 6, 1, 1, 1, 1, 1, 8, 1, 1, 4, 4], [1, 9, 1, 1, 9, 1, 1, 1, 1, 1, 1, 5, 1, 6, 0, 0], [6, 1, 7, 5, 9, 1, 7, 1, 1, 1, 4, 6, 1, 2, 8, 0], [5, 1, 1, 1, 1, 1, 2, 4, 8, 1, 1, 3, 1, 9, 0, 8], [1, 1, 1, 2, 4, 1, 1, 1, 1, 7, 1, 1, 1, 1, 5, 0], [6, 9, 1, 1, 7, 7, 1, 1, 2, 1, 1, 9, 1, 1, 3, 0], [1, 8, 3, 1, 1, 9, 7, 1, 2, 7, 2, 0, 8, 9, 0, 0]]}, "9f236235": {"instruction": "1. Divide the input grid into non-overlapping square blocks, where each block is separated by a border of cells containing the color 8. Each block is surrounded by color 8 borders on all sides.\n2. Identify and extract each central square \"block\" (the area bounded by 8s, ignoring the borders themselves) from the input grid, preserving their original positions relative to one another. Each block contains its own unique pattern of non-8 colors and possibly 0s.\n3. From each extracted block, form a single smaller output grid by stacking or arranging the smaller, internal regions from each block diagonally from the top-right to the bottom-left. The order follows: the top region in the input appears in the top-right of the output, the middle region to the middle, and the bottom region to the bottom-left. If the number of blocks is more than can fit in the output\u2019s diagonal size, only the number that matches the output\u2019s dimensions is used.\n4. Remove all separating 8 borders and all 8s within the blocks during this extraction. Only keep the relevant non-8 content for each region.\n5. The final output grid is an N \u00d7 N (for these samples, 5 \u00d7 5 will yield 5 \u00d7 5, etc., but you must match the required size based on block count and visible pattern). Place each region\u2019s content so that each block forms a diagonal band, with the value-filled region in its respective \u201cdiagonal\u201d corner and 0s elsewhere.", "test_input": [[1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 8, 3, 3, 3, 3, 3, 8, 1, 1, 1, 1, 1, 8, 1, 1, 1, 1, 1], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 2, 2, 2, 2, 2], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 3, 3, 3, 3, 3, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0]], "predicted_output": "[[1, 3, 1, 0, 2],\n [0, 1, 3, 0, 2],\n [0, 0, 1, 3, 2],\n [0, 0, 0, 1, 3],\n [0, 0, 0, 0, 1]]", "expected_output": [[1, 1, 3, 1], [0, 0, 3, 0], [2, 0, 3, 2], [0, 0, 3, 0]]}, "9f27f097": {"instruction": "1. Identify the two distinct regions in the grid that contain non-background patterns: one in the upper left and one in the lower center portion of the grid. The background color is the value that fills most of the grid (here, 8).\n2. For the upper region, find the smallest rectangle that encloses all non-background cells (i.e., the cluster with colors 1 and 2 in the upper left).\n3. For the lower region, find the smallest rectangle that encloses all non-background cells (i.e., the cluster of 0's in the lower center).\n4. \"Copy\" the upper non-background rectangle pattern, but instead of overwriting, \"transplant\" it into the lower non-background rectangle's position, preserving the relative pattern but replacing 0's in the lower region with the values from the upper region's rectangle (1's and 2's).\n5. The lower rectangle keeps its shape and location, but its cell values are replaced, cell-by-cell and row-by-row, with those from the upper rectangle; any excess cells in either rectangle are ignored (they are always the same shape).\n6. The rest of the grid (background and upper region) remains unchanged.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 2, 1, 8, 8, 8, 8, 8, 8, 8], [8, 1, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8],\n [8, 1, 1, 2, 1, 8, 8, 8, 8, 8, 8, 8],\n [8, 1, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8],\n [8, 8, 1, 1, 2, 1, 8, 8, 8, 8, 8, 8],\n [8, 8, 1, 2, 2, 2, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 1, 2, 8, 8, 8, 8, 8, 8, 8], [8, 1, 1, 2, 1, 8, 8, 8, 8, 8, 8, 8], [8, 1, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 2, 1, 1, 1, 8, 8, 8, 8, 8, 8], [8, 8, 1, 2, 1, 1, 8, 8, 8, 8, 8, 8], [8, 8, 2, 2, 2, 1, 8, 8, 8, 8, 8, 8]]}, "9f41bd9c": {"instruction": "1. Identify the block of rows at the top of the grid that are filled entirely with 1s. Leave these rows unchanged.\n2. Identify the block of rows, starting immediately after the all-1s rows, that contain repeating patterns of 5s and 1s on the left, and 1s on the right. \n3. Move this block horizontally as far right as possible within the boundaries of the original grid, such that the leftmost non-1 element in each row is now in the rightmost columns, with the pattern preserved.\n4. All grid cells that do not belong to this shifted block or the initial all-1 rows should be set to 1.\n5. Identify the block of bottom rows consisting entirely of 6s. Leave these rows unchanged.", "test_input": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]], "predicted_output": "[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]]", "expected_output": [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 5, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1], [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]]}, "9f5f939b": {"instruction": "1. For each row in the grid, search for sequences where two '1' cells are immediately adjacent horizontally, and the rest are '8's between or around them.\n2. Within each such row, if there exists another set of adjacent '1's in the same row\u2014such that there are only '8's in the columns between the two sets (no other colors nor '1's in between)\u2014then:\n    a. Find the region of '8's that lies strictly between the rightmost '1' of the left pair and the leftmost '1' of the right pair.\n    b. Find the central column of this region (if even length, choose the leftmost of the two central columns).\n    c. In this row, replace the cell in the central column of this region with a '4'.\n3. Do not modify any other cells in the grid.", "test_input": [[1, 1, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8], [8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8], [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 1, 8, 8, 8, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [1, 1, 8, 8, 8, 1, 1, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 1], [8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 1], [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 1, 1, 8, 8, 8, 1, 1, 8, 8, 8, 8, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8], [1, 1, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8], [8, 8, 8, 1, 8, 8, 1, 1, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], [1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], [8, 8, 8, 1, 1, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 1, 8]], "predicted_output": "[[1, 1, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8],\n [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 1, 8],\n [8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 1, 8, 8, 8, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [1, 1, 8, 8, 8, 1, 1, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 1],\n [8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 1],\n [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 8, 1, 1, 8, 8, 8, 1, 1, 8, 8, 8, 8, 1, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8],\n [1, 1, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8],\n [8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 1, 4, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8],\n [8, 8, 8, 1, 8, 8, 1, 1, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8],\n [1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 1, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 1, 8]]", "expected_output": [[1, 1, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8], [8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8], [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 1, 8, 4, 8, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [1, 1, 8, 4, 8, 1, 1, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 1], [8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 1], [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 1, 1, 8, 4, 8, 1, 1, 8, 8, 8, 8, 1, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 8, 1, 8, 1, 8, 8, 8, 1, 8, 8, 8, 1, 8], [1, 1, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 4, 8, 1, 1, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8], [8, 8, 8, 1, 8, 8, 1, 1, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], [1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 1, 8, 8, 8, 8, 8], [8, 8, 8, 1, 1, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 1, 8]]}, "9f669b64": {"instruction": "1. Identify the non-background colored blocks (distinct from the main background color) forming a shape along the left edge of the grid (in this case, color 2), and the non-background colored blocks forming a shape along the right edge (in this case, color 8). Also, identify any blocks within the grid surrounded mostly by background (in this case, color 9).\n2. Move the entire left-edge shape down by one row and right by one column.\n3. Move the entire right-edge shape up by one row and left by one column.\n4. Move the internal shape (in this case, the color 9 blocks) up and left (diagonally) by two rows and two columns.\n5. Fill the areas vacated by these blocks with the background color (in this case, color 7).\n6. Keep all other blocks (including background) unchanged.", "test_input": [[2, 7, 7, 7, 7, 7, 7, 7, 7, 7], [2, 2, 7, 7, 7, 7, 7, 7, 8, 8], [2, 2, 2, 2, 9, 9, 7, 7, 8, 8], [2, 2, 2, 2, 9, 9, 7, 7, 8, 8], [2, 2, 7, 7, 7, 7, 7, 7, 8, 8], [2, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 9, 9, 7, 7, 8, 7],\n [7, 2, 7, 7, 7, 7, 7, 8, 8, 7],\n [7, 2, 2, 9, 9, 7, 8, 8, 7, 7],\n [7, 2, 2, 7, 7, 7, 7, 7, 7, 7],\n [7, 2, 2, 7, 7, 7, 7, 7, 7, 7],\n [7, 2, 2, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]", "expected_output": [[2, 7, 7, 7, 7, 7, 7, 7, 8, 8], [2, 2, 7, 7, 7, 7, 7, 7, 8, 8], [2, 2, 2, 2, 7, 7, 7, 7, 9, 9], [2, 2, 2, 2, 7, 7, 7, 7, 9, 9], [2, 2, 7, 7, 7, 7, 7, 7, 8, 8], [2, 7, 7, 7, 7, 7, 7, 7, 8, 8], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]]}, "9f8de559": {"instruction": "1. Locate the rightmost column containing different edge values (distinct from the background or primary structure)\u2014here, column 13 (last column).\n2. For each row (except the last two, if they follow the given boundary pattern), check if the cell in column 12 (next to the last column) is part of the central shape (i.e., a '7' contiguous with the main block of '7's).\n3. If so, change the cell at (row, column 12) from its value (e.g., '7', '6') to match the value in column 13 of the same row, only if the primary structure reaches column 12 in that row.\n4. In this grid, specifically:\n   - For rows 4 through 12, if cell (row,12) is 7 or 6, and if the adjacent right (column 13) is '9', then set cell (row,12) to '9'.\n   - Otherwise, leave cell (row,12) unchanged.\n5. Leave all other grid cells unchanged.", "test_input": [[8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 9]], "predicted_output": "[[8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9],\n [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 9, 9],\n [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 6, 9, 7, 9],\n [8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 9, 7, 7, 9],\n [8, 8, 7, 7, 7, 7, 7, 7, 6, 9, 7, 7, 7, 9],\n [8, 8, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 9],\n [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9],\n [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9],\n [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 9],\n [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 9]]", "expected_output": [[8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9], [5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 9, 5, 5, 9], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 9]]}, "a04b2602": {"instruction": "1. For every contiguous block of 3s that is at least 3 cells long and not interrupted by 2s or 0s, transform the inner area of this block as follows:\n   a. Any span of three or more consecutive 3s bordered by a non-3 on each side (or by the grid boundary) is replaced so that the leftmost and rightmost 3 within the block stay as 3. All interior 3s (i.e., not at the ends) become 1.\n   b. Exception: If a 2 exists within this horizontal block of 3s, leave it as is, and apply the rule recursively to each side of the 2.\n2. Apply this rule row-by-row on all rows in the grid.\n3. In any row, if a 2 is bordered immediately on both sides by 3s, replace only the 3s immediately before and after the 2 with 1s (i.e., do not convert the 2; only 3s on each side if possible), following Rule 1a/1b logic.\n4. Do not change 0s or 2s except as instructed above.", "test_input": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2], [0, 0, 0, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 3, 2, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0], [0, 0, 0, 3, 3, 2, 2, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 3, 2, 2, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0],\n [0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 3, 0, 0, 3, 1, 1, 1, 3, 2, 3, 1, 1, 1, 1, 3, 0, 0],\n [0, 0, 0, 3, 1, 1, 1, 1, 1, 2, 3, 0, 0, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 3, 0, 2],\n [0, 0, 0, 3, 1, 1, 2, 3, 1, 1, 3, 0, 2, 3, 1, 2, 3, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0],\n [0, 0, 0, 2, 3, 1, 1, 1, 1, 1, 3, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0],\n [0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 3, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0],\n [0, 0, 0, 3, 1, 1, 2, 3, 1, 1, 3, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0],\n [0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 3, 0, 0, 3, 1, 2, 3, 1, 1, 1, 1, 1, 1, 3, 2, 0, 0],\n [0, 0, 0, 3, 1, 2, 2, 3, 1, 1, 3, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0],\n [0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0],\n [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 3, 2, 3, 2, 3, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 3, 2, 2, 3, 1, 1, 1, 3, 0, 0, 0, 2, 0]]", "expected_output": [[0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 3, 1, 1, 1, 1, 2, 1, 0, 3, 1, 1, 2, 1, 1, 1, 3, 3, 3, 3, 3, 0, 2], [0, 0, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1, 2, 3, 1, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 1, 2, 1, 3, 1, 1, 1, 3, 3, 0, 0, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [0, 0, 0, 3, 3, 1, 2, 1, 3, 3, 3, 0, 0, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 0], [0, 0, 0, 3, 1, 1, 1, 1, 3, 3, 3, 0, 0, 3, 1, 2, 1, 3, 3, 3, 3, 3, 3, 1, 2, 1, 0], [0, 0, 0, 3, 1, 2, 2, 1, 3, 3, 3, 0, 0, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 1, 1, 0], [0, 0, 0, 3, 1, 1, 1, 1, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 3, 3, 3, 3, 0, 0, 0, 2, 0]]}, "a096bf4d": {"instruction": "1. For each 5-row-by-5-column block (excluding borders of zeros), repeat the following steps:\n2. Within each block, locate all cells containing the color 2.\n3. If any color 3 occurs adjacent (horizontally or vertically) to two cells containing color 2 (meaning: for a 3 at (r,c), check if both (r-1,c) and (r,c-1) or both (r+1,c) and (r,c+1) are color 2), change the right-adjacent color 2 in the block (i.e., (r,c+1)), if it exists, to color 3.\n4. For each cell containing color 8 in the block, if any left-adjacent cell in the block contains color 5, change the left-adjacent color 5 to color 8.\n5. For each row within the block, if a color 6 occurs directly above a cell containing color 2, change the color 2 below it to color 6.\n6. Leave all other cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 3, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0], [0, 5, 5, 8, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0], [0, 5, 5, 2, 5, 0, 5, 5, 4, 5, 0, 5, 5, 2, 5, 0, 5, 5, 4, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0], [0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0], [0, 5, 5, 8, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 8, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 6, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 3, 5, 0, 5, 6, 2, 5, 0, 5, 2, 3, 5, 0], [0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 3, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0],\n [0, 5, 5, 8, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0],\n [0, 8, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0],\n [0, 5, 5, 2, 5, 0, 5, 5, 4, 5, 0, 5, 5, 2, 5, 0, 5, 5, 4, 5, 0, 5, 5, 2, 5, 0],\n [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0],\n [0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0],\n [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0],\n [0, 5, 5, 8, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 8, 5, 0, 5, 5, 2, 5, 0],\n [0, 8, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 8, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 5, 6, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 3, 5, 0, 5, 6, 2, 5, 0, 5, 2, 3, 5, 0],\n [0, 5, 6, 2, 5, 0, 5, 5, 2, 5, 0, 5, 6, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0],\n [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 3, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0], [0, 5, 5, 8, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 3, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0], [0, 5, 5, 8, 5, 0, 5, 5, 4, 5, 0, 5, 5, 4, 5, 0, 5, 5, 4, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 3, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0], [0, 5, 5, 8, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0, 5, 2, 3, 5, 0, 5, 2, 2, 5, 0, 5, 2, 2, 5, 0], [0, 5, 5, 8, 5, 0, 5, 5, 8, 5, 0, 5, 5, 8, 5, 0, 5, 5, 8, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 5, 6, 2, 5, 0, 5, 6, 2, 5, 0, 5, 6, 3, 5, 0, 5, 6, 3, 5, 0, 5, 2, 3, 5, 0], [0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0, 5, 5, 2, 5, 0], [0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "a09f6c25": {"instruction": "1. Identify the background color, which is the most common value in the grid (here, 8). All other colors are \"figure\" pixels.\n2. Locate all contiguous regions (connected groups) of the same non-background color (here, 2). Each such region/cluster will be processed separately.\n3. For each connected region of color X (here, 2), assign a unique value starting from 1 and increasing for each new region. That is, the first region you find becomes 1, the next one in scan order becomes 3, the next 1 again, the next 3 again, alternating (mirroring what is seen in the provided examples: the first alternates between 1 and 3, i.e., odd regions become 1, even become 3).\n4. Replace all pixels belonging to the N-th found region with value 1 if N is odd and with value 3 if N is even.\n5. Leave all background pixels unchanged.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8], [8, 8, 8, 2, 8, 2, 8, 8, 2, 2, 2, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 2, 2, 2, 2, 2, 2, 2, 8, 2, 2, 2, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 2, 8, 2, 8, 8, 2, 2, 2, 8, 2, 8, 8, 8, 8, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 8, 2, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 2, 2, 2, 2, 2, 8, 8, 8, 2, 8, 8, 8, 8, 2, 2, 2, 8, 2, 2, 2, 8, 8, 8, 8], [8, 8, 8, 2, 2, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 2, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 8, 8, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 2, 2, 2, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 2, 8, 8, 2, 2, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8], [8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8, 8, 8], [8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 2, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8], [8, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8],\n [8, 8, 8, 1, 8, 1, 8, 8, 3, 3, 3, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 1, 1, 1, 1, 1, 1, 1, 8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 8, 1, 8, 8, 3, 3, 3, 8, 1, 8, 8, 8, 8, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 3, 3, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 3, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 1, 8, 8, 8, 8, 8],\n [8, 8, 8, 3, 3, 3, 3, 3, 8, 8, 8, 1, 8, 8, 8, 8, 3, 3, 3, 8, 1, 1, 1, 8, 8, 8, 8],\n [8, 8, 8, 1, 1, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 3, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 3, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 1, 1, 1, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 3, 8, 8, 1, 1, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8, 8, 8, 8, 8],\n [8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 3, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 3, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 3, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8],\n [8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 1, 8, 8, 1, 1, 1, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 1, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 1, 8, 8, 1, 1, 1, 8, 1, 8, 8, 8, 8, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 8, 3, 3, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 8], [8, 8, 8, 8, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 8], [8, 8, 8, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 8, 3, 3, 3, 8, 8, 8, 8], [8, 8, 8, 6, 6, 8, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 8], [8, 8, 8, 8, 6, 8, 8, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 6, 6, 6, 8, 8, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 6, 8, 8, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 3, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 3, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 8, 3, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]}, "a1570a43": {"instruction": "1. Preserve all cells containing the value 3 in their original positions.\n2. For each row, identify the segments of contiguous cells containing the value 2.\n3. For each such segment, shift it to the rightmost possible position within the row, preserving its length and sequence, so that there are no non-zero cells to the right of the segment and all other cells in the row are set to 0 (except for cells with 3).\n4. All cells not affected by the above steps (i.e., not part of the shifted 2-segments or not a 3) are set to 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 3, 0], [2, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 0, 0, 0, 0, 0], [2, 2, 2, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0],\n [3, 0, 0, 0, 0, 0, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 2, 2],\n [0, 0, 0, 0, 0, 2, 2, 2],\n [0, 0, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 2],\n [3, 0, 0, 0, 0, 0, 3, 0],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 3, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]}, "a1aa0c1e": {"instruction": "1. Identify the five key blocks in the grid; each block is a set of contiguous rows where a single color dominates (e.g., rows of all 3s or 4s), separated by empty rows or rows with sparse nonzero elements. The last row (all 9s) is the final key block.\n2. For each of the first four key blocks, extract the representative row that contains only that color (e.g., [3,3,...], [4,4,...], etc.).\n3. For each of these, form a shortened row for the output grid as follows:\n    a. For the key block with solid color (e.g., all 3s in the first block, all 4s in the second, etc.), take the first two nonzero elements in that row.\n    b. For each block, search the \"decorated\" rows beneath the solid color row (e.g., those with the same color, but only in a specific slim pattern), and collect their nonzero elements (ignoring zeros), filling the output row left-to-right.\n    c. Pad the row with zeros so that each output row has four elements before adding the last item.\n4. For the fifth column in each output row, place the distinctive nonzero element from the vertical \"decoration\" column in the block above the final solid color row (e.g., the number from the column where, in the bottom-most decorated row, there is a unique nonzero color other than the main color of the block. If absent, use 0).\n5. For the fourth column in each output row, always use the value '9' (from the final row of the input grid, which is always all 9s).\n6. Construct the output grid consisting of three rows: one for each of the top three colored blocks in order as they appear in the input (top-to-bottom).", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]], "predicted_output": "[[3, 3, 3, 9, 3],\n [4, 4, 4, 9, 4],\n [2, 2, 2, 9, 5]]", "expected_output": [[3, 3, 0, 9, 0], [4, 0, 0, 9, 5], [2, 2, 2, 9, 0]]}, "a2d730bd": {"instruction": "1. For each region of non-background color forming a rectangle or bar (i.e., a contiguous region of unique color different from the majority color, which is not isolated pixels), expand the region *horizontally and/or vertically* by copying the pattern and interleaving additional bars next to it, following the output patterns in the examples:\n\n   - For existing horizontal bars: Add extra bars to the right and/or left so rows of bars become wider and contiguous, extending as shown in the outputs.\n   - For existing vertical bars: Add extra bars above and/or below, similarly extending as in the outputs.\n   - If there are isolated colored cells in a row or column, extend them to create a visually denser bar/motif matching the motifs shown in outputs.\n\n2. For each isolated colored cell (a single different color surrounded by the background), add new colored cells in adjacent empty spaces\u2014horizontally, vertically, or diagonally\u2014so that they follow the expansion logic seen in the examples: patterns replicate and grow outward, connecting to form thicker or fully filled rectangular or L/T/cross shapes.\n\n3. If groups of colored cells form a recognizable motif (e.g., a line or cross), expand that motif in all directions, filling gaps to make the pattern bolder and thicker.\n\n4. Repeat the three steps above for every uniquely colored motif in the grid, and do not alter the color or location of background cells except where bars are being extended.", "test_input": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]], "predicted_output": "[[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4],\n [4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4],\n [4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4],\n [4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4],\n [4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4],\n [4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],\n [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]", "expected_output": [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 4, 4, 4, 4, 4], [4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4], [4, 4, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]}, "a2fd1cf0": {"instruction": "1. Locate the cell containing the value 2 (let's call its position (r2, c2)) and the cell containing the value 3 (at (r3, c3)).\n2. Identify the horizontal or vertical alignment: 2 and 3 are in the same column if c2 == c3, or in the same row if r2 == r3; otherwise, they are offset.\n3. Starting from the 2's position, fill every cell along the direct path (either right, left, up, or down) toward the 3's position with the value 8, stopping before you reach the cell containing the 3 or the 2. This creates a solid \"bar\" of 8s from the 2 toward the 3, only passing through the cells that align directly without skipping rows or columns.\n4. Now, for each row or column between the 2 and the 3, depending on alignment, fill the cells after the end of the initial bar with 8s, extending perpendicularly all the way to the edge of the grid in that direction. If the alignment is not strictly horizontal or vertical, extend a single column or row of 8s from the intersection point of the initial bar and the 3\u2019s row or column, reaching the position of the 3.\n5. Leave the positions of the original 2 and 3 unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "a3325580": {"instruction": "1. Identify all contiguous nonzero blocks of the same color in the input grid. For each distinct color, select the largest contiguous block (if blocks are equally large, select any one).\n2. Extract the unique nonzero colors from these largest blocks and sort them in increasing order of their leftmost column index in the grid.\n3. For each of these colors, form a column in the output grid, in the order found in step 2.\n4. The height of the output grid is set to be equal to the maximum height among all the extracted blocks of different colors.\n5. Fill each column with its assigned color, for as many rows as the output grid has, starting from the top. If a color occurred fewer times than the maximum height, fill the rest of the column with its color anyway.\n6. The result is a grid where each column contains a single color, repeated down the rows, with columns arranged left to right according to their leftmost appearance in the input.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 5, 0, 0, 0, 0, 1, 1, 1], [0, 5, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 9, 9, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 2, 2, 0, 0, 0, 0, 0], [8, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[5, 8, 2, 1, 9],\n [5, 8, 2, 1, 9],\n [5, 8, 2, 1, 9],\n [5, 8, 2, 1, 9]]", "expected_output": [[5, 2, 1], [5, 2, 1], [5, 2, 1], [5, 2, 1]]}, "a3f84088": {"instruction": "1. Identify the region enclosed by a continuous border of cells with value 5. This typically forms a rectangle\u2014possibly with rounded or indented corners\u2014in the grid.\n2. Replace every cell within this 5-bordered, non-border region (i.e. any cell inside the boundary defined by 5s, currently 0) with the value 2, except the border cells themselves which remain 5.\n3. For the next layer inside the border, replace cells according to the following rule:  \n    - Any cell not on the direct inner square (first inner ring from the border), but remaining 2 in step 2 and surrounded on two opposite sides by border (5), is replaced with 5 to create internal \"decorative\" lines (these form recursive smaller \u201crectangles\u201d or \u201crings\u201d inside the region).\n4. Continue this process for subsequent \"inner\" rings:\n    - The next available square (or ring) inside the newly created 5 ring, fill with 2s.\n    - After each newly filled 2 ring, surround it on the next available inner ring with 5s, creating a nested border/ring pattern.\n    - Repeat this alternation until the region is completely filled.\n5. When there is no space left for another internal ring (i.e., at the shape's narrowest part), fill any remaining interior cells with 2.\n6. Leave all cells outside the initial border of 5 (i.e., the entire background) unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0],\n [0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 2, 2, 2, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 5, 5, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 5, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 5, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 5, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 5, 5, 0, 0, 0, 0],\n [0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 0, 0, 0, 0],\n [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 2, 2, 2, 2, 2, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 5, 5, 5, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 5, 5, 5, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 2, 2, 2, 2, 2, 2, 2, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 0, 0, 0, 0], [0, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "a406ac07": {"instruction": "1. For each unique nonzero value (color) that appears in the last row (bottom row) of the grid, identify all positions in that row that contain this value. These contiguous groups in the bottom row define the \"base\" of each block for that color.\n2. For each block base found in step 1, identify all grid cells in the same column(s) above it that share the same color value and form a contiguous vertical line up to (but not passing) the first zero or differing value.\n3. For each color block (determined by its base in the bottom row), copy the block's color value into all cells that define a minimal bounding rectangle covering both the base in the last row and the vertical column blocks above, filling remaining cells within this rectangle with zeros.\n4. Ensure that any cells outside these explicitly defined rectangles remain unchanged from the input (usually zeros).\n5. Copy the last row from the input grid directly into the output grid without modification.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 0, 0, 0, 9], [0, 0, 0, 0, 0, 0, 0, 0, 0, 7], [3, 3, 4, 6, 6, 6, 9, 9, 7, 7]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 4, 6, 6, 6, 9, 9, 7, 7],\n [3, 3, 4, 6, 6, 6, 9, 9, 7, 7]]", "expected_output": [[3, 3, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 0, 0, 0, 0, 0, 0, 0, 3], [3, 3, 0, 0, 0, 0, 0, 0, 0, 3], [0, 0, 4, 0, 0, 0, 0, 0, 0, 4], [0, 0, 4, 0, 0, 0, 0, 0, 0, 4], [0, 0, 0, 6, 6, 6, 0, 0, 0, 6], [0, 0, 0, 6, 6, 6, 0, 0, 0, 6], [0, 0, 0, 0, 0, 0, 9, 9, 0, 9], [0, 0, 0, 0, 0, 0, 0, 0, 7, 7], [3, 3, 4, 6, 6, 6, 9, 9, 7, 7]]}, "a416b8f3": {"instruction": "1. For each row in the input grid, create a new row by repeating the original row twice horizontally (i.e., concatenate the row to itself).\n2. Replace each original row with its horizontally doubled version to form the output grid.", "test_input": [[4, 0, 0, 0], [4, 5, 0, 0], [0, 5, 6, 0], [6, 6, 1, 0], [0, 0, 0, 1]], "predicted_output": "[[4, 0, 0, 0, 4, 0, 0, 0],\n [4, 5, 0, 0, 4, 5, 0, 0],\n [0, 5, 6, 0, 0, 5, 6, 0],\n [6, 6, 1, 0, 6, 6, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 1]]", "expected_output": [[4, 0, 0, 0, 4, 0, 0, 0], [4, 5, 0, 0, 4, 5, 0, 0], [0, 5, 6, 0, 0, 5, 6, 0], [6, 6, 1, 0, 6, 6, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1]]}, "a416fc5b": {"instruction": "1. Identify all subgrids that are 3x3 in size, located above and below the fully filled horizontal lines of 6s (these act as dividers). There can be multiple such 3x3 blocks in the grid.\n2. For each 3x3 block, if the center value is 7 and the four diagonal positions are also 7, check the non-diagonal centers of the block:\n    a. For the leftmost column of the block, if a non-corner, non-center value is 7, change it to 5.\n    b. For the rightmost column of the block, if a non-corner, non-center value is 7, change it to 8.\n    c. For the center cell in the middle row, if it\u2019s 7, leave it as 7.\n3. Leave all other values in the grid unchanged.", "test_input": [[7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7], [7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7], [7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 6, 7, 2, 7, 6, 7, 2, 7], [7, 7, 7, 6, 2, 7, 2, 6, 2, 7, 2], [7, 7, 7, 6, 7, 2, 7, 6, 7, 2, 7], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7], [7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7], [7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7]], "predicted_output": "[[7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7],\n [5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8],\n [7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [7, 7, 7, 6, 7, 2, 7, 6, 7, 2, 7],\n [5, 7, 8, 6, 2, 7, 2, 6, 2, 7, 2],\n [7, 7, 7, 6, 7, 2, 7, 6, 7, 2, 7],\n [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\n [7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7],\n [5, 7, 8, 6, 5, 7, 8, 6, 5, 7, 8],\n [7, 7, 7, 6, 7, 7, 7, 6, 7, 7, 7]]", "expected_output": [[7, 8, 7, 6, 7, 7, 7, 6, 7, 7, 7], [8, 7, 8, 6, 7, 7, 7, 6, 7, 7, 7], [7, 8, 7, 6, 7, 7, 7, 6, 7, 7, 7], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 7, 7, 6, 7, 2, 7, 6, 7, 2, 7], [7, 7, 7, 6, 2, 7, 2, 6, 2, 7, 2], [7, 7, 7, 6, 7, 2, 7, 6, 7, 2, 7], [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], [7, 5, 7, 6, 7, 7, 7, 6, 7, 7, 7], [5, 7, 5, 6, 7, 7, 7, 6, 7, 7, 7], [7, 5, 7, 6, 7, 7, 7, 6, 7, 7, 7]]}, "a48eeaf7": {"instruction": "1. Remove all cells containing the value 5 from their current positions in the grid.\n2. For each original position where a 5 was removed, move it exactly two rows down and two columns to the left. If the resulting position is within the grid's bounds and is currently empty (0), place the 5 there.\n3. If multiple 5s would be placed in the same cell, only place one 5 in that cell.\n4. Leave all other cells (including those with 2s) unchanged.", "test_input": [[0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 5, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 0, 0, 0, 0, 0, 0],\n [0, 0, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 5, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 5, 0, 0, 0, 0, 0], [0, 0, 2, 2, 5, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "a5313dff": {"instruction": "1. Identify all closed rectangular regions that are completely enclosed by cells with the value 2. These regions are bordered on all sides by continuous \"walls\" of 2s, and are entirely surrounded (horizontally and vertically) by 2-valued cells.\n2. For each such enclosed region, fill every cell inside (i.e., every non-border cell that is surrounded on all four sides by 2s) with the value 1, replacing their original value (which is typically 0).\n3. Leave all cells that are part of the 2-valued boundary, as well as all other non-enclosed regions, unchanged.", "test_input": [[0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 2, 0, 0, 0, 2, 0, 0], [0, 0, 2, 0, 0, 0, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0], [2, 0, 0, 0, 2, 0, 0, 0, 0], [2, 0, 2, 0, 2, 0, 0, 0, 0], [2, 0, 0, 0, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 2, 2, 2, 2, 2, 0, 0],\n [0, 0, 2, 1, 1, 1, 2, 0, 0],\n [0, 0, 2, 1, 1, 1, 2, 0, 0],\n [2, 2, 2, 2, 2, 2, 2, 0, 0],\n [2, 0, 0, 0, 2, 0, 0, 0, 0],\n [2, 0, 2, 0, 2, 0, 0, 0, 0],\n [2, 0, 0, 0, 2, 2, 2, 2, 2],\n [2, 2, 2, 2, 2, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 0, 0, 0, 0]]", "expected_output": [[0, 0, 2, 2, 2, 2, 2, 0, 0], [0, 0, 2, 1, 1, 1, 2, 0, 0], [0, 0, 2, 1, 1, 1, 2, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0], [2, 1, 1, 1, 2, 0, 0, 0, 0], [2, 1, 2, 1, 2, 0, 0, 0, 0], [2, 1, 1, 1, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0, 0]]}, "a57f2f04": {"instruction": "1. Identify all regions in the grid that are not filled with the background color (8). Treat each such region as a separate \"block\" to be transformed into a repeating tile pattern.\n2. For each block, analyze the arrangement of colors inside its non-background bounding box. The transformation pattern alternates (or \"tiles\") the colors and shapes from the original block following a 3-row tiling, then repeats that tile for the height of the region, filling it out.\n   - For \"block type A\" (first seen in the upper left in train examples, involving 1 and 0): Tile these 3 rows downwards in the block, alternating the odd/even rows such that:  \n     - Row 1: All primary color (ex: all 1's),  \n     - Row 2: Alternating primary and secondary color,   \n     - Row 3: All primary color,\n     - Then repeat this 3-row motif to fill the full block vertically.\n   - For \"block type B\" (train: 0, 2, where there are stripes of 2's in 0):  \n     - Row 1: Alternating primary/secondary color,  \n     - Row 2: All primary color,  \n     - Row 3: All secondary color,  \n     - Repeat to fill the block.\n   - For \"block type C\" (train: 4, 0 blocks):  \n     - Row 1: All primary color,  \n     - Row 2: Alternating primary and secondary color,  \n     - Row 3: Alternating secondary and primary color (shifted by 1),  \n     - Repeat to fill the block.\n   - For \"block type D\" (train: 3, 0 blocks):  \n     - Row 1: Alternating secondary and primary color,\n     - Row 2: Alternating primary and secondary color,\n     - Row 3: All secondary color,\n     - Repeat as needed.\n3. When constructing each output region, maintain the original position of the block within the grid and ensure the output region has the same bounding box (size and placement) as in the input.\n4. Any background (8) cells outside these blocks remain unchanged.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 0, 0, 1, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 0, 0, 1, 1, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 4, 0, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 0, 0, 0, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 3, 0, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 0, 3, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 0, 0, 0, 3, 3, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 0, 1, 0, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 4, 4, 0, 0, 0, 0, 8, 8, 8],\n [8, 8, 8, 1, 0, 1, 0, 1, 0, 8, 8, 8, 8, 0, 4, 0, 4, 0, 4, 8, 8, 8],\n [8, 8, 8, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 0, 0, 4, 4, 0, 0, 8, 8, 8],\n [8, 8, 8, 1, 0, 1, 0, 1, 0, 8, 8, 8, 8, 4, 4, 0, 0, 0, 0, 8, 8, 8],\n [8, 8, 8, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 0, 4, 0, 4, 0, 4, 8, 8, 8],\n [8, 8, 8, 1, 0, 1, 0, 1, 0, 8, 8, 8, 8, 0, 0, 4, 4, 0, 0, 8, 8, 8],\n [8, 8, 8, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 4, 4, 0, 0, 0, 0, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 4, 0, 4, 0, 4, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 3, 0, 3, 0, 3, 0, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 0, 3, 0, 3, 0, 3, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 1, 0, 0, 1, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 0, 1, 1, 0, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 1, 0, 1, 1, 0, 8, 8, 8, 8, 4, 0, 4, 0, 4, 0, 8, 8, 8], [8, 8, 8, 0, 1, 0, 0, 1, 0, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 8, 8, 8], [8, 8, 8, 1, 0, 1, 1, 0, 1, 8, 8, 8, 8, 4, 0, 4, 0, 4, 0, 8, 8, 8], [8, 8, 8, 1, 1, 0, 1, 1, 0, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 8, 8, 8], [8, 8, 8, 0, 1, 0, 0, 1, 0, 8, 8, 8, 8, 4, 0, 4, 0, 4, 0, 8, 8, 8], [8, 8, 8, 1, 0, 1, 1, 0, 1, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 8, 8, 8], [8, 8, 8, 1, 1, 0, 1, 1, 0, 8, 8, 8, 8, 4, 0, 4, 0, 4, 0, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 3, 0, 3, 3, 3, 0, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 3, 0, 3, 0, 3, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 3, 3, 0, 3, 3, 3, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 3, 0, 3, 3, 3, 0, 3, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 0, 3, 0, 3, 0, 3, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 3, 3, 0, 3, 3, 3, 0, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]}, "a59b95c0": {"instruction": "1. Take the input grid and make 3 copies of it horizontally, concatenating them side by side to make a new grid that is 3 times wider than the original.\n2. Take the resulting grid and make 3 copies of it vertically, stacking them one below the other, to produce a grid that is 3 times taller than the previous step (and thus 9 tiles of the original grid arranged in a 3x3 tiling).", "test_input": [[4, 3, 2], [2, 1, 4], [3, 1, 2]], "predicted_output": "[[4, 3, 2, 4, 3, 2, 4, 3, 2],\n [2, 1, 4, 2, 1, 4, 2, 1, 4],\n [3, 1, 2, 3, 1, 2, 3, 1, 2],\n [4, 3, 2, 4, 3, 2, 4, 3, 2],\n [2, 1, 4, 2, 1, 4, 2, 1, 4],\n [3, 1, 2, 3, 1, 2, 3, 1, 2],\n [4, 3, 2, 4, 3, 2, 4, 3, 2],\n [2, 1, 4, 2, 1, 4, 2, 1, 4],\n [3, 1, 2, 3, 1, 2, 3, 1, 2]]", "expected_output": [[4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2], [2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4], [3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2], [2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4], [3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2], [2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4], [3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2], [4, 3, 2, 4, 3, 2, 4, 3, 2, 4, 3, 2], [2, 1, 4, 2, 1, 4, 2, 1, 4, 2, 1, 4], [3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2]]}, "a5f85a15": {"instruction": "1. Identify all nonzero numbers in the grid (in these examples, a single unique value, e.g., 6).\n2. For every diagonal from the top-left to bottom-right (main diagonal direction), leave the current values unchanged.\n3. For every diagonal from the top-right to bottom-left (anti-diagonal direction), change the nonzero value to 4, except if the cell is on the main diagonal (i.e., both diagonals cross at that cell); leave such cells unchanged.\n4. Set all other cells to 0 (leave zeros as is).", "test_input": [[0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6], [6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0], [0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 0]], "predicted_output": "[[0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 4],\n [6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 4, 0],\n [0, 6, 0, 0, 0, 0, 6, 0, 0, 4, 0, 0],\n [0, 0, 6, 0, 0, 0, 0, 6, 4, 0, 0, 0],\n [0, 0, 0, 6, 0, 0, 0, 4, 6, 0, 0, 0],\n [0, 0, 0, 0, 6, 0, 4, 0, 0, 6, 0, 0],\n [0, 0, 0, 0, 0, 6, 0, 4, 0, 0, 6, 0],\n [0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 0, 6],\n [0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 0],\n [0, 0, 4, 0, 0, 0, 0, 0, 6, 0, 0, 0],\n [0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0],\n [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]]", "expected_output": [[0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 6, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 6, 0], [0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 4], [6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 6, 0]]}, "a61ba2ce": {"instruction": "1. Identify all nonzero colored regions in the input grid. Ignore all zero (background) pixels.\n2. Find the minimal bounding box that contains all nonzero colored pixels. This is the smallest rectangle (top, left, bottom, right) that covers all regions of interest.\n3. Extract the subgrid within this bounding box, preserving the positions and colors of all nonzero pixels relative to the box.\n4. Divide the subgrid into four equal quadrants (top-left, top-right, bottom-left, bottom-right), each quadrant either 2x2 or 3x3 (depending on the cropped shape; in examples, 2x2 for 4x4 output).\n5. Rearrange the four quadrants as follows:\n    - Move the top-left quadrant to the top-right position.\n    - Move the top-right quadrant to the top-left position.\n    - Move the bottom-left quadrant to the bottom-right position.\n    - Move the bottom-right quadrant to the bottom-left position.\n6. Output the resulting grid after the rearrangement; the grid should be a compact square (e.g., 4x4) containing all nonzero colored regions, with positions swapped as above.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 8, 8, 0], [0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[6, 0, 8, 8],\n [6, 0, 0, 8],\n [3, 0, 1, 1],\n [3, 0, 0, 1]]", "expected_output": [[3, 3, 8, 8], [3, 0, 0, 8], [1, 0, 0, 6], [1, 1, 6, 6]]}, "a61f2674": {"instruction": "1. Identify all cells in the grid with the value 5.\n2. For each column, find the topmost 5. Replace all 5s in that column and all cells below it with 0, except:\n   a. In each such column, change the cell in the same row as the topmost 5 to 1.\n   b. For the column that contains the rightmost group of vertical 5s (the group that extends lower than the others), instead of changing the former 5s below the topmost 5 to 0, change them to 2.\n3. Leave all other cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 0, 0, 5, 0], [0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 0, 0, 5, 0, 5, 0, 5, 0], [0, 5, 0, 5, 0, 5, 0, 5, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 1, 0],\n [0, 0, 0, 1, 0, 0, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 2, 0, 0, 0, 0, 0, 1, 0]]}, "a644e277": {"instruction": "1. Identify the largest rectangular subgrid whose borders are composed of the most frequent color in the input grid (in this case, color 2). This subgrid is surrounded by color 2 on all four sides.\n2. Extract the contents of this rectangular subgrid, excluding the color 2 border. The extracted region should include all internal rows and columns bordered by 2, without the border itself.\n3. The result is a smaller grid with the same internal layout as the original, but without the outer border of color 2.", "test_input": [[4, 4, 4, 7, 2, 4, 4, 4, 4, 2, 7, 4, 4, 4, 2, 4, 4, 4, 4, 2], [4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 7, 4, 7, 4, 2, 4, 4, 4, 4, 2], [4, 4, 4, 4, 2, 4, 4, 7, 4, 2, 4, 4, 7, 4, 2, 4, 4, 7, 4, 2], [4, 4, 4, 7, 2, 4, 4, 4, 4, 2, 7, 4, 7, 4, 2, 7, 4, 4, 7, 2], [2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [4, 7, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 4, 7, 2, 4, 4, 4, 4, 2], [4, 4, 4, 4, 2, 7, 7, 4, 4, 2, 4, 4, 4, 4, 2, 4, 7, 4, 7, 2], [4, 4, 7, 4, 2, 4, 7, 4, 4, 2, 4, 7, 4, 4, 2, 7, 4, 4, 4, 2], [4, 4, 7, 4, 2, 4, 4, 4, 7, 2, 4, 4, 4, 4, 2, 4, 7, 4, 4, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [4, 4, 4, 4, 2, 7, 4, 4, 4, 2, 4, 7, 4, 4, 2, 7, 4, 7, 7, 2], [4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 7, 4, 4, 2], [4, 4, 7, 4, 2, 4, 4, 4, 4, 2, 4, 4, 4, 7, 2, 4, 4, 7, 4, 2], [4, 4, 7, 4, 2, 4, 4, 4, 4, 2, 4, 7, 7, 4, 2, 4, 7, 4, 4, 2], [2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 7, 4, 4, 4, 2, 4, 4, 4, 7, 2], [4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 7, 4, 4, 4, 2, 7, 4, 4, 7, 2], [4, 4, 4, 7, 2, 7, 4, 7, 4, 2, 7, 4, 4, 4, 2, 4, 4, 4, 7, 2], [4, 4, 4, 4, 2, 7, 4, 4, 4, 2, 4, 4, 7, 4, 2, 4, 7, 4, 4, 2]], "predicted_output": "[[4, 4, 4, 7, 2, 4, 4, 4, 4, 2, 7, 4, 4, 4],\n [4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 7, 4, 7, 4],\n [4, 4, 4, 4, 2, 4, 4, 7, 4, 2, 4, 4, 7, 4],\n [4, 4, 4, 7, 2, 4, 4, 4, 4, 2, 7, 4, 7, 4],\n [2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2],\n [4, 7, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 4, 7],\n [4, 4, 4, 4, 2, 7, 7, 4, 4, 2, 4, 4, 4, 4],\n [4, 4, 7, 4, 2, 4, 7, 4, 4, 2, 4, 7, 4, 4],\n [4, 4, 7, 4, 2, 4, 4, 4, 7, 2, 4, 4, 4, 4],\n [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n [4, 4, 4, 4, 2, 7, 4, 4, 4, 2, 4, 7, 4, 4],\n [4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 4, 4],\n [4, 4, 7, 4, 2, 4, 4, 4, 4, 2, 4, 4, 4, 7],\n [4, 4, 7, 4, 2, 4, 4, 4, 4, 2, 4, 7, 7, 4]]", "expected_output": [[4, 2, 2, 2, 2, 4], [2, 4, 4, 4, 4, 2], [2, 7, 7, 4, 4, 2], [2, 4, 7, 4, 4, 2], [2, 4, 4, 4, 7, 2], [2, 2, 2, 2, 2, 2], [2, 7, 4, 4, 4, 2], [2, 4, 4, 4, 4, 2], [2, 4, 4, 4, 4, 2], [2, 4, 4, 4, 4, 2], [4, 2, 2, 2, 2, 4]]}, "a64e4611": {"instruction": "1. Identify the leftmost vertical block/stripe of contiguous nonzero numbers in the grid. This block is defined as the set of consecutive columns (from left to right) that contains at least one nonzero value in every row for a certain width, and after which a column of all zeros begins.  \n2. Determine the width and position of this leftmost vertical block by scanning from the leftmost column and, for each column, checking if any cell in that column is nonzero. Stop once you reach a column that contains all zeros for every row; the previous columns (from the first to just before the all-zero column) form the block.  \n3. Move eight columns to the right after this block (i.e., skip over the block and the next eight columns to the right of it). The columns at this new position mark the region to be transformed.\n4. For every row, replace the values in these eight columns (just after the leftmost vertical block, for all rows) with the value 3, regardless of their original content.\n5. Leave all other cells unchanged.", "test_input": [[0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 4, 0, 0, 0], [4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4], [0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 4, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 4], [4, 0, 0, 0, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4], [4, 0, 4, 4, 4, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4, 0], [0, 0, 4, 0, 4, 0, 0, 0, 4, 4, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0], [4, 0, 4, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 4, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0, 4, 4], [0, 4, 0, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4], [4, 4, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 0, 4, 0, 0], [0, 0, 4, 0, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4], [0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 4, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0], [4, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4], [4, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 4, 0, 4, 0, 4, 0, 0, 4, 4], [0, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4], [4, 4, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 0, 4, 0, 4, 4, 4, 0], [4, 0, 4, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 4, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4, 0, 4], [0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 4, 0], [0, 0, 4, 0, 4, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4], [4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4], [0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 4, 0, 0, 0]], "predicted_output": "[[0, 4, 4, 0, 4, 0, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 4, 0, 0, 0],\n [4, 4, 4, 0, 0, 4, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 4],\n [0, 0, 0, 4, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 4, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 4],\n [4, 0, 0, 0, 4, 4, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4],\n [4, 0, 4, 4, 4, 0, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4, 0],\n [0, 0, 4, 0, 4, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0],\n [4, 0, 4, 4, 0, 0, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 0, 0, 4, 0, 0, 4, 4, 0, 4, 4],\n [0, 4, 0, 4, 4, 4, 0, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0],\n [0, 0, 4, 0, 0, 0, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 4, 0, 0, 0, 0, 0, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4],\n [4, 4, 0, 4, 4, 0, 0, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 0, 4, 0, 0],\n [0, 0, 4, 0, 4, 4, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4],\n [0, 4, 4, 0, 4, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0, 4, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0],\n [0, 0, 0, 0, 4, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0],\n [4, 0, 4, 0, 0, 0, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4],\n [4, 0, 4, 4, 0, 0, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 0, 0, 4, 0, 4, 0, 4, 0, 0, 4, 4],\n [0, 4, 4, 4, 4, 0, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 0, 4, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4],\n [4, 4, 0, 0, 0, 0, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 4, 0, 0, 4, 0, 4, 0, 4, 0, 4, 4, 4, 0],\n [4, 0, 4, 0, 0, 0, 4, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4, 0, 4],\n [0, 4, 0, 4, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 4, 0],\n [0, 0, 4, 0, 4, 0, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4],\n [4, 0, 0, 0, 0, 0, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4],\n [0, 0, 0, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 4, 0, 0, 0]]", "expected_output": [[0, 4, 4, 0, 4, 0, 4, 4, 0, 0, 0, 3, 3, 0, 4, 4, 4, 4, 4, 0, 3, 0, 4, 0, 4, 4, 4, 0, 0, 0], [4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 0, 3, 3, 0, 0, 4, 4, 0, 4, 0, 3, 0, 0, 0, 0, 4, 4, 0, 4, 4], [0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 0, 3, 3, 0, 0, 4, 0, 4, 4, 0, 3, 0, 4, 4, 0, 0, 4, 0, 0, 4], [4, 0, 0, 0, 4, 4, 4, 0, 4, 0, 0, 3, 3, 0, 4, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 4], [4, 0, 4, 4, 4, 0, 4, 0, 0, 4, 0, 3, 3, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 4, 0, 4, 4, 0, 4, 0], [0, 0, 4, 0, 4, 0, 0, 0, 4, 4, 0, 3, 3, 0, 4, 0, 0, 4, 0, 0, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0], [4, 0, 4, 4, 0, 0, 4, 0, 0, 4, 0, 3, 3, 0, 4, 0, 4, 4, 0, 0, 3, 0, 4, 0, 0, 4, 4, 0, 4, 4], [0, 4, 0, 4, 4, 4, 0, 4, 0, 0, 0, 3, 3, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 0, 4, 0, 0, 0, 4, 4, 4, 0, 0, 3, 3, 0, 4, 4, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 3, 3, 0, 0, 4, 0, 0, 4, 0, 0, 0, 4, 0, 4, 4, 0, 0, 4, 4], [4, 4, 0, 4, 4, 0, 0, 4, 0, 0, 0, 3, 3, 0, 0, 4, 0, 4, 0, 0, 4, 0, 0, 4, 4, 4, 0, 4, 0, 0], [0, 0, 4, 0, 4, 4, 4, 0, 4, 0, 0, 3, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4], [0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 3, 3, 0, 4, 4, 4, 0, 4, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0], [0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 3, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0], [4, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 3, 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4], [4, 0, 4, 4, 0, 0, 4, 4, 0, 0, 0, 3, 3, 0, 0, 0, 4, 4, 4, 0, 0, 4, 0, 4, 0, 4, 0, 0, 4, 4], [0, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 3, 3, 0, 4, 0, 4, 4, 0, 4, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4], [4, 4, 0, 0, 0, 0, 4, 4, 0, 4, 0, 3, 3, 0, 4, 4, 0, 4, 0, 0, 4, 0, 4, 0, 4, 0, 4, 4, 4, 0], [4, 0, 4, 0, 0, 0, 4, 0, 0, 4, 0, 3, 3, 0, 4, 0, 4, 4, 0, 0, 0, 0, 4, 0, 4, 4, 0, 4, 0, 4], [0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 3, 3, 0, 4, 0, 4, 0, 4, 4, 4, 0, 0, 4, 4, 0, 0, 0, 4, 0], [0, 0, 4, 0, 4, 0, 4, 4, 0, 0, 0, 3, 3, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 4], [4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 4, 4, 4, 0, 4, 4], [0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 3, 3, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 4, 0, 4, 4, 0, 0, 0]]}, "a65b410d": {"instruction": "1. Locate the row containing the sequence of contiguous '2' cells (there will be exactly one such row).\n2. Leave this row and all rows above it unchanged for now.\n3. For rows above the '2' row, fill in new rows as follows:\n   - For each position above the '2' row (starting directly above and proceeding upward), fill a row starting at the first column to the rightmost '2' in the original '2' row, plus an increasing number of columns (1 column more per row upward), with the value '3'. All remaining cells are set to '0'.\n   - This forms a triangle of '3's above and to the right of the '2's, increasing by one cell in width as you move up each row.\n4. Leave the original '2' row unchanged.\n5. For rows below the '2' row, add '1's forming a left-justified triangle, starting immediately below the rightmost '2' and extending down and to the left:\n   - The first row below the '2' row has '1's in as many columns as one less than the length of the '2's segment, starting from the first column.\n   - Each additional row below reduces the number of '1's by one and shifts by one to the left, until only a single '1' remains, then zeros elsewhere.\n6. All remaining cells not specified are set to '0'.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 0],\n [2, 2, 2, 2, 2, 0, 0, 0, 0],\n [1, 1, 1, 1, 0, 0, 0, 0, 0],\n [1, 1, 1, 0, 0, 0, 0, 0, 0],\n [1, 1, 0, 0, 0, 0, 0, 0, 0],\n [1, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[3, 3, 3, 3, 3, 3, 3, 0, 0], [3, 3, 3, 3, 3, 3, 0, 0, 0], [2, 2, 2, 2, 2, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "a680ac02": {"instruction": "1. Identify all distinct, non-overlapping, rectangular color blocks made up of nonzero values, ignoring zeros as background.\n2. For each block, crop the smallest rectangle that contains all nonzero values of the same color (remove surrounding zeros).\n3. For each set of blocks with the same vertical alignment (i.e., blocks that appear grouped into horizontal \"bands,\" separated by clear blank space), order the blocks left to right as they appear in the input grid.\n4. For each horizontal band, concatenate the cropped blocks horizontally (side by side), preserving their original left-to-right order.\n5. Stack each horizontal band below the previous one (top band first, then next band below, etc.), to form a compact grid of blocks where each band is a row.\n6. The resulting grid is the output.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[3, 3, 3, 3, 8, 8, 8, 8],\n [3, 0, 0, 3, 8, 8, 8, 8],\n [3, 0, 0, 3, 8, 8, 8, 8],\n [3, 3, 3, 3, 8, 8, 8, 8],\n [2, 2, 2, 2],\n [2, 0, 0, 2],\n [2, 0, 0, 2],\n [2, 2, 2, 2],\n [4, 4, 4, 4],\n [4, 4, 4, 4],\n [4, 4, 4, 4],\n [4, 4, 4, 4],\n [1, 1, 1, 1],\n [1, 0, 0, 1],\n [1, 0, 0, 1],\n [1, 1, 1, 1]]", "expected_output": [[3, 3, 3, 3], [3, 0, 0, 3], [3, 0, 0, 3], [3, 3, 3, 3], [2, 2, 2, 2], [2, 0, 0, 2], [2, 0, 0, 2], [2, 2, 2, 2], [1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]]}, "a68b268e": {"instruction": "1. Split the input grid into four quadrants by dividing it along the 5th row and 5th column (the center row and column are all '1's and serve as separators).\n2. For each quadrant (starting from top-left, then top-right, then bottom-left, then bottom-right), extract the subgrid of size 4x4 (from the relevant rows and columns), excluding the center row and column.\n   - Top-left: rows 0\u20133, columns 0\u20133.\n   - Top-right: rows 0\u20133, columns 5\u20138.\n   - Bottom-left: rows 5\u20138, columns 0\u20133.\n   - Bottom-right: rows 5\u20138, columns 5\u20138.\n3. For each 4x4 subgrid, rotate it **90 degrees clockwise**.\n4. Assemble the four rotated 4x4 grids into a new 4x4 output grid as follows:\n   - The first row consists of the first rows of each rotated quadrant (in the order: top-left, top-right, bottom-left, bottom-right).\n   - The second row consists of the second rows, and so on, stacking the corresponding rows from each rotated subgrid to form each output row.", "test_input": [[7, 7, 7, 0, 1, 0, 0, 4, 0], [0, 7, 7, 0, 1, 4, 4, 0, 4], [7, 7, 7, 7, 1, 0, 4, 0, 4], [7, 0, 0, 0, 1, 4, 0, 4, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 8, 1, 0, 6, 0, 6], [8, 0, 0, 8, 1, 6, 0, 0, 6], [8, 0, 8, 0, 1, 6, 6, 6, 6], [0, 8, 0, 8, 1, 0, 6, 0, 0]], "predicted_output": "[[7, 4, 8, 6, 0, 0, 8, 0, 7, 0, 0, 6, 4, 4, 6, 6],\n [0, 0, 0, 0, 4, 0, 8, 8, 7, 0, 8, 0, 0, 6, 6, 0],\n [7, 7, 7, 7, 0, 4, 0, 0, 0, 0, 0, 8, 4, 0, 6, 0],\n [7, 7, 0, 0, 4, 0, 8, 0, 6, 8, 8, 8, 0, 0, 6, 0]]", "expected_output": [[7, 7, 7, 8], [4, 7, 7, 4], [7, 7, 7, 7], [7, 8, 4, 8]]}, "a6953f00": {"instruction": "1. Take the top-left 2x2 subgrid from the input grid. That is, extract the first 2 rows and the first 2 columns.\n2. Output this extracted 2x2 subgrid as the final grid.", "test_input": [[3, 6, 0, 2, 8, 7, 9, 2], [6, 7, 5, 6, 3, 7, 3, 4], [8, 0, 8, 6, 3, 0, 8, 3], [8, 8, 5, 9, 0, 1, 6, 7], [7, 6, 9, 7, 8, 7, 4, 3], [7, 3, 8, 8, 3, 7, 6, 1], [3, 7, 0, 7, 7, 0, 5, 1], [8, 7, 5, 2, 7, 7, 6, 6]], "predicted_output": "[[3, 6],\n [6, 7]]", "expected_output": [[9, 2], [3, 4]]}, "a699fb00": {"instruction": "1. For each row in the grid, identify all positions containing the value 1.\n2. In each such row, for every pair of adjacent 1\u2019s (i.e., two 1\u2019s with no other 1 between them), replace the cell(s) between them with the value 2.\n3. All other cells remain unchanged.", "test_input": [[0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 1, 2, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 2, 1, 2, 1, 2, 1, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 2, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 1, 2, 1, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 1, 2, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 1, 2, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 2, 1, 2, 1, 2, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 2, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 2, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "a740d043": {"instruction": "1. Identify all connected regions in the input grid that do not have the background color (the color most frequently found on the border of the grid; in these examples, color 1).\n2. For each such region, determine its bounding rectangle (the smallest rectangle that contains all non-background cells of the region).\n3. Extract the subgrid defined by each bounding rectangle, removing the background (color 1) cells from the borders.\n4. For each extracted rectangle, replace all remaining background cells (color 1) inside the rectangle with 0.\n5. Stack the resulting rectangles vertically in the order they appear from top to bottom in the original grid to create the output grid.", "test_input": [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 2, 1, 1], [1, 1, 2, 3, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], "predicted_output": "[[2, 0],\n [0, 3]]", "expected_output": [[0, 2], [2, 3]]}, "a78176bb": {"instruction": "1. Identify the main diagonal(s) of non-background values. In the input grid, the main diagonal consists of the non-background (nonzero, non-5) numbers moving from top-right towards bottom-left (i.e., each '1' in the pattern (row, column): (0,1), (1,2), (2,3), (3,4), (4,5), etc.).\n2. For each cell along this diagonal containing the main color (here, '1'), create a new diagonal of the same color that passes through the original diagonal position and its reflection(s) across the grid, following the pattern from previous examples:\n   - Each instance of '1' at (i, j) in the input appears in the output at (i, j + k*(n-1)), wrapping around, such that each '1' produces other '1's spaced by the original diagonal's offset.\n   - For this grid, this results in a sequence of diagonals running from top-left to bottom-right, repeatedly, with a horizontal shift equal to the distance between the original diagonals\u2019 starting points.\n3. Fill all other cells with the background color (here, 0). Ignore and remove all '5' values from the input grid; they do not appear in the output.", "test_input": [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 5, 5, 0, 0, 0, 0, 0], [0, 0, 0, 1, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 1, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 1, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 1, 0, 0], [0, 0, 0, 0, 5, 5, 5, 5, 1, 0], [0, 0, 0, 0, 5, 5, 5, 5, 5, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],\n [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],\n [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],\n [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0],\n [0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]]", "expected_output": [[0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]]}, "a79310a0": {"instruction": "1. Locate all cells in the grid with the value 8.\n2. For each cell with value 8, change its value to 2.\n3. Move every 2 (that was originally an 8) one row downward, if that position is within the grid boundaries. Set the original position to 0.\n4. The rest of the grid remains unchanged.", "test_input": [[0, 0, 8, 0, 0], [0, 8, 8, 0, 0], [0, 0, 8, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0],\n [0, 2, 2, 0, 0],\n [0, 0, 2, 0, 0],\n [0, 0, 2, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0], [0, 0, 2, 0, 0], [0, 2, 2, 0, 0], [0, 0, 2, 0, 0], [0, 0, 0, 0, 0]]}, "a834deea": {"instruction": "1. Identify all non-8 connected regions of 0s forming rectangles or blocks (i.e., areas surrounded by 8s, where some positions inside the region may have 8s as \"holes\" or boundaries).\n2. For each such region, relabel the internal 0s according to a fixed spatial/relative pattern:\n   - For a rectangular block with width \u2265 4 and height \u2265 3:\n     a. In every row of the region:\n        - Replace the 0 at the second position (from the left within the block) with 1.\n        - Replace the 0 at the third position with 4.\n        - Replace the 0 at the fourth position with 2.\n     b. In each region, the last row: replace the 0 at the third position from the left with 9.\n     c. In each region, the last row: replace the 0 at the fourth position from the left with 3.\n     d. For any internal columns where the column above contains a 4, place a 7; if above is 2, place a 9; if above is 1, place a 4; if above is 3, place a 5; left unchanged otherwise.\n   - Where blocks are less than 4 wide or 3 tall, only apply the pattern where possible (leave the rest as 0).\n3. For blocks that are single rows or columns, do not apply any replacements and keep as-is.\n4. All other grid values (8s and any non-0, non-8 values) remain unchanged.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0], [8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 0, 0, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 8, 0, 1, 4, 2, 0, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 0, 7, 9, 9, 0, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],\n [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0],\n [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 0, 0, 0],\n [8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0],\n [8, 0, 0, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 0, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 0, 8, 8, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 7, 6, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 5, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 9, 3, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0], [8, 8, 8, 8, 8, 0, 2, 9, 3, 0, 8, 0, 1, 7, 8, 0], [8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 9, 3, 0], [8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0], [8, 0, 1, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 8, 0, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 8, 8, 3, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]]}, "aa62e3f4": {"instruction": "1. Identify the largest contiguous non-background shape in the grid composed of non-background (not 8) values. This shape is roughly diamond or square-like, and \"centered\" in the input grid.\n2. For all cells within this shape, create a new diamond shape of the same size as the minimum bounding square containing the non-background shape. The diamond's main diagonal will go from the bottom left to the top right of the bounding square.\n3. For each row of this bounding square (from bottom to top), place a single \"core\" value (the non-background color found at the center of the input shape) on the corresponding diagonal cell, starting from the bottom left and proceeding upwards to the top right.\n4. For rows above and below this main diagonal, continue placing the core value in symmetric positions, creating vertical mirrored diagonals as in the output.\n5. All remaining cells within the non-background bounding square that were not set to the core value should be set to background (8).\n6. Fill all areas outside the bounding square with the background color (8).", "test_input": [[8, 8, 4, 8, 8], [8, 8, 4, 4, 8], [8, 4, 4, 4, 8], [8, 4, 3, 4, 8], [8, 4, 4, 4, 8]], "predicted_output": "[[8, 8, 3, 8, 8],\n [8, 3, 8, 3, 8],\n [3, 8, 8, 8, 3],\n [8, 3, 8, 3, 8],\n [8, 8, 3, 8, 8]]", "expected_output": [[8, 3, 8, 3, 8], [8, 3, 8, 8, 3], [3, 8, 8, 8, 3], [3, 8, 8, 8, 3], [3, 8, 8, 8, 3]]}, "aab50785": {"instruction": "1. Locate all contiguous rectangular subgrids in the input grid that are fully surrounded by a border of 8s. These blocks always consist of a rectangle of 8s (either 2\u00d7n or n\u00d72) immediately surrounding a smaller rectangle without 8s on its border.\n2. For the test input, identify the rectangular region surrounded by 8s located at rows 10 to 11 (inclusive), columns 4 to 11 (inclusive). The rectangle of 8s forms a \"ring\" with a block of numbers inside.\n3. Extract only the innermost rectangle: the area within the 8-border. This is done by taking the intersection of rows and columns just inside the 8-border (for the example, rows 11 to 10+1 = 11, columns 5 to 10 = columns 5 to 10, 0-based).\n4. Output this inner rectangle as the result grid, preserving its values.", "test_input": [[0, 0, 6, 9, 0, 0, 0, 9, 0, 0, 7, 0, 9, 0, 0, 9, 0], [0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 4, 0, 9, 0, 0, 0, 0, 0, 2, 0, 1, 0, 5, 1], [2, 1, 0, 8, 8, 4, 1, 5, 0, 8, 8, 0, 1, 0, 4, 0, 0], [0, 7, 3, 8, 8, 0, 9, 0, 0, 8, 8, 0, 6, 0, 4, 7, 2], [2, 5, 0, 4, 0, 0, 0, 0, 7, 9, 0, 9, 5, 0, 4, 0, 1], [8, 8, 5, 9, 0, 4, 8, 8, 4, 0, 3, 7, 0, 0, 0, 0, 5], [8, 8, 7, 7, 0, 0, 8, 8, 6, 4, 7, 0, 6, 0, 0, 0, 4], [0, 6, 9, 0, 4, 0, 0, 3, 0, 9, 0, 3, 0, 0, 0, 3, 4], [0, 5, 2, 0, 0, 0, 0, 2, 9, 0, 0, 6, 0, 4, 5, 0, 0], [0, 7, 0, 3, 8, 8, 4, 5, 4, 3, 8, 8, 9, 5, 0, 3, 0], [0, 0, 0, 0, 8, 8, 0, 0, 7, 0, 8, 8, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 3, 5, 0], [0, 9, 2, 0, 0, 0, 9, 8, 8, 0, 0, 6, 0, 8, 8, 0, 6], [0, 0, 0, 9, 0, 0, 0, 8, 8, 0, 7, 0, 4, 8, 8, 0, 0]], "predicted_output": "[[0, 0, 7, 0, 8, 8],\n [0, 7, 0, 8, 8, 0]]", "expected_output": [[4, 1, 5, 0], [0, 9, 0, 0], [5, 9, 0, 4], [7, 7, 0, 0], [4, 5, 4, 3], [0, 0, 7, 0], [0, 0, 6, 0], [0, 7, 0, 4]]}, "aabf363d": {"instruction": "1. Identify the unique nonzero color located in the bottom-left cell of the grid (first column, last row). Let this be the \"replacement color\".\n2. Scan the entire grid and replace every occurrence of any other nonzero color (i.e., all nonzero colors except the \"replacement color\", if present elsewhere) with the \"replacement color\".\n3. Set the bottom-left cell (first column, last row) to zero.\n4. Leave all zero cells unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 8, 0, 0, 0], [0, 8, 8, 8, 8, 8, 0], [0, 0, 0, 8, 8, 0, 0], [0, 0, 8, 8, 0, 0, 0], [0, 0, 8, 8, 8, 0, 0], [2, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 0, 0, 0],\n [0, 2, 2, 2, 2, 2, 0],\n [0, 0, 0, 2, 2, 0, 0],\n [0, 0, 2, 2, 0, 0, 0],\n [0, 0, 2, 2, 2, 0, 0],\n [0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 2, 0, 0, 0], [0, 2, 2, 2, 2, 2, 0], [0, 0, 0, 2, 2, 0, 0], [0, 0, 2, 2, 0, 0, 0], [0, 0, 2, 2, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0]]}, "aaecdb9a": {"instruction": "1. Divide the input grid into four equal-sized quadrants (each 5x5 if grid is 10x10): top-left, top-right, bottom-left, and bottom-right.\n2. For each quadrant, extract the main diagonal running from the top-left to the bottom-right corner of that quadrant (i.e., positions (i, i) for i from 0 to 4 within each 5x5 quadrant).\n3. Stack the four diagonals vertically, in the following order: top-left, top-right, bottom-left, bottom-right, to form a new grid with 4 columns and 5 rows.\n4. To the right of this new grid, append a fifth column. For each row, in order, place the value from the bottom-rightmost position of the corresponding quadrant: (4,4), (4,9), (9,4), (9,9).", "test_input": [[2, 2, 7, 2, 7, 7, 8, 7, 2, 2], [2, 2, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 2, 7, 2, 2, 7, 8, 8], [2, 2, 2, 7, 7, 7, 2, 7, 8, 7], [7, 7, 7, 7, 7, 7, 7, 7, 8, 7], [8, 8, 8, 8, 8, 8, 8, 8, 8, 7], [7, 7, 7, 7, 7, 7, 7, 7, 8, 7], [7, 7, 6, 7, 7, 7, 7, 8, 8, 7], [6, 6, 6, 6, 7, 2, 7, 7, 7, 7], [7, 7, 6, 7, 7, 7, 2, 2, 2, 7]], "predicted_output": "[[2, 7, 8, 7, 7],\n [2, 7, 7, 7, 7],\n [7, 7, 8, 7, 7],\n [7, 7, 7, 8, 7],\n [7, 8, 7, 7, 7]]", "expected_output": [[7, 2, 7, 7, 7], [7, 2, 7, 7, 7], [7, 2, 7, 7, 7], [7, 2, 7, 7, 7], [7, 2, 8, 7, 7], [7, 2, 8, 7, 6]]}, "aaef0977": {"instruction": "1. Identify the only non-7 cell in the grid; record its value and its position (row, column). Let\u2019s call this value S and its position (R, C).\n2. Prepare a fixed sequence of 8 numbers in this order: [S, (S+9)%10, (S+8)%10, (S+2)%10, (S+5)%10, (S+0)%10, (S+4)%10, (S+3)%10]. This sequence will serve as the first row of the result.\n3. For each subsequent row, cyclically shift the previous row one position to the right.\n4. Once all 8 rows are constructed via this cyclic rotation, insert them into the output grid in order from top to bottom.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 0, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[0, 9, 8, 2, 5, 0, 4, 3],\n [3, 0, 9, 8, 2, 5, 0, 4],\n [4, 3, 0, 9, 8, 2, 5, 0],\n [0, 4, 3, 0, 9, 8, 2, 5],\n [5, 0, 4, 3, 0, 9, 8, 2],\n [2, 5, 0, 4, 3, 0, 9, 8],\n [8, 2, 5, 0, 4, 3, 0, 9],\n [9, 8, 2, 5, 0, 4, 3, 0]]", "expected_output": [[8, 2, 8, 9, 6, 1, 3, 4], [2, 5, 2, 8, 9, 6, 1, 3], [5, 0, 5, 2, 8, 9, 6, 1], [2, 5, 2, 8, 9, 6, 1, 3], [8, 2, 8, 9, 6, 1, 3, 4], [9, 8, 9, 6, 1, 3, 4, 0], [6, 9, 6, 1, 3, 4, 0, 5], [1, 6, 1, 3, 4, 0, 5, 2]]}, "aba27056": {"instruction": "1. Identify the main object (the colored nonzero numbers, in this case \"2\") that forms a border or shape. For all nonzero cells of this object, retain their value.\n2. Fill the interior region bounded by the main object with the color 4, changing any interior zeros (0) enclosed fully by the object into 4.\n3. For all rows and columns outside the main object's extent, retain their values (typically 0).\n4. For all diagonal \"arms\" or \"X\" patterns surrounding the center (inside the shape but not on the main object border), fill in 4 to produce a cross or X pattern connecting to the filled interior\u2014ensuring the cross is centered within the main shape and extends before hitting the object boundary on each diagonal.\n5. If the main shape forms a hollow with rounded corners, fill those corners with 4, matching the pattern of filled corners in the output examples.\n6. Retain the values of all main object border cells.", "test_input": [[0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 2, 0, 0, 2, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 2, 0, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 2, 2, 2, 2, 0, 0, 0, 0, 0],\n [0, 2, 4, 4, 2, 0, 0, 0, 0, 0],\n [0, 2, 4, 4, 4, 0, 0, 0, 0, 0],\n [0, 2, 4, 4, 4, 0, 0, 0, 0, 0],\n [0, 2, 4, 4, 4, 0, 0, 0, 0, 0],\n [0, 2, 4, 4, 4, 0, 0, 0, 0, 0],\n [0, 2, 4, 4, 4, 0, 0, 0, 0, 0],\n [0, 2, 4, 4, 2, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 2, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 2, 2, 2, 2, 0, 4, 0, 0, 0], [0, 2, 4, 4, 2, 4, 0, 0, 0, 0], [0, 2, 4, 4, 4, 4, 4, 4, 4, 4], [0, 2, 4, 4, 4, 4, 4, 4, 4, 4], [0, 2, 4, 4, 4, 4, 4, 4, 4, 4], [0, 2, 4, 4, 4, 4, 4, 4, 4, 4], [0, 2, 4, 4, 4, 4, 4, 4, 4, 4], [0, 2, 4, 4, 2, 4, 0, 0, 0, 0], [0, 2, 2, 2, 2, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0]]}, "abbfd121": {"instruction": "1. Identify the top-left 12x6 rectangle of the input grid (i.e. the subgrid formed by rows 0-5 and columns 0-11).\n2. Copy this 12x6 rectangle into a new grid maintaining the original order.\n3. Return the resulting 12x6 grid as the output.", "test_input": [[8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8], [6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6], [7, 3, 3, 3, 3, 3, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7], [8, 3, 3, 3, 3, 3, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8], [6, 3, 3, 3, 3, 3, 6, 7, 8, 6, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 6], [7, 3, 3, 3, 3, 3, 7, 8, 6, 7, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 7], [8, 3, 3, 3, 3, 3, 8, 6, 7, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 8], [6, 3, 3, 3, 3, 3, 6, 7, 8, 6, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 6], [7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 7], [8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 8], [6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 6], [7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 7], [8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8], [6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6], [7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7], [8, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8], [6, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6], [7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7], [8, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8], [6, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6], [7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7], [8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8], [6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6]], "predicted_output": "[[8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7],\n [6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8],\n [7, 3, 3, 3, 3, 3, 7, 8, 6, 7, 8, 6],\n [8, 3, 3, 3, 3, 3, 8, 6, 7, 8, 6, 7],\n [6, 3, 3, 3, 3, 3, 6, 7, 8, 6, 7, 4],\n [7, 3, 3, 3, 3, 3, 7, 8, 6, 7, 8, 4]]", "expected_output": [[8, 6, 7, 8, 6, 7, 8, 6, 7], [6, 7, 8, 6, 7, 8, 6, 7, 8], [7, 8, 6, 7, 8, 6, 7, 8, 6], [8, 6, 7, 8, 6, 7, 8, 6, 7], [6, 7, 8, 6, 7, 8, 6, 7, 8], [7, 8, 6, 7, 8, 6, 7, 8, 6], [8, 6, 7, 8, 6, 7, 8, 6, 7], [6, 7, 8, 6, 7, 8, 6, 7, 8]]}, "ac0a08a4": {"instruction": "1. For each nonzero cell in the input grid, identify its value and its position (row, column).\n2. For each such nonzero cell, create a square block in the output grid whose size equals the dimension of the input grid (let N be the input grid size). The block\u2019s cells all take the value of the input cell.\n3. Place this block in the output grid so that its top-left corner is at position (row \u00d7 N, column \u00d7 N), where (row, column) is the position of the input cell.\n4. Any cells in the output grid not assigned by a block are filled with zero.", "test_input": [[1, 0, 0], [0, 9, 6], [8, 0, 0]], "predicted_output": "[[1, 1, 1, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 0, 0, 0, 0, 0, 0],\n [1, 1, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 9, 9, 9, 0, 0, 0],\n [0, 0, 0, 9, 9, 9, 0, 0, 0],\n [0, 0, 0, 9, 9, 9, 0, 0, 0],\n [8, 8, 8, 0, 0, 0, 0, 0, 0],\n [8, 8, 8, 0, 0, 0, 0, 0, 0],\n [8, 8, 8, 0, 0, 0, 0, 0, 0]]", "expected_output": [[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 9, 9, 9, 9, 6, 6, 6, 6], [0, 0, 0, 0, 9, 9, 9, 9, 6, 6, 6, 6], [0, 0, 0, 0, 9, 9, 9, 9, 6, 6, 6, 6], [0, 0, 0, 0, 9, 9, 9, 9, 6, 6, 6, 6], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ac0c2ac3": {"instruction": "1. Identify all non-background cells in the input grid. The background color is 7; all other values are non-background.\n2. Compute the minimum bounding box that contains all non-background cells.\n3. Expand this bounding box by 1 cell in all directions (top, bottom, left, right). Adjust expansion so that the bounding box does not extend outside the grid boundaries.\n4. For the output grid, initialize a new grid of size equal to the expanded bounding box.\n5. Set the border (outermost layer) of the new grid to the value of the top-leftmost non-background cell from the original input grid.\n6. Set the next inner border (just inside the outermost layer) to the value of the second found non-background cell, scanning left to right, top to bottom.\n7. Continue filling successive inner layers with the values of the next non-background cells, in order found by scanning left to right, top to bottom.\n8. For the innermost cells, copy the positions and values of the non-background cells from the input grid relative to the bounding box\u2019s position.\n9. Fill any remaining inner cells not assigned a value with the value of the last non-background cell used, or as appropriate based on previous outputs (usually repeating the inner border value).", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7], [7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 3, 7, 7, 7, 7, 7, 7, 7], [7, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0],\n [0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0],\n [0, 7, 7, 7, 7, 7, 7, 7, 1, 7, 7, 0],\n [0, 7, 7, 7, 7, 7, 5, 7, 8, 7, 7, 0],\n [0, 7, 7, 7, 7, 7, 2, 7, 7, 7, 7, 0],\n [0, 7, 7, 7, 7, 3, 7, 7, 7, 7, 7, 0],\n [0, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0], [0, 4, 3, 1, 1, 1, 1, 1, 1, 1, 3, 4, 0], [0, 4, 3, 1, 8, 8, 8, 8, 8, 1, 3, 4, 0], [0, 4, 3, 1, 8, 5, 5, 5, 8, 1, 3, 4, 0], [0, 4, 3, 1, 8, 5, 2, 5, 8, 1, 3, 4, 0], [0, 4, 3, 1, 8, 5, 5, 5, 8, 1, 3, 4, 0], [0, 4, 3, 1, 8, 8, 8, 8, 8, 1, 3, 4, 0], [0, 4, 3, 1, 1, 1, 1, 1, 1, 1, 3, 4, 0], [0, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 0], [0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ac0c5833": {"instruction": "1. Identify all diagonals in the grid that contain pairs of the color 4 (that is, two 4s separated by a constant step in both row and column). For every such diagonal, the 4s are the \"anchors\" that define a diagonal segment.\n2. For each such diagonal segment bordered (or defined) by two 4s, fill all the cells *between* those 4s (exclusive; i.e., not the 4s themselves), along the same diagonal, with the color 2 to create a solid line of 2s connecting the two 4s.\n3. Repeat for every diagonal segment in both \u201ctop-left to bottom-right\u201d and \u201cbottom-left to top-right\u201d directions (whichever is applicable and present in the grid).\n4. Leave all other cell values unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],\n [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 4, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 2], [0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2], [0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ac2e8ecf": {"instruction": "1. Identify all nonzero connected clusters (\"blocks\") in the grid, where a block is a contiguous non-background (nonzero) region of cells with the same color and shape.\n2. Partition the grid horizontally into three equal bands (top, middle, bottom) based on the height of each unique arrangement of color blocks; if three distinct structures exist, each becomes a band. Otherwise, partition as appropriate based on repeated band structure seen in the examples.\n3. For each block of the same shape, color, and arrangement, regroup all instances of that block from across the grid and move them together into a dedicated horizontal band, preserving their relative internal arrangement and orientation.\n   - For instance, blocks of the same color and structure that appear in different rows are \"stacked\" as blocks within the same band.\n   - Preserve the original order of appearance: leftmost/topmost structure appears at the top (or left) of the new band.\n4. Place each band in the output grid, one after another, from the top down according to the statically observed canonical order: usually, '1' bands first, followed by '8' bands, then '5', '2', '3', etc., as they appeared in the original positional order.\n5. Within each band, fill empty rows or columns with background zeros to fit the original grid size.\n6. After all key bands are placed, fill the remaining lower part of the grid (if any) with zeros.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 2, 2, 2, 2, 2], [0, 8, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0], [8, 8, 8, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1],\n [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1],\n [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],\n [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 2, 2, 2, 2, 2],\n [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0]]}, "ac3e2b04": {"instruction": "1. Identify any 3x3 block of cells where the central cell is colored '2' and the surrounding eight cells are part of a square/diamond pattern made up of '3's, starting and ending with a '2' in the same column (a \"targeted cluster\"), similar to the ones shown in previous input/output pairs.\n2. For each such cluster:\n    a. Replace all '0's in the same row as this cluster, located in the horizontal range spanned by the cluster, with '1's, except where there is a '3', '2', or another non-zero value.\n    b. Repeat the above replacement for all rows that are inside the 3x3 cluster or have direct adjacency to it horizontally (if the pattern exists as in previous cases).\n    c. Also, for the same columns as those that span the 3x3 cluster, for all rows in the 3x3 cluster and their immediate vertical extensions (and directly below/above if the \"diamond\" extends vertically), fill the '0's with '1's, except those with a '2', '3', or another non-zero.\n3. For any grid edges, preserve original zeros and do not extend '1's beyond the boundaries of the patterned clusters as determined in step 2.\n4. Preserve all other numbers in the grid as they appear.", "test_input": [[0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 3, 2, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 2, 3, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0]], "predicted_output": "[[0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 3, 2, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 2, 3, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0],\n [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0]]", "expected_output": [[0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 3, 3, 3, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 3, 2, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1], [0, 3, 3, 3, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 3, 3, 3, 0, 0, 1, 1, 1], [1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 3, 2, 3, 1, 1, 1, 2, 1], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 3, 3, 3, 0, 0, 1, 1, 1], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0], [0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0]]}, "ac605cbb": {"instruction": "1. For each nonzero cell in the input grid, identify its value and location. These objects will be centers for further expansions.\n2. For every \u201c1\u201d or \u201c3\u201d cell found, perform the following:\n    a. Keep the \u201c1\u201d or \u201c3\u201d in its original location.\n    b. If there is a \u201c1\u201d, extend a horizontal 3-segment bar of \u201c5\u201d to its right, i.e., fill the next two cells on the same row to the right of the \u201c1\u201d with \u201c5\u201d, unless blocked by the grid edge or another nonzero value. If another nonzero object is found, do not overwrite it.\n    c. If there is a \u201c3\u201d, extend a horizontal 3-segment bar of \u201c5\u201d to its left, i.e., fill the previous two cells on the same row to the left of the \u201c3\u201d, unless blocked by the grid edge or another nonzero value.\n3. For every \u201c2\u201d cell, use it as the center of a 5-wide horizontal band:\n    a. Place a \u201c2\u201d to the immediate left and right of the \u201c2\u201d, if those cells are within grid bounds and empty.\n    b. In between these \u201c2\u201ds, place a row of three \u201c5\u201ds, centered at the position of the original \u201c2\u201d (i.e. the cells just left, at, and right of the \u201c2\u201d).\n    c. For the cell immediately below the center \u201c2\u201d, place a \u201c4\u201d.\n    d. Continue forming a downward staircase of \u201c4\u201ds, leftwards, beginning at the position directly below the leftmost \u201c2\u201d used above; for each step, move one cell down and one cell to the left, until you hit the edge of the grid.\n    e. Similarly, form a downward staircase of \u201c5\u201ds, rightwards, beginning from the cell immediately below the rightmost \u201c2\u201d; for each step, move one cell down and one cell to the right, until you hit the edge of the grid.\n4. For every \u201c6\u201d cell, draw a vertical bar through it as follows:\n    a. Start at the cell with \u201c6\u201d and extend upwards, replacing/setting empty cells to \u201c5\u201d until you meet the edge or another nonzero value (do not overwrite another nonzero value).\n    b. Also extend downwards from the \u201c6\u201d in the same way.\n    c. The cell with the original \u201c6\u201d remains \u201c6\u201d.\n5. After all procedures above, retain any other \u201c3\u201d, \u201c6\u201d, or \u201c1\u201d as found in the original grid.\n6. Leave all other empty cells as zero.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0],\n [0, 0, 0, 0, 0, 4, 5, 2, 5, 5, 0],\n [0, 0, 0, 0, 0, 5, 6, 5, 5, 3, 0],\n [0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0],\n [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0], [0, 1, 5, 5, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0], [0, 0, 0, 2, 5, 4, 5, 2, 0, 0, 0], [0, 0, 0, 0, 4, 6, 0, 0, 0, 3, 0], [0, 0, 0, 4, 0, 0, 0, 0, 0, 5, 0], [0, 0, 4, 0, 0, 0, 0, 0, 0, 5, 0], [0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 0]]}, "ac6f9922": {"instruction": "1. Identify the central rectangular region in the input grid that is distinct from the uniform border. This central region is bounded by the innermost continuous area before the outer uniform border (in this example, the large area of 3's).\n2. Within this central region, scan for all unique-colored blocks that are fully enclosed by this region and are not the same as the main region color (for instance, regions of 2, 6, 1, 4, 7 inside the 3's).\n3. For each unique color block found (excluding the background/main area color), note:\n    - The color of the block.\n    - The color that appears to the right of the block.\n    - The color that appears below the block.\n      (If multiple blocks of the same color exist, use only the topmost/leftmost occurrence, or as the pattern in the examples.)\n4. Build a new output grid where:\n    - Each row of the output grid corresponds to a unique block found in step 3.\n    - The first column contains the color of the block.\n    - The second column contains the color directly to the right of the block in the input grid.\n    - The third column contains the color directly below the block in the input grid.\n    (If there are only two colors for each block, use only two columns accordingly, as shown in the examples.)\n5. Arrange the rows in the output grid in the order of top-to-bottom and left-to-right appearance of the unique internal block colors in the input grid.", "test_input": [[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 8, 8, 3, 8, 8], [8, 8, 3, 8, 2, 8, 3, 8, 6, 6, 8, 3, 3, 8, 1, 8, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 8, 8, 3, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 8, 8, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 4, 4, 8, 3, 3, 8, 7, 8, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 7, 8, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 7, 8, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 8, 8, 3, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 8, 8, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 1, 8, 3, 8, 8], [8, 8, 3, 8, 8, 8, 3, 8, 8, 8, 8, 3, 3, 8, 8, 8, 3, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[2, 8, 8],\n [6, 8, 8],\n [1, 8, 8],\n [4, 4, 8],\n [7, 8, 8]]", "expected_output": [[2, 6, 1], [8, 4, 7], [8, 8, 1]]}, "ad173014": {"instruction": "1. For each non-background colored region in the input grid, swap every instance of color 3 with 8, and every instance of 8 with 3. All other colors (such as 0, 1, 2, 4, 6, 7) remain unchanged.\n2. The swap is performed for all locations in the grid, regardless of their region or local context.", "test_input": [[0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 2, 0, 4, 0, 4, 0, 2, 1, 1, 2, 0, 3, 3, 3, 0, 2, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 2, 0, 4, 4, 4, 0, 2, 0, 0, 2, 3, 3, 0, 3, 3, 2, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 2, 0, 4, 4, 4, 0, 2, 0, 0, 2, 0, 3, 3, 3, 0, 2, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [2, 0, 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], [2, 0, 8, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0, 2, 0], [2, 0, 0, 8, 8, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 7, 7, 7, 0, 2, 0], [2, 0, 0, 0, 8, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0, 2, 0], [2, 0, 0, 0, 8, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 7, 7, 2, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 6, 6, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 6, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0],\n [0, 0, 0, 1, 1, 1, 2, 0, 4, 0, 4, 0, 2, 1, 1, 2, 0, 8, 8, 8, 0, 2, 1, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 2, 0, 4, 4, 4, 0, 2, 0, 0, 2, 8, 8, 0, 8, 8, 2, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 2, 0, 4, 4, 4, 0, 2, 0, 0, 2, 0, 8, 8, 8, 0, 2, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n [2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n [2, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0],\n [2, 0, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0, 2, 0],\n [2, 0, 0, 3, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 7, 7, 7, 0, 2, 0],\n [2, 0, 0, 0, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 0, 0, 2, 0],\n [2, 0, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 7, 7, 7, 2, 0],\n [2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 6, 6, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 6, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 2, 0, 3, 0, 3, 0, 2, 1, 1, 2, 0, 7, 7, 7, 0, 2, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 2, 0, 3, 3, 3, 0, 2, 0, 0, 2, 7, 7, 0, 7, 7, 2, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 2, 0, 3, 3, 3, 0, 2, 0, 0, 2, 0, 7, 7, 7, 0, 2, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [2, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], [2, 0, 4, 4, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0, 2, 0], [2, 0, 0, 4, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 6, 6, 6, 0, 2, 0], [2, 0, 0, 0, 4, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 0, 0, 2, 0], [2, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 6, 6, 2, 0], [2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 8, 8, 8, 8, 8, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 8, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 8, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ad38a9d0": {"instruction": "1. Identify all contiguous regions of the color '6' in the input grid. For each distinct region, determine its approximate position: top-left, top-right, bottom-left, bottom-right, center-left, center, or bottom-center.\n2. Replace all cells in each identified region of '6' with a new color according to their position:\n   - Top-left region: Change all '6's to '4'.\n   - Top-right region: Change all '6's to '8'.\n   - Center-left (vertical band near the middle, left of center): Change all '6's to '3'.\n   - Center-right (vertical band near the middle, right of center): Change all '6's to '9'.\n   - Bottom-left region (and diagonal band): Change all '6's to '5'.\n   - Bottom-right region: Change all '6's to '2'.\n   - If a '6' region falls clearly into one of these zones, use the corresponding color.\n3. Leave all cells not originally '6' unchanged.", "test_input": [[7, 6, 7, 7, 6, 6, 7, 7, 7], [6, 6, 6, 7, 7, 6, 6, 7, 7], [7, 6, 7, 7, 7, 7, 7, 7, 6], [7, 7, 7, 6, 6, 6, 7, 7, 6], [7, 7, 7, 6, 6, 6, 7, 7, 6], [7, 7, 7, 7, 7, 7, 7, 7, 7], [6, 6, 7, 7, 7, 7, 7, 6, 6], [7, 6, 7, 7, 7, 6, 7, 7, 6], [7, 7, 7, 7, 7, 6, 7, 7, 7]], "predicted_output": "[[7, 4, 7, 7, 8, 8, 7, 7, 7],\n [4, 4, 4, 7, 7, 8, 8, 7, 7],\n [7, 3, 7, 7, 7, 7, 7, 9, 8],\n [7, 7, 7, 3, 3, 9, 7, 7, 9],\n [7, 7, 7, 3, 3, 9, 7, 7, 9],\n [7, 7, 7, 7, 7, 7, 7, 7, 7],\n [5, 5, 7, 7, 7, 7, 7, 2, 2],\n [5, 3, 7, 7, 7, 9, 7, 7, 2],\n [5, 5, 7, 7, 7, 9, 7, 7, 7]]", "expected_output": [[7, 3, 7, 7, 8, 8, 7, 7, 7], [3, 3, 3, 7, 7, 8, 8, 7, 7], [7, 3, 7, 7, 7, 7, 7, 7, 2], [7, 7, 7, 5, 5, 5, 7, 7, 2], [7, 7, 7, 5, 5, 5, 7, 7, 2], [7, 7, 7, 7, 7, 7, 7, 7, 7], [4, 4, 7, 7, 7, 7, 7, 4, 4], [7, 4, 7, 7, 7, 9, 7, 7, 4], [7, 7, 7, 7, 7, 9, 7, 7, 7]]}, "ad3b40cf": {"instruction": "1. Identify all diagonals that start from the top-left to the bottom-right direction and are made of cells with the value '1'. These diagonals create a \"staircase\" pattern across the grid.\n2. For each non-diagonal region bounded between two adjacent '1' diagonals (including the grid edges as bounds), check for any colored clusters (contiguous same-value cells that are not '1' or '8') that appear horizontally in one column and also exist directly horizontally aligned on the other side of the region.\n3. For each such colored cluster found, copy its shape and color horizontally and insert (replace existing values) into the matching position on the other side of the region.\n4. All other cells retain their original values, except where colored clusters are copied as described above.", "test_input": [[1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 4, 4, 4, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 4, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 4, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 7, 7, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8], [8, 8, 8, 8, 7, 8, 8, 4, 4, 4, 8, 8, 1, 8, 8, 8, 8], [8, 4, 4, 8, 7, 8, 8, 8, 8, 4, 8, 8, 8, 1, 8, 8, 8], [8, 4, 4, 8, 7, 7, 8, 8, 8, 4, 8, 8, 8, 8, 1, 8, 8], [8, 4, 4, 8, 7, 7, 8, 8, 8, 4, 8, 7, 7, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1]], "predicted_output": "[[1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 4, 4, 4, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 4, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 4, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 4, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8],\n [8, 7, 7, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8],\n [8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 7, 8, 8, 4, 4, 4, 8, 8, 1, 8, 8, 8, 8],\n [8, 4, 4, 8, 7, 8, 8, 8, 8, 4, 8, 8, 8, 1, 8, 8, 8],\n [8, 4, 4, 8, 7, 7, 8, 8, 8, 4, 8, 8, 8, 8, 1, 8, 8],\n [8, 4, 4, 8, 7, 7, 8, 8, 8, 4, 8, 7, 7, 8, 8, 1, 8],\n [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1]]", "expected_output": [[1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 1, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8], [8, 8, 1, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8], [8, 4, 4, 4, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8], [8, 8, 4, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 4, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8, 8], [8, 7, 7, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8, 8], [8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 8, 8, 8], [8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 1, 8, 8, 8, 7, 8], [8, 8, 8, 8, 7, 8, 8, 4, 4, 4, 8, 8, 1, 8, 8, 7, 8], [8, 4, 4, 8, 7, 8, 8, 8, 8, 4, 8, 8, 8, 1, 8, 8, 8], [8, 4, 4, 8, 7, 7, 8, 8, 8, 4, 8, 8, 8, 8, 1, 8, 8], [8, 4, 4, 8, 7, 7, 8, 8, 8, 4, 8, 7, 7, 8, 8, 1, 8], [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1]]}, "ad7e01d0": {"instruction": "1. Create a new grid that is three times the height and three times the width of the input grid, filling all cells with 0.\n2. Copy the input grid into the center of the new grid such that there is one empty (0) border of cells around all sides of the input grid.\n3. In the top-left third of the output grid, insert the input grid aligned to the upper left, leaving zeros as padding for the remainder of that section.\n4. In the central third (the middle 5x5 block), again insert the input grid centered as described in step 2.\n5. In the bottom-right third, insert the input grid aligned to the lower right, padding with zeros toward the top and left as needed.\n6. Leave all other cells as zero.", "test_input": [[1, 0, 5, 0, 1], [0, 2, 2, 2, 0], [5, 0, 5, 0, 5], [0, 2, 2, 2, 0], [1, 0, 5, 0, 1]], "predicted_output": "[[1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5], [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ae3edfdc": {"instruction": "1. For each nonzero row, identify if the row contains a 'central' number (not at the edge), specifically one of the \"core\" values: 1 or 2. If so, this is the core for creating a new cluster on that row.\n2. For each \"core\" (a 1 or 2 not at the edge of the grid), replace zeros directly to the left and right of the core (adjacent only) with the same number that is at the edges of the cluster (\"satellite\" numbers), if these are present in the input row. Specifically:\n    - For a core of 1, look for '7' in the same row further left and right. If found, place '7's in the cells immediately to the left and right of the 1. This builds a 3-wide cluster: [7,1,7].\n    - For a core of 2, look for '3' in the same row further left and right. If found, place '3's immediately left and right of the 2, forming [3,2,3].\n3. Shift the constructed cluster horizontally to the leftmost possible position on the same row, aligning it just left of where the earliest nonzero of the original cluster appeared.\n4. For any solitary \"satellite\" numbers (7 or 3) that existed elsewhere in the original row (not forming part of a core cluster as described above), ignore/remove them from the output.\n5. Copy all other nonzero elements that do not form part of the above clusters to their new correct position if they form a vertical sequence with a core, otherwise remove them.\n6. Repeat for each row independently.\n7. Set all other cells to 0.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "ae4f1146": {"instruction": "1. Search the input grid for the largest non-overlapping 3x3 block that contains only nonzero values (i.e., all cells are either 8 or 1, but not 0). \n2. The 3x3 block you are looking for is always in the upper left of the nonzero area of the grid. Identify this contiguous 3x3 block of nonzero values.\n3. Extract this 3x3 block as the output grid, preserving the original positions and values (8 or 1) from the input grid.", "test_input": [[8, 8, 8, 0, 0, 0, 8, 1, 8], [8, 8, 8, 0, 0, 0, 1, 8, 1], [1, 8, 8, 0, 0, 0, 8, 1, 8], [0, 0, 0, 8, 1, 8, 0, 0, 0], [0, 0, 0, 8, 8, 1, 0, 0, 0], [0, 0, 0, 1, 8, 8, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 8], [0, 0, 0, 0, 0, 0, 8, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 8]], "predicted_output": "[[8, 8, 8],\n [8, 8, 8],\n [1, 8, 8]]", "expected_output": [[1, 1, 8], [8, 1, 1], [1, 1, 8]]}, "ae58858e": {"instruction": "1. For every contiguous group (block) of non-diagonally connected cells containing the value 2, check the block's dimensions.\n2. If a block has both its width and height greater than 1 (i.e., contains at least one 2x2 or larger rectangle), change all 2s in this block to 6.\n3. If a block does not meet the above criteria (is only a line or single cell), leave those 2s unchanged.\n4. Leave all other cell values (except the changed 2s) unchanged.", "test_input": [[0, 0, 0, 0, 2, 2, 2, 0], [2, 2, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 2, 2, 0], [0, 2, 0, 0, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 2]], "predicted_output": "[[0, 0, 0, 0, 6, 6, 6, 0],\n [6, 6, 0, 0, 0, 0, 0, 0],\n [0, 6, 6, 0, 0, 6, 6, 0],\n [0, 6, 0, 0, 0, 6, 6, 0],\n [0, 0, 0, 0, 0, 0, 0, 0],\n [2, 0, 2, 2, 0, 0, 0, 2]]", "expected_output": [[0, 0, 0, 0, 2, 2, 2, 0], [6, 6, 0, 0, 0, 0, 0, 0], [0, 6, 6, 0, 0, 6, 6, 0], [0, 6, 0, 0, 0, 6, 6, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 2, 0, 0, 0, 2]]}, "aedd82e4": {"instruction": "1. For each column in the grid, locate the bottom-most cell in that column that contains the value 2.\n2. Change the value in that bottom-most cell from 2 to 1.\n3. Leave all other cells unchanged.", "test_input": [[2, 2, 0, 2], [0, 2, 0, 0], [0, 0, 2, 0], [2, 0, 0, 0], [0, 0, 2, 2]], "predicted_output": "[[2, 2, 0, 2],\n [0, 2, 0, 0],\n [0, 0, 2, 0],\n [2, 0, 0, 0],\n [0, 0, 1, 1]]", "expected_output": [[2, 2, 0, 1], [0, 2, 0, 0], [0, 0, 1, 0], [1, 0, 0, 0], [0, 0, 2, 2]]}, "aee291af": {"instruction": "1. Identify the largest contiguous square region within the input grid that is fully enclosed by the color 8. The interior of this region may contain other colors (such as 2), but the boundary must consist solely of color 8.\n2. Extract this square region, including its 8-colored border and all its internal cells exactly as they appear in the input.\n3. Output this extracted square as the new grid, preserving the positions of all colors within the square.", "test_input": [[1, 1, 1, 1, 8, 1, 1, 1, 1, 8, 1, 1, 1, 8, 8, 8, 8, 8], [1, 1, 1, 8, 1, 1, 8, 1, 1, 8, 1, 1, 8, 8, 2, 2, 8, 8], [1, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8, 8, 2, 8, 8, 8], [1, 1, 8, 2, 2, 8, 8, 1, 1, 1, 1, 1, 1, 8, 8, 8, 2, 8], [1, 1, 8, 2, 8, 8, 8, 1, 8, 1, 8, 1, 1, 8, 8, 8, 8, 8], [1, 8, 8, 8, 8, 2, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 1, 8, 8, 8, 8, 8, 1, 1, 8, 1, 8, 1, 1, 1, 1, 1, 1], [1, 8, 1, 8, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 1, 8, 8, 1], [1, 1, 1, 1, 8, 1, 8, 1, 1, 8, 2, 2, 8, 8, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 8, 1, 1, 8, 2, 8, 8, 8, 8, 1, 1, 1], [8, 8, 8, 8, 8, 8, 1, 1, 1, 8, 8, 8, 2, 8, 1, 1, 1, 1], [8, 2, 2, 8, 8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 1, 1, 1, 1], [8, 2, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 8, 8, 2, 8, 1, 1, 1, 8, 8, 8, 8, 8, 1, 1, 1, 8, 1], [8, 8, 8, 8, 8, 1, 1, 1, 8, 8, 2, 2, 8, 1, 1, 1, 1, 8], [1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 2, 2, 8, 1, 1, 1, 8, 8], [8, 8, 1, 1, 1, 1, 1, 1, 8, 2, 8, 8, 8, 1, 1, 1, 1, 1], [8, 1, 8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1]], "predicted_output": "[[8, 8, 8, 8, 8, 8],\n [8, 2, 2, 8, 8, 8],\n [8, 2, 8, 8, 8, 8],\n [8, 8, 8, 2, 8, 8],\n [8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8]]", "expected_output": [[8, 8, 8, 8, 8], [8, 8, 2, 2, 8], [8, 8, 2, 2, 8], [8, 2, 8, 8, 8], [8, 8, 8, 8, 8]]}, "af24b4cc": {"instruction": "1. Divide the input grid horizontally into two main sections, separated by a full row of zeros. (In the given examples, the separation occurs between rows 3 and 5, with the 4th row being all zeros.)\n2. From each section, extract the same specific set of columns: the group of columns between the first outermost zero columns, for each distinct \"block\" separated by zeros. In the examples, these are the column groups between zeros, forming three blocks per section.\n    - In each section, ignore the leading and trailing rows and columns of zeros.\n    - For each row in the section, find the nonzero blocks separated by zeros.\n3. From each nonzero block in the top and bottom sections, select the bottom-right value of the block (i.e., the value in the last row and last column of that nonzero block, within that section).\n4. Use these values to populate a new grid as follows:\n    - Create a new grid with four rows and five columns, where the first and last columns and rows are all zeros (i.e., a border of 0).\n    - In the central 2x3 region, fill the first row with the three bottom-right values extracted from the top section, and the second row with the three bottom-right values extracted from the bottom section.\n5. The resulting grid forms the output.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 3, 3, 0, 4, 4, 0], [0, 3, 1, 0, 8, 3, 0, 4, 4, 0], [0, 1, 1, 0, 3, 8, 0, 8, 4, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 3, 5, 0, 2, 2, 0], [0, 6, 6, 0, 5, 5, 0, 2, 2, 0], [0, 2, 2, 0, 5, 3, 0, 2, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0],\n [0, 1, 3, 4, 0],\n [0, 6, 5, 2, 0],\n [0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0], [0, 1, 3, 4, 0], [0, 2, 5, 2, 0], [0, 0, 0, 0, 0]]}, "af726779": {"instruction": "1. Identify the row that contains the most '7' values. This row will be the \"pattern row\".  \n2. For each row below the pattern row, starting immediately after the pattern row and skipping every other row (i.e., select every even-indexed row counting from the pattern row + 1), do the following:   \n    a. For the first such row:  \n        - In each cell, if the cell above (in the pattern row) is a '7', set the current cell to '6'; otherwise leave it unchanged.  \n    b. For the next such row:  \n        - In each cell, if the cell above (in the previous \"decorated\" row) is a '6', set the current cell to '7'; otherwise leave it unchanged.  \n    c. For the next such row:  \n        - In each cell, if the cell above (in the previous \"decorated\" row) is a '7', set the current cell to '6'; otherwise leave it unchanged.  \n    d. Continue alternating '6' and '7' in such fashion for each subsequent applicable row, propagating the pattern downward as needed.  \n3. Leave all other rows unchanged.", "test_input": [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 7, 3, 7, 7, 7, 7, 7, 7, 7, 3, 7, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], "predicted_output": "[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [3, 3, 7, 3, 7, 7, 7, 7, 7, 7, 7, 3, 7, 3, 3],\n [3, 3, 6, 3, 6, 6, 6, 6, 6, 6, 6, 3, 6, 3, 3],\n [3, 3, 7, 3, 7, 7, 7, 7, 7, 7, 7, 3, 7, 3, 3],\n [3, 3, 6, 3, 6, 6, 6, 6, 6, 6, 6, 3, 6, 3, 3],\n [3, 3, 7, 3, 7, 7, 7, 7, 7, 7, 7, 3, 7, 3, 3],\n [3, 3, 6, 3, 6, 6, 6, 6, 6, 6, 6, 3, 6, 3, 3],\n [3, 3, 7, 3, 7, 7, 7, 7, 7, 7, 7, 3, 7, 3, 3],\n [3, 3, 6, 3, 6, 6, 6, 6, 6, 6, 6, 3, 6, 3, 3],\n [3, 3, 7, 3, 7, 7, 7, 7, 7, 7, 7, 3, 7, 3, 3],\n [3, 3, 6, 3, 6, 6, 6, 6, 6, 6, 6, 3, 6, 3, 3],\n [3, 3, 7, 3, 7, 7, 7, 7, 7, 7, 7, 3, 7, 3, 3]]", "expected_output": [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 7, 3, 7, 7, 7, 7, 7, 7, 7, 3, 7, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 3, 6, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]}, "af902bf9": {"instruction": "1. Identify all rows that contain two or more cells with the value 4. For each such pair of 4s in the row, determine the columns they are in (let's call them c1 and c2, with c1 < c2). \n2. For each such pair, fill all cells between (but not including) c1 and c2 in that row with the value 2, replacing any existing 0s in those positions.\n3. Repeat this process for all qualifying rows in the grid.", "test_input": [[0, 0, 0, 0, 0, 4, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 4], [4, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 4, 2, 2, 2, 4],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 4, 2, 2, 2, 4],\n [4, 2, 2, 4, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [4, 2, 2, 4, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 4, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 4, 0, 0, 0, 4], [4, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "afe3afe9": {"instruction": "1. Ignore all rows and columns that are fully composed of the number 1 on the border of the grid. Remove any such fully \u201cborder\u201d columns/rows from left, top and bottom edges. (For this grid: remove the first column, but do not remove the last row or any other border.)\n2. Break the grid up into non-overlapping horizontal stripes (blocks) of height 3 rows. For each of the *remaining* stripes in the grid:\n    - Only select stripes which contain non-zero, non-border colors (ignore any stripes that are entirely zeros).\n3. Within each 3-row stripe, process the following:\n    a. For each group of colored vertical regions (i.e., clusters of non-zero, non-border colors like 8, 2, or 7, surrounded by zeros or the stripe edges), extract that region (this region can be width 3 or less; in the shown grids, width varies per \"cluster\").\n    b. For each such vertical region, slide it to leftmost position in the corresponding stripe, leaving all zeros to the right.\n4. After stripes have been processed, vertically stack the processed blocks in a new grid in their original top-to-bottom order, removing any fully zero rows at the bottom of each block.\n5. The result should be a compact, square or rectangle, stacking all non-trivial colored regions (originally separated by zeros), preserving their 3-row localized structure.", "test_input": [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0], [1, 0, 8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0], [1, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [1, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0], [1, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [1, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0], [1, 0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0], [1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0, 0], [1, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0], [1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0], [1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0], [1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0], [1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 7, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 8, 8, 8],\n [0, 8, 0, 8],\n [0, 8, 8, 8],\n [0, 8, 8, 8],\n [0, 8, 0, 8],\n [0, 8, 8, 8],\n [8, 8, 8, 0],\n [8, 0, 8, 0],\n [8, 8, 8, 0],\n [2, 2, 2, 0],\n [2, 0, 2, 0],\n [2, 2, 2, 0],\n [2, 2, 2, 0],\n [2, 0, 2, 0],\n [2, 2, 2, 0],\n [2, 2, 2, 0],\n [2, 0, 2, 0],\n [2, 2, 2, 0],\n [7, 7, 7, 0],\n [7, 0, 7, 0],\n [7, 7, 7, 0],\n [7, 7, 7, 0],\n [7, 0, 7, 0],\n [7, 7, 7, 0]]", "expected_output": [[8, 8, 8, 8, 8, 8, 8], [8, 2, 8, 0, 7, 8, 8], [8, 0, 2, 0, 7, 8, 7], [2, 0, 2, 0, 0, 7, 0], [2, 0, 2, 0, 0, 7, 0], [2, 0, 0, 0, 0, 7, 0]]}, "b0722778": {"instruction": "1. Divide the input grid into contiguous horizontal blocks separated by rows that contain only zeros. Each block will not contain any fully-zero rows within itself.  \n2. For each non-zero block, extract the last two columns of that block and preserve their row order.  \n3. For each zero-row found, insert a row of two zeros in the same position in the output grid.  \n4. Stack all the extracted and zero rows in the original order to form the output grid.", "test_input": [[1, 1, 0, 1, 1, 0, 0, 4, 4], [2, 1, 0, 1, 2, 0, 0, 3, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 2, 0, 5, 2, 0, 0, 3, 3], [5, 5, 0, 5, 2, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 6, 0, 6, 8, 0, 0, 7, 7], [8, 8, 0, 6, 8, 0, 0, 4, 4]], "predicted_output": "[[4, 4],\n [3, 4],\n [0, 0],\n [3, 3],\n [1, 1],\n [0, 0],\n [7, 7],\n [4, 4]]", "expected_output": [[4, 4], [4, 3], [0, 0], [1, 3], [1, 3], [0, 0], [7, 4], [7, 4]]}, "b0c4d837": {"instruction": "1. Locate the 3x3 square region within the input grid that is filled with the color 8 and is surrounded by the color 5 on the sides.\n2. Extract this 3x3 region of color 8.\n3. Create a new 3x3 grid.\n4. Place the extracted 3x3 region of color 8 as the top row of the new grid.\n5. Fill the remaining two rows of the new grid entirely with 0s.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 5, 0, 0], [0, 0, 5, 8, 8, 8, 5, 0, 0], [0, 0, 5, 8, 8, 8, 5, 0, 0], [0, 0, 5, 8, 8, 8, 5, 0, 0], [0, 0, 5, 8, 8, 8, 5, 0, 0], [0, 0, 5, 8, 8, 8, 5, 0, 0], [0, 0, 5, 8, 8, 8, 5, 0, 0], [0, 0, 5, 5, 5, 5, 5, 0, 0]], "predicted_output": "[[8, 8, 8],\n [0, 0, 0],\n [0, 0, 0]]", "expected_output": [[8, 0, 0], [0, 0, 0], [0, 0, 0]]}, "b0f4d537": {"instruction": "1. From the input grid, extract all columns **after** the last column containing only the values {5, 0} (i.e., the divider column with 5s). In other words, locate the rightmost column where the majority of entries are 5 (the vertical wall), and start your extraction with the column immediately after it, including all remaining columns to the right.\n2. Of the extracted columns, retain only the first 7 columns (i.e., for output, always take 7 columns from the remainder).\n3. The output grid should be the same number of rows as the input, but only include these 7 columns from each row, preserving the left-to-right order. \n4. Output the resulting 2D grid.", "test_input": [[0, 4, 0, 4, 0, 4, 0, 5, 0, 2, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 5, 3, 2, 3, 3, 3, 2, 3], [0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 5, 1, 1, 1, 2, 1, 1, 1], [4, 4, 0, 4, 0, 4, 4, 5, 0, 2, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5], [4, 4, 0, 4, 0, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5], [0, 4, 0, 4, 0, 4, 0, 5, 5, 5, 5, 5, 5, 5, 5]], "predicted_output": "[[0, 2, 0, 2, 0, 2, 0],\n [3, 2, 3, 3, 3, 2, 3],\n [0, 2, 0, 2, 0, 2, 0],\n [1, 2, 1, 1, 1, 1, 1],\n [0, 2, 0, 2, 0, 2, 0],\n [5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5],\n [5, 5, 5, 5, 5, 5, 5]]", "expected_output": [[0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0], [3, 2, 3, 3, 3, 2, 3], [0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0], [1, 1, 1, 2, 1, 1, 1], [0, 2, 0, 2, 0, 2, 0], [0, 2, 0, 2, 0, 2, 0]]}, "b15fca0b": {"instruction": "1. Identify all rows and columns in the grid that are completely filled with 0s.\n2. For each row that contains only 0s, change every 0 in that row to 4.\n3. For each column that contains only 0s, change every 0 in that column to 4, except where it was already changed in step 2 (i.e., do not overwrite non-zero values).\n4. All other cells (non-all-0 rows/columns, and any cells not changed in the above steps) remain unchanged.", "test_input": [[2, 1, 0, 0, 0, 1, 0, 0, 0, 2], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]], "predicted_output": "[[2, 1, 0, 0, 0, 1, 0, 0, 0, 2],\n [0, 1, 0, 0, 0, 1, 0, 1, 0, 0],\n [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\n [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\n [0, 1, 0, 1, 0, 1, 0, 1, 0, 0],\n [0, 0, 0, 1, 0, 0, 0, 1, 0, 0],\n [0, 0, 0, 1, 0, 1, 0, 1, 0, 0],\n [0, 0, 0, 1, 0, 1, 0, 1, 0, 0],\n [0, 0, 0, 1, 0, 1, 0, 1, 0, 0],\n [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]]", "expected_output": [[2, 1, 0, 0, 0, 1, 4, 4, 4, 2], [4, 1, 4, 4, 4, 1, 4, 1, 0, 0], [4, 1, 4, 1, 4, 1, 4, 1, 0, 0], [4, 1, 4, 1, 4, 1, 4, 1, 0, 0], [4, 1, 4, 1, 4, 1, 4, 1, 0, 0], [4, 4, 4, 1, 4, 4, 4, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]]}, "b190f7f5": {"instruction": "1. For each nonzero region in the input grid (that is, for each group of contiguous cells with the same nonzero value), extract its bounding box.\n2. For each such region:\n    a. Create a new region in the output grid whose shape is the same as the input region, but each cell is enlarged into a 2x2 square of the same value.\n    b. The output grid is organized so that every position in the input grid's region is expanded into a block occupying 2 rows and 2 columns in the output grid, resulting in both width and height being doubled for that region.\n    c. The spatial relationship between regions is preserved, so that if two nonzero regions are adjacent in the input grid, their doubled regions remain in corresponding positions without overlap or merging.\n3. Fill all remaining positions in the output grid (those not covered by the scaled regions) with 0.\n4. The final output grid will be of size (2 * input_rows, 2 * input_columns).", "test_input": [[3, 0, 0, 1], [0, 2, 2, 0], [0, 2, 2, 0], [3, 0, 0, 3], [0, 8, 8, 0], [8, 8, 8, 8], [8, 0, 0, 8], [8, 8, 8, 8]], "predicted_output": "[[3, 3, 0, 0, 0, 0, 1, 1],\n [3, 3, 0, 0, 0, 0, 1, 1],\n [0, 0, 2, 2, 2, 2, 0, 0],\n [0, 0, 2, 2, 2, 2, 0, 0],\n [0, 0, 2, 2, 2, 2, 0, 0],\n [0, 0, 2, 2, 2, 2, 0, 0],\n [3, 3, 0, 0, 0, 0, 3, 3],\n [3, 3, 0, 0, 0, 0, 3, 3],\n [0, 0, 8, 8, 8, 8, 0, 0],\n [0, 0, 8, 8, 8, 8, 0, 0],\n [8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 0, 0, 0, 0, 8, 8],\n [8, 8, 0, 0, 0, 0, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8],\n [8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3], [3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3], [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3]]}, "b1948b0a": {"instruction": "1. Scan the entire grid for all occurrences of the value 6.\n2. Replace every cell containing the value 6 with the value 2.\n3. Leave all other cell values unchanged.", "test_input": [[6, 7, 7, 6], [6, 7, 6, 7], [7, 7, 7, 6], [7, 6, 7, 6]], "predicted_output": "[[2, 7, 7, 2],\n [2, 7, 2, 7],\n [7, 7, 7, 2],\n [7, 2, 7, 2]]", "expected_output": [[2, 7, 7, 2], [2, 7, 2, 7], [7, 7, 7, 2], [7, 2, 7, 2]]}, "b1986d4b": {"instruction": "1. Identify all contiguous regions of non-background cells (the numbers other than the background color, which is 1). These regions are rectangular areas filled with one or more non-background colors.\n2. For each such region, extract the smallest rectangle that covers all the non-background cells in that region. The extracted rectangles may touch each other or the border, but do not overlap.\n3. For each extracted region, do the following:\n    a. If the region contains any blocks of the same color in consecutive rows or columns (such as a block of 2's, 3's, or 4's), treat the full block (e.g., a row or column of 2's/3's/4's) as part of the extracted segment.\n    b. Ignore any background cells (1's) that extend beyond the tightest non-background rectangle.\n4. Lay out the extracted regions from left to right and top to bottom, preserving their relative row order from the original grid, but compact the spacing between them so that there are no empty rows or columns between regions.\n5. Place the regions in the following order to form the output grid:\n    - Place the first set of segments with the same color structure in the leftmost columns, stacking vertically if needed.\n    - Continue placing the next segment types directly to the right of the previous, keeping them vertically aligned as in the original.\n    - When one set of regions ends, start a new column group for the next type.\n6. The output grid should be composed only of the compacted non-background blocks, laid out so that each type (e.g., blocks of 2's, 3's, or 4's) from the input is grouped together in columns from left to right. Fill with background color (1) to form a rectangular output grid, as needed.", "test_input": [[4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1], [4, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 1, 1, 4, 4, 4, 1], [4, 4, 2, 2, 2, 2, 4, 4, 4, 1, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 4, 1, 4, 4, 4, 2, 2, 2, 2, 4, 1, 4, 1, 4, 4, 4, 4, 4, 4], [4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 1, 4, 4, 3, 3, 3, 4, 4, 4], [1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4], [4, 4, 4, 4, 4, 4, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 1], [1, 4, 1, 1, 4, 4, 8, 8, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 1, 4, 4, 1, 4], [4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 8, 8, 4, 4, 4, 4, 4, 4, 4, 1], [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 8, 8, 4, 4, 1, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 1, 4, 1, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 1, 4, 8, 8, 4, 4], [1, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 4, 4], [4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 3, 3, 3, 4, 4, 4, 1, 4, 4, 8, 8, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4], [4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 8, 8, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4], [1, 4, 4, 4, 4, 8, 8, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4], [4, 4, 4, 4, 4, 8, 8, 4, 4, 1, 1, 4, 4, 4, 4, 4, 1, 4, 4, 1, 4, 4, 4, 4, 1], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 3, 3, 3, 4], [4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 3, 3, 3, 4], [4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4], [4, 4, 4, 4, 1, 3, 3, 3, 4, 1, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4], [4, 4, 1, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 1, 4, 3, 3, 3, 4, 4, 1, 4, 4, 4, 4], [4, 4, 1, 4, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1]], "predicted_output": "[[2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8],\n [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n [4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]", "expected_output": [[8, 8, 3, 2, 4, 8, 8, 3, 2, 4, 8, 8, 3, 2, 4, 8, 8, 3, 4, 8, 8, 3, 4, 3, 3, 3, 4], [8, 8, 3, 2, 4, 8, 8, 3, 2, 4, 8, 8, 3, 2, 4, 8, 8, 3, 4, 8, 8, 3, 4, 3, 3, 3, 4], [3, 3, 3, 2, 4, 3, 3, 3, 2, 4, 3, 3, 3, 2, 4, 3, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 4], [2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]]}, "b1fc8b8e": {"instruction": "1. Remove the last two rows from the input grid.\n2. For each of the remaining rows:\n    a. Remove the first column.\n    b. Remove the last column.\n3. The resulting grid should now be 4 rows by 4 columns. For each of these 4 rows:\n    a. Append a copy of the current row to the grid, so that there are now 8 rows.\n4. Form the final grid by grouping the rows into pairs: For each consecutive pair of rows (rows 0&1, 2&3, 4&5, 6&7), concatenate them vertically to form a new row, choosing the leftmost four cells from the first row and the rightmost four cells from the second row.\n5. The final grid is a 5x5 grid, as seen in the output.", "test_input": [[0, 8, 0, 8, 0, 0], [8, 8, 8, 8, 8, 0], [0, 0, 0, 8, 8, 8], [0, 0, 0, 0, 8, 8], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], "predicted_output": "[[8, 0, 8, 0, 8],\n [8, 8, 8, 8, 8],\n [0, 0, 8, 8, 8],\n [0, 0, 0, 8, 8],\n [0, 0, 0, 0, 8]]", "expected_output": [[0, 8, 0, 0, 8], [8, 8, 0, 8, 8], [0, 0, 0, 0, 0], [0, 8, 0, 0, 8], [8, 8, 0, 8, 8]]}, "b20f7c8b": {"instruction": "1. Identify each block of contiguous nonzero regions in the grid (groups separated by zeros), treating the grid as divided into \"zones\" by columns of zeros. Each block will be transformed independently.\n2. For each identified block, map its unique colors (excluding zeros) in the following way:\n    - The leftmost non-background, repeated sequence that occurs in the block (often a colored \"area\") is denoted as the *template*.\n    - Replace all numbers inside each block as follows, based on their position (from prior seen examples, this correspondence is inferred):\n        - For the leftmost and rightmost colored blocks within a zone, map:\n            - All 2s \u2192 Replace with a zone-specific color (seen as 7, 4, or 3, depending on the block).\n            - All 1s \u2192 Replace with a zone-specific color (1s often become another part of the new block structure).\n            - For central multi-line colored zones, map the inner block as a square or rectangle of one solid color, preserving the shape of the input region but using the zone's output color.\n        - The mapping of \"internal\" color (inside a block) is shifted so that the pattern for each block matches the output: \n            - Blocks of 6 in the upper-right become blocks of 3 in output.\n            - Blocks of 3 in the lower-right become blocks of 6 in output.\n            - Blocks of 4 in the lower blocks become blocks of 5.\n            - Blocks of 5 in the lower blocks become blocks of 4.\n            - Blocks of 2 in the leftmost/central blocks become blocks of 7.\n    - For any surrounded single-number regions (such as isolated \"1\"s inside a colored block), refer to the respective output patterning for those zones and convert accordingly (e.g., they are replaced by a uniform block of the new zone color, or kept as 1s if the output keeps them).\n3. Update each block in the grid accordingly, to match the target zone shapes as in output: \n    - This generally means: collapse each colored block (originally, e.g., a \"6\" block) in the input into a solid block of the new output color (e.g., all 6\u21923 or all 6\u21924, etc.) in the same region, matching the shape and position.\n    - The new color for each block is chosen in correspondence with its block, as described in Step 2; maintain the block's overall shape.\n4. Leave all zeros and 8s (backgrounds and borders) unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 2, 2, 2, 2, 2, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 8, 8, 3, 8, 3, 8], [0, 2, 1, 1, 1, 2, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 8, 8, 3, 3, 3, 8], [0, 2, 2, 1, 2, 2, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 8, 8, 3, 8, 3, 8], [0, 2, 1, 1, 1, 2, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 2, 2, 2, 2, 2, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 8, 4, 8, 8], [0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 8, 4, 4, 8, 8, 8], [0, 2, 1, 1, 1, 2, 0, 0, 2, 1, 2, 1, 2, 0, 0, 0, 8, 8, 8, 8, 6, 8], [0, 2, 1, 2, 1, 2, 0, 0, 2, 1, 1, 2, 2, 0, 0, 0, 8, 8, 8, 6, 6, 6], [0, 2, 2, 1, 2, 2, 0, 0, 2, 1, 2, 1, 2, 0, 0, 0, 8, 8, 8, 8, 6, 8], [0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 8, 5, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 5, 5, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 8, 5, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],\n [0, 7, 7, 7, 7, 7, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 8, 8, 6, 8, 6, 8],\n [0, 7, 1, 1, 1, 7, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 8, 8, 6, 6, 6, 8],\n [0, 7, 7, 1, 7, 7, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 8, 8, 6, 8, 6, 8],\n [0, 7, 1, 1, 1, 7, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 8, 8, 8, 8, 8, 8],\n [0, 7, 7, 7, 7, 7, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 5, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 8, 5, 8, 8],\n [0, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 8, 5, 5, 8, 8, 8],\n [0, 7, 1, 1, 1, 7, 0, 0, 7, 1, 7, 1, 7, 0, 0, 0, 8, 8, 8, 8, 4, 8],\n [0, 7, 1, 7, 1, 7, 0, 0, 7, 1, 1, 7, 7, 0, 0, 0, 8, 8, 8, 4, 4, 4],\n [0, 7, 7, 1, 7, 7, 0, 0, 7, 1, 7, 1, 7, 0, 0, 0, 8, 8, 8, 8, 4, 8],\n [0, 7, 7, 7, 7, 7, 0, 0, 7, 7, 7, 7, 7, 0, 0, 0, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 8, 3, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 3, 3, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 8, 3, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 8, 8, 3, 8, 3, 8], [0, 3, 3, 3, 3, 3, 0, 0, 2, 2, 1, 2, 2, 0, 0, 0, 8, 8, 3, 3, 3, 8], [0, 3, 3, 3, 3, 3, 0, 0, 2, 1, 1, 1, 2, 0, 0, 0, 8, 8, 3, 8, 3, 8], [0, 3, 3, 3, 3, 3, 0, 0, 2, 2, 1, 2, 2, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 4, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 8, 4, 8, 8], [0, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 8, 4, 4, 8, 8, 8], [0, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 8, 8, 8, 8, 6, 8], [0, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 8, 8, 8, 6, 6, 6], [0, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 8, 8, 8, 8, 6, 8], [0, 4, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 8, 5, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 5, 5, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 8, 5, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8]]}, "b230c067": {"instruction": "1. For each contiguous cluster (connected set) of 8s in the input grid, assign a unique new color: Use 1 for the first distinct cluster, 2 for the second, and continue if needed. Clusters are defined as sets of 8-valued cells that are connected orthogonally (not diagonally).\n2. Replace all 8s in each detected cluster with their corresponding cluster number (i.e., replace all 8s in the first cluster with 1, all 8s in the second cluster with 2, etc.).\n3. Leave all 0s unchanged.", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 8, 8, 0, 0, 0, 8, 8, 8, 0], [0, 0, 8, 0, 0, 0, 0, 0, 8, 0], [0, 8, 0, 0, 0, 0, 0, 8, 0, 0], [0, 8, 8, 8, 0, 0, 8, 8, 8, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 8, 0, 0, 0, 0], [0, 0, 0, 0, 8, 0, 0, 0, 0, 0], [0, 0, 0, 8, 8, 8, 8, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 1, 1, 0, 0, 0, 2, 2, 2, 0],\n [0, 0, 1, 0, 0, 0, 0, 0, 2, 0],\n [0, 1, 0, 0, 0, 0, 0, 2, 0, 0],\n [0, 1, 1, 1, 0, 0, 2, 2, 2, 2],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 3, 3, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 3, 0, 0, 0, 0],\n [0, 0, 0, 0, 3, 0, 0, 0, 0, 0],\n [0, 0, 0, 3, 3, 3, 3, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 2, 0, 0, 0, 1, 1, 1, 0], [0, 0, 2, 0, 0, 0, 0, 0, 1, 0], [0, 2, 0, 0, 0, 0, 0, 1, 0, 0], [0, 2, 2, 2, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0]]}, "b25e450b": {"instruction": "1. Identify all contiguous blocks of 0s (zeros) in both the leftmost columns and the bottommost rows (these are \"0-padded\" blocks at the left or bottom edge).\n2. For each row:  \n    a. If all the leftmost cells, up to the first nonzero value, are 0, set all those initial cells to 0 (leave unchanged).  \n    b. For the leftmost contiguous nonzero block, if it is adjacent to a block of 0s at the edge, change that block to 0s (leave zeros as zeros; don't change non-zero internal values).  \n    c. Otherwise, leave the row unchanged.\n3. For any block of 0s in the bottom rows, for each such block (going from left to right):  \n    a. If a column contains 0s in the bottom rows, then for all cells above the bottom-most block of 0s, change all non-zero values above this block to the most common nonzero value in that column outside the 0-block region (unless it is part of a specifically preserved pattern, such as a 5 or 7 'border').  \n    b. If the column contains no 0s in the bottom rows, leave unchanged.\n4. For all interior regions (not part of the left/bottom 0-padded blocks), replace all nonzero values with the most frequent nonzero value in that region, except for cells in the same column as a bottom 0 block, which are handled according to step 3.\n5. Preserve any horizontal or vertical runs of 5s or 7s that coincide with preserved output patterns; otherwise, set interior nonzero cells to the majority value (either 5 or 7) present in their respective region.\n6. All 0s remain 0s. Do not overwrite existing 0s with nonzero values.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 5, 7, 7], [5, 5, 7, 7, 7, 5, 5, 7, 0, 7, 7, 7, 7, 7], [7, 7, 5, 7, 7, 5, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 5, 7, 7, 5, 5, 5, 5, 7, 7, 0, 0, 0], [7, 7, 7, 5, 7, 5, 7, 7, 7, 5, 7, 7, 7, 5], [7, 5, 7, 7, 5, 7, 7, 7, 7, 5, 5, 7, 7, 5], [0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 5, 7, 7], [0, 0, 0, 0, 0, 0, 7, 5, 5, 7, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 7, 7, 5, 7, 7, 7, 7, 7], [5, 7, 5, 7, 7, 5, 7, 7, 7, 5, 5, 0, 0, 0], [0, 0, 0, 7, 7, 7, 7, 7, 5, 5, 5, 5, 7, 5], [0, 0, 0, 7, 5, 7, 5, 7, 7, 7, 7, 5, 7, 7], [5, 7, 5, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 5, 5, 7, 5, 7, 7, 7, 0, 0], [7, 5, 7, 5, 7, 7, 7, 5, 5, 0, 7, 5, 0, 0], [5, 7, 7, 0, 0, 0, 0, 7, 7, 0, 7, 7, 7, 7], [7, 7, 7, 0, 0, 0, 0, 7, 7, 0, 7, 7, 7, 5], [7, 7, 7, 0, 0, 0, 0, 5, 5, 0, 7, 5, 7, 7]], "predicted_output": "[[7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 5, 7, 7],\n [5, 5, 7, 7, 7, 5, 5, 7, 0, 7, 7, 7, 7, 7],\n [7, 7, 5, 7, 7, 5, 7, 7, 7, 7, 7, 0, 0, 0],\n [7, 7, 5, 7, 7, 5, 5, 5, 5, 7, 7, 0, 0, 0],\n [7, 7, 7, 5, 7, 5, 7, 7, 7, 5, 7, 7, 7, 5],\n [7, 5, 7, 7, 5, 7, 7, 7, 7, 5, 5, 7, 7, 5],\n [0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 5, 7, 7],\n [0, 0, 0, 0, 0, 0, 7, 5, 5, 7, 7, 7, 7, 7],\n [0, 0, 0, 0, 0, 0, 7, 7, 5, 7, 7, 7, 7, 7],\n [5, 7, 5, 7, 7, 5, 7, 7, 7, 5, 5, 0, 0, 0],\n [0, 0, 0, 7, 7, 7, 7, 7, 5, 5, 5, 5, 7, 5],\n [0, 0, 0, 7, 5, 7, 5, 7, 7, 7, 7, 5, 7, 7],\n [5, 7, 5, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 5, 5, 7, 5, 7, 7, 7, 0, 0],\n [7, 5, 7, 5, 7, 7, 7, 5, 5, 0, 7, 5, 0, 0],\n [5, 7, 7, 0, 0, 0, 0, 7, 7, 0, 7, 7, 7, 7],\n [7, 7, 7, 0, 0, 0, 0, 7, 7, 0, 7, 7, 7, 5],\n [7, 7, 7, 0, 0, 0, 0, 5, 5, 0, 7, 5, 7, 7]]", "expected_output": [[7, 7, 7, 0, 0, 0, 0, 7, 7, 0, 7, 5, 7, 7], [5, 5, 7, 0, 0, 0, 0, 7, 7, 0, 7, 7, 7, 7], [0, 0, 0, 0, 0, 0, 0, 7, 7, 0, 7, 7, 7, 7], [0, 0, 0, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5], [7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 5], [7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0], [0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0], [5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7, 0, 7, 7, 7, 7, 5], [7, 7, 7, 7, 7, 7, 7, 5, 0, 7, 7, 5, 7, 7]]}, "b27ca6d3": {"instruction": "1. For every pair of horizontally adjacent cells that both contain the value 2, replace the cells directly above and below this pair (if within grid bounds and currently 0) with the value 3.\n2. For every pair of vertically adjacent cells that both contain the value 2, replace the cells directly to the left and right of this pair (if within grid bounds and currently 0) with the value 3.\n3. Do not modify any cell that is already nonzero (i.e., a 2 or previously placed 3).", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0], [2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 2, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0],\n [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0],\n [2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0],\n [0, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],\n [0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 0, 0],\n [0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 2, 0, 0, 0], [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 3, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3], [0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3], [0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3, 2, 3], [2, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 0, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3, 2, 0, 0, 0, 0], [0, 0, 2, 0, 2, 3, 3, 3, 3, 2, 3, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 3, 2, 2, 3, 3, 3, 2, 0, 2, 0, 0], [0, 0, 0, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]]}, "b2862040": {"instruction": "1. For every connected cluster of cells with value 1, excluding clusters that touch the first or last row or column, change all 1s in these clusters to 8.\n2. Leave all other cell values unchanged.", "test_input": [[1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9], [9, 9, 9, 1, 1, 1, 1, 1, 9, 9, 9, 1, 9, 9, 9], [9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 1, 9, 9, 9], [9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 1, 9, 9, 9], [9, 9, 9, 9, 1, 1, 1, 1, 9, 9, 9, 1, 9, 9, 1], [9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 1, 1, 1, 1], [1, 1, 1, 1, 9, 9, 9, 1, 9, 9, 9, 1, 9, 9, 1], [1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1], [1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1], [1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 1, 1, 9], [9, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9], [9, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9], [9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 1, 9]], "predicted_output": "[[1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9],\n [9, 9, 9, 8, 8, 8, 8, 8, 9, 9, 9, 1, 9, 9, 9],\n [9, 9, 9, 9, 8, 9, 9, 8, 9, 9, 9, 1, 9, 9, 9],\n [9, 9, 9, 9, 8, 9, 9, 8, 9, 9, 9, 1, 9, 9, 9],\n [9, 9, 9, 9, 8, 8, 8, 8, 9, 9, 9, 1, 9, 9, 1],\n [9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 1, 1, 1, 1],\n [1, 1, 1, 1, 9, 9, 9, 8, 9, 9, 9, 1, 9, 9, 1],\n [1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1],\n [1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1],\n [1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n [9, 9, 9, 1, 1, 1, 1, 1, 1, 9, 9, 9, 1, 1, 9],\n [9, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9],\n [9, 9, 9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9],\n [9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 1, 9]]", "expected_output": [[1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 9], [9, 9, 9, 8, 8, 8, 8, 8, 9, 9, 9, 1, 9, 9, 9], [9, 9, 9, 9, 8, 9, 9, 8, 9, 9, 9, 1, 9, 9, 9], [9, 9, 9, 9, 8, 9, 9, 8, 9, 9, 9, 1, 9, 9, 9], [9, 9, 9, 9, 8, 8, 8, 8, 9, 9, 9, 1, 9, 9, 1], [9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 1, 1, 1, 1], [1, 1, 1, 1, 9, 9, 9, 8, 9, 9, 9, 1, 9, 9, 1], [1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1], [1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1], [1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 8, 8, 8, 8, 8, 8, 9, 9, 9, 1, 1, 9], [9, 9, 9, 8, 9, 9, 9, 9, 8, 9, 9, 9, 9, 1, 9], [9, 9, 9, 8, 9, 9, 9, 9, 8, 9, 9, 9, 9, 1, 9], [9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 1, 9]]}, "b2bc3ffd": {"instruction": "1. Identify any connected non-background regions above the bottom row, where the \"background\" color is the one that fills most of the grid (here, 7), and the bottom row is a \"special\" row (here, the row of 8s).\n2. For each such non-background group, move it upwards so that it occupies the highest available positions in the grid, maintaining its horizontal alignment and internal structure. Once a group has been moved upward, set all cells in their former locations to the background color.\n3. If there are multiple, disconnected non-background regions within the same group, retain their spatial relation as you move them together.\n4. Repeat this process for all such groups, in descending order from bottom to top.\n5. After all non-background groups have been lifted to the topmost possible positions without changing their shape or overlap, set all cells not belonging to these groups (except the bottom \"special\" row) to the background value.\n6. Leave the bottom (special) row unchanged.", "test_input": [[7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [5, 5, 5, 5, 5, 5, 7, 6], [8, 8, 8, 8, 8, 8, 8, 8]], "predicted_output": "[[5, 5, 5, 5, 5, 5, 7, 6],\n [7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7],\n [7, 7, 7, 7, 7, 7, 7, 7],\n [8, 8, 8, 8, 8, 8, 8, 8]]", "expected_output": [[5, 5, 5, 5, 5, 5, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 7], [7, 7, 7, 7, 7, 7, 7, 6], [7, 7, 7, 7, 7, 7, 7, 7], [8, 8, 8, 8, 8, 8, 8, 8]]}, "b457fec5": {"instruction": "1. Identify the topmost row (the \"reference row\") containing a contiguous sequence of nonzero, non-5 colors before the first block of 5's. This row will act as a repeating color template for filling the pattern below.\n2. For each diagonally downward 'band' of 5's that forms the wedge or staircase shape:\n    a. Starting from the first row where 5's appear, and for each such diagonal band below, assign the colors over the band of 5's by shifting the reference row's nonzero, non-5 color template one cell right per row downward.\n    b. Place each color from the reference template on the diagonal (overwriting the 5), and fill the remaining wedge positions in the band by continuing the sequence, wrapping the template if needed.\n    c. If the wedge/band is longer than the template, continue using the last color in the template for the extra positions.\n3. Leave all other cells unchanged (zero remains zero).", "test_input": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], "predicted_output": "[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 3, 4, 2, 2, 0],\n [0, 1, 3, 4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 2, 2, 2, 0],\n [0, 3, 4, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 2, 2, 0],\n [0, 4, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0],\n [0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0],\n [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0],\n [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0],\n [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 3, 1, 0], [0, 1, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 4, 3, 1, 0], [0, 1, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 4, 3, 1, 0], [0, 1, 3, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 4, 3, 0, 0], [0, 1, 3, 4, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 4, 0, 0, 0], [0, 0, 3, 4, 2, 1, 3, 3, 3, 3, 3, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], [0, 0, 0, 4, 2, 1, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 3, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 3, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 3, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 3, 4, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 3, 4, 2, 1, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 2, 1, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 1, 3, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 3, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "b4a43f3b": {"instruction": "1. Create an 18x18 grid filled with zeros.\n2. Identify all unique 6x2 \"block-rows\" in the top 6 rows of the input (blocks, top-to-bottom, of size 2 rows and 6 columns each; there are three such block-rows, vertically stacked: rows 0\u20131, 2\u20133, 4\u20135).\n3. For each 6x2 block-row:\n    a. Transpose the 2 rows into a single row: place the first row\u2019s six elements into columns 0\u20135, then the second row\u2019s six elements into columns 6\u201311 of a new row.\n    b. Place this row in the output grid at positions (row, col) = (6*i, 0) for i = 0,1,2 (i.e., rows 0, 6, 12).\n    c. Place a similar row at (6*i+3, 0).\n    d. For each block-row, if there is a nonzero block directly beneath in rows 6\u20137 of the input, add a similar pair of rows at (row, col) = (6*i, 6) and (6*i+3, 6) in the output, using corresponding swapped contents.\n4. For each \"pattern block\" in the lower part of the input (rows 7 and below), repeat the following every three input rows (input rows 7\u20139, 10\u201312, etc.):\n    a. For each such set, transform the rows into the output at intervals: for each input row in a set, spread the nonzero numbers into their corresponding positions in groups of 6 columns, and stack these on output rows 6n, 6n+1, and 6n+2 and/or 6n+3, 6n+4, and 6n+5 as appropriate, with correct padding as seen in the examples.\n5. For any details not fitting these steps, place nonzero elements so they replicate the relative positions and groupings from the input blocks, using the established output grid intervals (groups of 6 columns and rows separated by 3 or 6).", "test_input": [[0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0], [3, 3, 0, 0, 3, 3], [3, 3, 0, 0, 3, 3], [0, 0, 2, 2, 0, 0], [0, 0, 2, 2, 0, 0], [5, 5, 5, 5, 5, 5], [2, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0], [2, 2, 2, 2, 2, 2], [0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 2, 0, 0, 0]], "predicted_output": "[[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]", "expected_output": [[0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 3, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [3, 0, 3, 3, 0, 3, 3, 0, 3, 3, 0, 3, 3, 0, 3, 3, 0, 3], [0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}, "b527c5c6": {"instruction": "1. For each column x in the grid, locate any vertical contiguous block(s) of nonzero values.\n2. For each such vertical block:\n    a. Shift the entire block upwards so that its topmost cell is aligned with the first available cell in the column (moving it as far up as possible).\n3. After shifting, process the leftmost of these vertical blocks first, and for every row within the shifted block:\n    a. If there are more rows above the top row of the block in the column, extend the top color(s) of the leftmost block upwards to fill extra empty rows if needed, to match the width/height of leftmost vertical patterns from the bottom (if present in the input's bottom).\n4. For the right side of the grid, after all upward shifts, fill the rightmost cells of every affected row \u2014 starting from the row where a horizontal line of 3\u2019s and a single 2 appears at the bottom \u2014 with 3\u2019s and 2\u2019s as in the corresponding completed pattern in the lower part of the grid.\n5. For all contiguous rows at the bottom with horizontal patterns of 3\u2019s (with embedded 2), extend these contiguous horizontal patterns up as a block, keeping their order and colors, shifting them upwards so that they start immediately below the last row filled by the vertically shifted blocks from above.\n6. The resulting grid should have all originally vertically contiguous nonzero blocks \u201cstacked\u201d at the top of their columns (removing interior zeros), and all originally horizontally contiguous nonzero blocks (from the bottom) also stacked above, merging at the interface between the top stacked columns and the continuous bottom pattern, replacing zeros with 3\u2019s or 2\u2019s wherever those patterns require.", "test_input": [[0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]], "predicted_output": "[[0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\n [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]", "expected_output": [[0, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [2, 2, 2, 2, 2, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]}}